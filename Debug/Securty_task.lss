
Securty_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00004b28  00004b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000381c  00000000  00000000  00004d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c59  00000000  00000000  0000852c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00009185  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00009345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  00009559  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  0000bb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000d039  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000e344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000e524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000e82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <main>
      7a:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac ec       	ldi	r26, 0xCC	; 204
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c ec       	ldi	r24, 0xCC	; 204
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c ec       	ldi	r22, 0xCC	; 204
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 80 25 	jmp	0x4b00	; 0x4b00 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	ec 52       	subi	r30, 0x2C	; 44
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <Dio_vidSetPinDir>:
#include"../Lib/Std_types.h"
#include"../Lib/Bit_math.h"
#include"Dio_int.h"
#include<avr/io.h>
void Dio_vidSetPinDir(u8 Pin ,u8 Dir)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <Dio_vidSetPinDir+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <Dio_vidSetPinDir+0x8>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <Dio_vidSetPinDir+0xa>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	86 95       	lsr	r24
     ef0:	86 95       	lsr	r24
     ef2:	86 95       	lsr	r24
     ef4:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc =Pin%8 ;
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	87 70       	andi	r24, 0x07	; 7
     efa:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3e 83       	std	Y+6, r19	; 0x06
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	8d 81       	ldd	r24, Y+5	; 0x05
     f08:	9e 81       	ldd	r25, Y+6	; 0x06
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <Dio_vidSetPinDir+0x38>
     f10:	43 c0       	rjmp	.+134    	; 0xf98 <Dio_vidSetPinDir+0xbe>
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	31 05       	cpc	r19, r1
     f1a:	2c f4       	brge	.+10     	; 0xf26 <Dio_vidSetPinDir+0x4c>
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	71 f0       	breq	.+28     	; 0xf40 <Dio_vidSetPinDir+0x66>
     f24:	bc c0       	rjmp	.+376    	; 0x109e <Dio_vidSetPinDir+0x1c4>
     f26:	2d 81       	ldd	r18, Y+5	; 0x05
     f28:	3e 81       	ldd	r19, Y+6	; 0x06
     f2a:	22 30       	cpi	r18, 0x02	; 2
     f2c:	31 05       	cpc	r19, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <Dio_vidSetPinDir+0x58>
     f30:	5f c0       	rjmp	.+190    	; 0xff0 <Dio_vidSetPinDir+0x116>
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Dio_vidSetPinDir+0x64>
     f3c:	85 c0       	rjmp	.+266    	; 0x1048 <Dio_vidSetPinDir+0x16e>
     f3e:	af c0       	rjmp	.+350    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	{
	case 0 :if(Dir==1)
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <Dio_vidSetPinDir+0x94>
	{SET_BIT(DDRA,PinLoc);
     f46:	aa e3       	ldi	r26, 0x3A	; 58
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <Dio_vidSetPinDir+0x8a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <Dio_vidSetPinDir+0x86>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	98 c0       	rjmp	.+304    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	else{
		CLR_BIT(DDRA,PinLoc);
     f6e:	aa e3       	ldi	r26, 0x3A	; 58
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e3       	ldi	r30, 0x3A	; 58
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <Dio_vidSetPinDir+0xb2>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <Dio_vidSetPinDir+0xae>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	83 c0       	rjmp	.+262    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	break;
	case 1 :if(Dir==1)
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <Dio_vidSetPinDir+0xec>
	{SET_BIT(DDRB,PinLoc);
     f9e:	a7 e3       	ldi	r26, 0x37	; 55
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e7 e3       	ldi	r30, 0x37	; 55
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <Dio_vidSetPinDir+0xe2>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <Dio_vidSetPinDir+0xde>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	6c c0       	rjmp	.+216    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	else{
		CLR_BIT(DDRB,PinLoc);
     fc6:	a7 e3       	ldi	r26, 0x37	; 55
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e7 e3       	ldi	r30, 0x37	; 55
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <Dio_vidSetPinDir+0x10a>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <Dio_vidSetPinDir+0x106>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	57 c0       	rjmp	.+174    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	break;
	case 2 :if(Dir==1)
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <Dio_vidSetPinDir+0x144>
	{SET_BIT(DDRC,PinLoc);
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <Dio_vidSetPinDir+0x13a>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <Dio_vidSetPinDir+0x136>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	40 c0       	rjmp	.+128    	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	else{
		CLR_BIT(DDRC,PinLoc);
    101e:	a4 e3       	ldi	r26, 0x34	; 52
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e4 e3       	ldi	r30, 0x34	; 52
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <Dio_vidSetPinDir+0x162>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <Dio_vidSetPinDir+0x15e>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	2b c0       	rjmp	.+86     	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	break ;
	case 3 :if(Dir==1)
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	a1 f4       	brne	.+40     	; 0x1076 <Dio_vidSetPinDir+0x19c>
	{SET_BIT(DDRD,PinLoc);
    104e:	a1 e3       	ldi	r26, 0x31	; 49
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e3       	ldi	r30, 0x31	; 49
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <Dio_vidSetPinDir+0x192>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <Dio_vidSetPinDir+0x18e>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	14 c0       	rjmp	.+40     	; 0x109e <Dio_vidSetPinDir+0x1c4>
	}
	else{
		CLR_BIT(DDRD,PinLoc) ;
    1076:	a1 e3       	ldi	r26, 0x31	; 49
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e1 e3       	ldi	r30, 0x31	; 49
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <Dio_vidSetPinDir+0x1ba>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <Dio_vidSetPinDir+0x1b6>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
	}
	break ;
	}
}
    109e:	26 96       	adiw	r28, 0x06	; 6
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <Dio_vidSetPinVal>:
void Dio_vidSetPinVal(u8 Pin ,u8 Val)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <Dio_vidSetPinVal+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <Dio_vidSetPinVal+0x8>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <Dio_vidSetPinVal+0xa>
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	6c 83       	std	Y+4, r22	; 0x04
	u8 PortId;
	u8 PinLoc;
	PortId=Pin/8;
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	86 95       	lsr	r24
    10c6:	86 95       	lsr	r24
    10c8:	86 95       	lsr	r24
    10ca:	8a 83       	std	Y+2, r24	; 0x02
	PinLoc =Pin%8 ;
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	87 70       	andi	r24, 0x07	; 7
    10d0:	89 83       	std	Y+1, r24	; 0x01
	switch(PortId)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3e 83       	std	Y+6, r19	; 0x06
    10da:	2d 83       	std	Y+5, r18	; 0x05
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <Dio_vidSetPinVal+0x38>
    10e6:	43 c0       	rjmp	.+134    	; 0x116e <Dio_vidSetPinVal+0xbe>
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	2c f4       	brge	.+10     	; 0x10fc <Dio_vidSetPinVal+0x4c>
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	71 f0       	breq	.+28     	; 0x1116 <Dio_vidSetPinVal+0x66>
    10fa:	bc c0       	rjmp	.+376    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
    10fc:	2d 81       	ldd	r18, Y+5	; 0x05
    10fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	31 05       	cpc	r19, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <Dio_vidSetPinVal+0x58>
    1106:	5f c0       	rjmp	.+190    	; 0x11c6 <Dio_vidSetPinVal+0x116>
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	9e 81       	ldd	r25, Y+6	; 0x06
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <Dio_vidSetPinVal+0x64>
    1112:	85 c0       	rjmp	.+266    	; 0x121e <Dio_vidSetPinVal+0x16e>
    1114:	af c0       	rjmp	.+350    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	{
	case 0 :if(Val==1)
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	a1 f4       	brne	.+40     	; 0x1144 <Dio_vidSetPinVal+0x94>
	{SET_BIT(PORTA,PinLoc);
    111c:	ab e3       	ldi	r26, 0x3B	; 59
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e3       	ldi	r30, 0x3B	; 59
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <Dio_vidSetPinVal+0x8a>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <Dio_vidSetPinVal+0x86>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	98 c0       	rjmp	.+304    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	else{
		CLR_BIT(PORTA,PinLoc);
    1144:	ab e3       	ldi	r26, 0x3B	; 59
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	eb e3       	ldi	r30, 0x3B	; 59
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <Dio_vidSetPinVal+0xb2>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <Dio_vidSetPinVal+0xae>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	83 c0       	rjmp	.+262    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	break;
	case 1 :if(Val==1)
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <Dio_vidSetPinVal+0xec>
	{SET_BIT(PORTB,PinLoc);
    1174:	a8 e3       	ldi	r26, 0x38	; 56
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e8 e3       	ldi	r30, 0x38	; 56
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <Dio_vidSetPinVal+0xe2>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <Dio_vidSetPinVal+0xde>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	6c c0       	rjmp	.+216    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	else{
		CLR_BIT(PORTB,PinLoc);
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <Dio_vidSetPinVal+0x10a>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <Dio_vidSetPinVal+0x106>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	57 c0       	rjmp	.+174    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	break;
	case 2 :if(Val==1)
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <Dio_vidSetPinVal+0x144>
	{SET_BIT(PORTC,PinLoc);
    11cc:	a5 e3       	ldi	r26, 0x35	; 53
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e5 e3       	ldi	r30, 0x35	; 53
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <Dio_vidSetPinVal+0x13a>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <Dio_vidSetPinVal+0x136>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	40 c0       	rjmp	.+128    	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	else{
		CLR_BIT(PORTC,PinLoc);
    11f4:	a5 e3       	ldi	r26, 0x35	; 53
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e3       	ldi	r30, 0x35	; 53
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <Dio_vidSetPinVal+0x162>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <Dio_vidSetPinVal+0x15e>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	2b c0       	rjmp	.+86     	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	break ;
	case 3 :if(Val==1)
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	a1 f4       	brne	.+40     	; 0x124c <Dio_vidSetPinVal+0x19c>
	{SET_BIT(PORTD,PinLoc);
    1224:	a2 e3       	ldi	r26, 0x32	; 50
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e2 e3       	ldi	r30, 0x32	; 50
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <Dio_vidSetPinVal+0x192>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <Dio_vidSetPinVal+0x18e>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <Dio_vidSetPinVal+0x1c4>
	}
	else{
		CLR_BIT(PORTD,PinLoc) ;
    124c:	a2 e3       	ldi	r26, 0x32	; 50
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <Dio_vidSetPinVal+0x1ba>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <Dio_vidSetPinVal+0x1b6>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
	}
	break ;
	}
}
    1274:	26 96       	adiw	r28, 0x06	; 6
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <Keypad_vidInit>:
#include"Keypad_int.h"
#undef F_CPU
#define F_CPU 8000000
#include <util/delay.h>
void Keypad_vidInit(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	DDRC=0b00001111; //nos el keypad input we nos output
    128e:	e4 e3       	ldi	r30, 0x34	; 52
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8f e0       	ldi	r24, 0x0F	; 15
    1294:	80 83       	st	Z, r24
	PORTC=0b11111111; //out put 5 v and input with pull resistance
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	80 83       	st	Z, r24
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <Keypad_u8GetKey>:
u8 Keypad_u8GetKey(void)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	2a 97       	sbiw	r28, 0x0a	; 10
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
	u8 temp;
	CLR_BIT(PORTC,0);
    12b8:	a5 e3       	ldi	r26, 0x35	; 53
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8e 7f       	andi	r24, 0xFE	; 254
    12c4:	8c 93       	st	X, r24
	SET_BIT(PORTC,1);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	82 60       	ori	r24, 0x02	; 2
    12d2:	8c 93       	st	X, r24
	SET_BIT(PORTC,2);
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	84 60       	ori	r24, 0x04	; 4
    12e0:	8c 93       	st	X, r24
	SET_BIT(PORTC,3);
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	8c 93       	st	X, r24
	//kda ktbt 1110
	temp = PINC&0b11110000; /*lw ana days 3la awl zorara fe al colum da m3naha
    12f0:	e3 e3       	ldi	r30, 0x33	; 51
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 7f       	andi	r24, 0xF0	; 240
    12f8:	89 83       	std	Y+1, r24	; 0x01
PINA 01111111 fkda natg al drb hykon 01110000 we dh awl zorara f3ln*/
	switch(temp)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3a 87       	std	Y+10, r19	; 0x0a
    1302:	29 87       	std	Y+9, r18	; 0x09
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	80 3b       	cpi	r24, 0xB0	; 176
    130a:	91 05       	cpc	r25, r1
    130c:	d9 f0       	breq	.+54     	; 0x1344 <Keypad_u8GetKey+0xa0>
    130e:	29 85       	ldd	r18, Y+9	; 0x09
    1310:	3a 85       	ldd	r19, Y+10	; 0x0a
    1312:	21 3b       	cpi	r18, 0xB1	; 177
    1314:	31 05       	cpc	r19, r1
    1316:	34 f4       	brge	.+12     	; 0x1324 <Keypad_u8GetKey+0x80>
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	80 37       	cpi	r24, 0x70	; 112
    131e:	91 05       	cpc	r25, r1
    1320:	a1 f0       	breq	.+40     	; 0x134a <Keypad_u8GetKey+0xa6>
    1322:	16 c0       	rjmp	.+44     	; 0x1350 <Keypad_u8GetKey+0xac>
    1324:	29 85       	ldd	r18, Y+9	; 0x09
    1326:	3a 85       	ldd	r19, Y+10	; 0x0a
    1328:	20 3d       	cpi	r18, 0xD0	; 208
    132a:	31 05       	cpc	r19, r1
    132c:	41 f0       	breq	.+16     	; 0x133e <Keypad_u8GetKey+0x9a>
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	80 3e       	cpi	r24, 0xE0	; 224
    1334:	91 05       	cpc	r25, r1
    1336:	61 f4       	brne	.+24     	; 0x1350 <Keypad_u8GetKey+0xac>
	{
	case 0b11100000: return 1;
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	98 87       	std	Y+8, r25	; 0x08
    133c:	c4 c0       	rjmp	.+392    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b11010000: return 2;
    133e:	22 e0       	ldi	r18, 0x02	; 2
    1340:	28 87       	std	Y+8, r18	; 0x08
    1342:	c1 c0       	rjmp	.+386    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b10110000: return 3;
    1344:	33 e0       	ldi	r19, 0x03	; 3
    1346:	38 87       	std	Y+8, r19	; 0x08
    1348:	be c0       	rjmp	.+380    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b01110000: return '+';
    134a:	8b e2       	ldi	r24, 0x2B	; 43
    134c:	88 87       	std	Y+8, r24	; 0x08
    134e:	bb c0       	rjmp	.+374    	; 0x14c6 <Keypad_u8GetKey+0x222>
	}
	//hnkrr nfs al klam ll rows al b2ya
	SET_BIT(PORTC,0); // 3mlt set lly kan clear
    1350:	a5 e3       	ldi	r26, 0x35	; 53
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	81 60       	ori	r24, 0x01	; 1
    135c:	8c 93       	st	X, r24
	CLR_BIT(PORTC,1); // clear lly b3do
    135e:	a5 e3       	ldi	r26, 0x35	; 53
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8d 7f       	andi	r24, 0xFD	; 253
    136a:	8c 93       	st	X, r24
	temp = PINC&0b11110000; //read the new patern
    136c:	e3 e3       	ldi	r30, 0x33	; 51
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 7f       	andi	r24, 0xF0	; 240
    1374:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3f 83       	std	Y+7, r19	; 0x07
    137e:	2e 83       	std	Y+6, r18	; 0x06
    1380:	8e 81       	ldd	r24, Y+6	; 0x06
    1382:	9f 81       	ldd	r25, Y+7	; 0x07
    1384:	80 3b       	cpi	r24, 0xB0	; 176
    1386:	91 05       	cpc	r25, r1
    1388:	d9 f0       	breq	.+54     	; 0x13c0 <Keypad_u8GetKey+0x11c>
    138a:	2e 81       	ldd	r18, Y+6	; 0x06
    138c:	3f 81       	ldd	r19, Y+7	; 0x07
    138e:	21 3b       	cpi	r18, 0xB1	; 177
    1390:	31 05       	cpc	r19, r1
    1392:	34 f4       	brge	.+12     	; 0x13a0 <Keypad_u8GetKey+0xfc>
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	9f 81       	ldd	r25, Y+7	; 0x07
    1398:	80 37       	cpi	r24, 0x70	; 112
    139a:	91 05       	cpc	r25, r1
    139c:	a1 f0       	breq	.+40     	; 0x13c6 <Keypad_u8GetKey+0x122>
    139e:	16 c0       	rjmp	.+44     	; 0x13cc <Keypad_u8GetKey+0x128>
    13a0:	2e 81       	ldd	r18, Y+6	; 0x06
    13a2:	3f 81       	ldd	r19, Y+7	; 0x07
    13a4:	20 3d       	cpi	r18, 0xD0	; 208
    13a6:	31 05       	cpc	r19, r1
    13a8:	41 f0       	breq	.+16     	; 0x13ba <Keypad_u8GetKey+0x116>
    13aa:	8e 81       	ldd	r24, Y+6	; 0x06
    13ac:	9f 81       	ldd	r25, Y+7	; 0x07
    13ae:	80 3e       	cpi	r24, 0xE0	; 224
    13b0:	91 05       	cpc	r25, r1
    13b2:	61 f4       	brne	.+24     	; 0x13cc <Keypad_u8GetKey+0x128>
	{
	case 0b11100000: return 4;
    13b4:	94 e0       	ldi	r25, 0x04	; 4
    13b6:	98 87       	std	Y+8, r25	; 0x08
    13b8:	86 c0       	rjmp	.+268    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b11010000: return 5;
    13ba:	25 e0       	ldi	r18, 0x05	; 5
    13bc:	28 87       	std	Y+8, r18	; 0x08
    13be:	83 c0       	rjmp	.+262    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b10110000: return 6;
    13c0:	36 e0       	ldi	r19, 0x06	; 6
    13c2:	38 87       	std	Y+8, r19	; 0x08
    13c4:	80 c0       	rjmp	.+256    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b01110000: return '-';
    13c6:	8d e2       	ldi	r24, 0x2D	; 45
    13c8:	88 87       	std	Y+8, r24	; 0x08
    13ca:	7d c0       	rjmp	.+250    	; 0x14c6 <Keypad_u8GetKey+0x222>
	}
	SET_BIT(PORTC,1);
    13cc:	a5 e3       	ldi	r26, 0x35	; 53
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	8c 93       	st	X, r24
	CLR_BIT(PORTC,2);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8b 7f       	andi	r24, 0xFB	; 251
    13e6:	8c 93       	st	X, r24
	temp = PINC&0b11110000;
    13e8:	e3 e3       	ldi	r30, 0x33	; 51
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 7f       	andi	r24, 0xF0	; 240
    13f0:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	3d 83       	std	Y+5, r19	; 0x05
    13fa:	2c 83       	std	Y+4, r18	; 0x04
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	80 3b       	cpi	r24, 0xB0	; 176
    1402:	91 05       	cpc	r25, r1
    1404:	d9 f0       	breq	.+54     	; 0x143c <Keypad_u8GetKey+0x198>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	21 3b       	cpi	r18, 0xB1	; 177
    140c:	31 05       	cpc	r19, r1
    140e:	34 f4       	brge	.+12     	; 0x141c <Keypad_u8GetKey+0x178>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	80 37       	cpi	r24, 0x70	; 112
    1416:	91 05       	cpc	r25, r1
    1418:	a1 f0       	breq	.+40     	; 0x1442 <Keypad_u8GetKey+0x19e>
    141a:	16 c0       	rjmp	.+44     	; 0x1448 <Keypad_u8GetKey+0x1a4>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	20 3d       	cpi	r18, 0xD0	; 208
    1422:	31 05       	cpc	r19, r1
    1424:	41 f0       	breq	.+16     	; 0x1436 <Keypad_u8GetKey+0x192>
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	80 3e       	cpi	r24, 0xE0	; 224
    142c:	91 05       	cpc	r25, r1
    142e:	61 f4       	brne	.+24     	; 0x1448 <Keypad_u8GetKey+0x1a4>
	{
	case 0b11100000: return 7;
    1430:	97 e0       	ldi	r25, 0x07	; 7
    1432:	98 87       	std	Y+8, r25	; 0x08
    1434:	48 c0       	rjmp	.+144    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b11010000: return 8;
    1436:	28 e0       	ldi	r18, 0x08	; 8
    1438:	28 87       	std	Y+8, r18	; 0x08
    143a:	45 c0       	rjmp	.+138    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b10110000: return 9;
    143c:	39 e0       	ldi	r19, 0x09	; 9
    143e:	38 87       	std	Y+8, r19	; 0x08
    1440:	42 c0       	rjmp	.+132    	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b01110000: return '*';
    1442:	8a e2       	ldi	r24, 0x2A	; 42
    1444:	88 87       	std	Y+8, r24	; 0x08
    1446:	3f c0       	rjmp	.+126    	; 0x14c6 <Keypad_u8GetKey+0x222>
	}
	SET_BIT(PORTC,2);
    1448:	a5 e3       	ldi	r26, 0x35	; 53
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	8c 93       	st	X, r24
	CLR_BIT(PORTC,3);
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	87 7f       	andi	r24, 0xF7	; 247
    1462:	8c 93       	st	X, r24
	temp = PINC&0b11110000;
    1464:	e3 e3       	ldi	r30, 0x33	; 51
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 7f       	andi	r24, 0xF0	; 240
    146c:	89 83       	std	Y+1, r24	; 0x01
	switch(temp)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3b 83       	std	Y+3, r19	; 0x03
    1476:	2a 83       	std	Y+2, r18	; 0x02
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	9b 81       	ldd	r25, Y+3	; 0x03
    147c:	80 3b       	cpi	r24, 0xB0	; 176
    147e:	91 05       	cpc	r25, r1
    1480:	d1 f0       	breq	.+52     	; 0x14b6 <Keypad_u8GetKey+0x212>
    1482:	2a 81       	ldd	r18, Y+2	; 0x02
    1484:	3b 81       	ldd	r19, Y+3	; 0x03
    1486:	21 3b       	cpi	r18, 0xB1	; 177
    1488:	31 05       	cpc	r19, r1
    148a:	34 f4       	brge	.+12     	; 0x1498 <Keypad_u8GetKey+0x1f4>
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	80 37       	cpi	r24, 0x70	; 112
    1492:	91 05       	cpc	r25, r1
    1494:	99 f0       	breq	.+38     	; 0x14bc <Keypad_u8GetKey+0x218>
    1496:	15 c0       	rjmp	.+42     	; 0x14c2 <Keypad_u8GetKey+0x21e>
    1498:	2a 81       	ldd	r18, Y+2	; 0x02
    149a:	3b 81       	ldd	r19, Y+3	; 0x03
    149c:	20 3d       	cpi	r18, 0xD0	; 208
    149e:	31 05       	cpc	r19, r1
    14a0:	41 f0       	breq	.+16     	; 0x14b2 <Keypad_u8GetKey+0x20e>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	9b 81       	ldd	r25, Y+3	; 0x03
    14a6:	80 3e       	cpi	r24, 0xE0	; 224
    14a8:	91 05       	cpc	r25, r1
    14aa:	59 f4       	brne	.+22     	; 0x14c2 <Keypad_u8GetKey+0x21e>
	{
	case 0b11100000: return '#';
    14ac:	93 e2       	ldi	r25, 0x23	; 35
    14ae:	98 87       	std	Y+8, r25	; 0x08
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b11010000: return 0;
    14b2:	18 86       	std	Y+8, r1	; 0x08
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b10110000: return '=';
    14b6:	2d e3       	ldi	r18, 0x3D	; 61
    14b8:	28 87       	std	Y+8, r18	; 0x08
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <Keypad_u8GetKey+0x222>
	case 0b01110000: return '/';
    14bc:	3f e2       	ldi	r19, 0x2F	; 47
    14be:	38 87       	std	Y+8, r19	; 0x08
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Keypad_u8GetKey+0x222>
	}
	return KEYPAD_u8NO_KEY;
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	88 87       	std	Y+8, r24	; 0x08
    14c6:	88 85       	ldd	r24, Y+8	; 0x08
}
    14c8:	2a 96       	adiw	r28, 0x0a	; 10
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <Keypad_u8GetConstKey>:
u8 Keypad_u8GetConstKey(void)
{u8 i=0;
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	60 97       	sbiw	r28, 0x10	; 16
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	18 8a       	std	Y+16, r1	; 0x10
    14f0:	8b c0       	rjmp	.+278    	; 0x1608 <Keypad_u8GetConstKey+0x12e>
u8 key ;
while(i==0)
{
while(key!=KEYPAD_u8NO_KEY )
	{
		key =Keypad_u8GetKey();
    14f2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <Keypad_u8GetKey>
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
u8 Keypad_u8GetConstKey(void)
{u8 i=0;
u8 key ;
while(i==0)
{
while(key!=KEYPAD_u8NO_KEY )
    14f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	d1 f7       	brne	.-12     	; 0x14f2 <Keypad_u8GetConstKey+0x18>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a8 e4       	ldi	r26, 0x48	; 72
    1504:	b2 e4       	ldi	r27, 0x42	; 66
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a ef       	ldi	r20, 0xFA	; 250
    151c:	54 e4       	ldi	r21, 0x44	; 68
    151e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <Keypad_u8GetConstKey+0x76>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <Keypad_u8GetConstKey+0xf4>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <Keypad_u8GetConstKey+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <Keypad_u8GetConstKey+0xd6>
    1592:	88 ec       	ldi	r24, 0xC8	; 200
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <Keypad_u8GetConstKey+0xc4>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <Keypad_u8GetConstKey+0xb8>
    15b8:	18 c0       	rjmp	.+48     	; 0x15ea <Keypad_u8GetConstKey+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <Keypad_u8GetConstKey+0x100>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <Keypad_u8GetConstKey+0x110>
	{
		key =Keypad_u8GetKey();
	}
_delay_ms(50);
while(key !=KEYPAD_u8NO_KEY )
	{key =Keypad_u8GetKey();
    15e4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <Keypad_u8GetKey>
    15e8:	8f 87       	std	Y+15, r24	; 0x0f
while(key!=KEYPAD_u8NO_KEY )
	{
		key =Keypad_u8GetKey();
	}
_delay_ms(50);
while(key !=KEYPAD_u8NO_KEY )
    15ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ec:	8f 3f       	cpi	r24, 0xFF	; 255
    15ee:	d1 f7       	brne	.-12     	; 0x15e4 <Keypad_u8GetConstKey+0x10a>
	{key =Keypad_u8GetKey();
	}
key =Keypad_u8GetKey();
    15f0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <Keypad_u8GetKey>
    15f4:	8f 87       	std	Y+15, r24	; 0x0f
if((key>=0 && key<=9) || (key=='#') )
    15f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f8:	8a 30       	cpi	r24, 0x0A	; 10
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <Keypad_u8GetConstKey+0x128>
    15fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fe:	83 32       	cpi	r24, 0x23	; 35
    1600:	19 f4       	brne	.+6      	; 0x1608 <Keypad_u8GetConstKey+0x12e>
		{
			i++;
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	88 8b       	std	Y+16, r24	; 0x10
	return KEYPAD_u8NO_KEY;
}
u8 Keypad_u8GetConstKey(void)
{u8 i=0;
u8 key ;
while(i==0)
    1608:	88 89       	ldd	r24, Y+16	; 0x10
    160a:	88 23       	and	r24, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <Keypad_u8GetConstKey+0x136>
    160e:	74 cf       	rjmp	.-280    	; 0x14f8 <Keypad_u8GetConstKey+0x1e>
if((key>=0 && key<=9) || (key=='#') )
		{
			i++;
		}
}
return key ;
    1610:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1612:	60 96       	adiw	r28, 0x10	; 16
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <Lcd_vidSendCommand>:
#include <util/delay.h>
#include"Dio_int.h"
#include"Lcd_cfg.h"
#include"Lcd_int.h"
void Lcd_vidSendCommand(u8 Cmd)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	2f 97       	sbiw	r28, 0x0f	; 15
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	8f 87       	std	Y+15, r24	; 0x0f
	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8LOW); //RS
    163a:	85 e0       	ldi	r24, 0x05	; 5
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW); //RW
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	//PORTD=Cmd;
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Cmd,0));
    164a:	8f 85       	ldd	r24, Y+15	; 0x0f
    164c:	98 2f       	mov	r25, r24
    164e:	91 70       	andi	r25, 0x01	; 1
    1650:	88 e1       	ldi	r24, 0x18	; 24
    1652:	69 2f       	mov	r22, r25
    1654:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Cmd,1));
    1658:	8f 85       	ldd	r24, Y+15	; 0x0f
    165a:	86 95       	lsr	r24
    165c:	98 2f       	mov	r25, r24
    165e:	91 70       	andi	r25, 0x01	; 1
    1660:	89 e1       	ldi	r24, 0x19	; 25
    1662:	69 2f       	mov	r22, r25
    1664:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Cmd,2));
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	86 95       	lsr	r24
    166c:	86 95       	lsr	r24
    166e:	98 2f       	mov	r25, r24
    1670:	91 70       	andi	r25, 0x01	; 1
    1672:	8a e1       	ldi	r24, 0x1A	; 26
    1674:	69 2f       	mov	r22, r25
    1676:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Cmd,3));
    167a:	8f 85       	ldd	r24, Y+15	; 0x0f
    167c:	86 95       	lsr	r24
    167e:	86 95       	lsr	r24
    1680:	86 95       	lsr	r24
    1682:	98 2f       	mov	r25, r24
    1684:	91 70       	andi	r25, 0x01	; 1
    1686:	8b e1       	ldi	r24, 0x1B	; 27
    1688:	69 2f       	mov	r22, r25
    168a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Cmd,4));
    168e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1690:	82 95       	swap	r24
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	98 2f       	mov	r25, r24
    1696:	91 70       	andi	r25, 0x01	; 1
    1698:	8c e1       	ldi	r24, 0x1C	; 28
    169a:	69 2f       	mov	r22, r25
    169c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Cmd,5));
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	82 95       	swap	r24
    16a4:	86 95       	lsr	r24
    16a6:	87 70       	andi	r24, 0x07	; 7
    16a8:	98 2f       	mov	r25, r24
    16aa:	91 70       	andi	r25, 0x01	; 1
    16ac:	8d e1       	ldi	r24, 0x1D	; 29
    16ae:	69 2f       	mov	r22, r25
    16b0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Cmd,6));
    16b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b6:	82 95       	swap	r24
    16b8:	86 95       	lsr	r24
    16ba:	86 95       	lsr	r24
    16bc:	83 70       	andi	r24, 0x03	; 3
    16be:	98 2f       	mov	r25, r24
    16c0:	91 70       	andi	r25, 0x01	; 1
    16c2:	8e e1       	ldi	r24, 0x1E	; 30
    16c4:	69 2f       	mov	r22, r25
    16c6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Cmd,7));
    16ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    16cc:	98 2f       	mov	r25, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	99 27       	eor	r25, r25
    16d2:	99 1f       	adc	r25, r25
    16d4:	8f e1       	ldi	r24, 0x1F	; 31
    16d6:	69 2f       	mov	r22, r25
    16d8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);; //EN
    16dc:	87 e0       	ldi	r24, 0x07	; 7
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e4       	ldi	r27, 0x40	; 64
    16ec:	8b 87       	std	Y+11, r24	; 0x0b
    16ee:	9c 87       	std	Y+12, r25	; 0x0c
    16f0:	ad 87       	std	Y+13, r26	; 0x0d
    16f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a ef       	ldi	r20, 0xFA	; 250
    1702:	54 e4       	ldi	r21, 0x44	; 68
    1704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8f 83       	std	Y+7, r24	; 0x07
    170e:	98 87       	std	Y+8, r25	; 0x08
    1710:	a9 87       	std	Y+9, r26	; 0x09
    1712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <Lcd_vidSendCommand+0x112>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <Lcd_vidSendCommand+0x190>
	else if (__tmp > 65535)
    1736:	6f 81       	ldd	r22, Y+7	; 0x07
    1738:	78 85       	ldd	r23, Y+8	; 0x08
    173a:	89 85       	ldd	r24, Y+9	; 0x09
    173c:	9a 85       	ldd	r25, Y+10	; 0x0a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <Lcd_vidSendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1750:	7c 85       	ldd	r23, Y+12	; 0x0c
    1752:	8d 85       	ldd	r24, Y+13	; 0x0d
    1754:	9e 85       	ldd	r25, Y+14	; 0x0e
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <Lcd_vidSendCommand+0x172>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <Lcd_vidSendCommand+0x160>
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <Lcd_vidSendCommand+0x154>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <Lcd_vidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6f 81       	ldd	r22, Y+7	; 0x07
    17a2:	78 85       	ldd	r23, Y+8	; 0x08
    17a4:	89 85       	ldd	r24, Y+9	; 0x09
    17a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <Lcd_vidSendCommand+0x19c>
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW) ; //EN
    17c8:	87 e0       	ldi	r24, 0x07	; 7
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
}
    17d0:	2f 96       	adiw	r28, 0x0f	; 15
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <Lcd_vidWriteChar>:

void Lcd_vidWriteChar(u8 Char)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	2f 97       	sbiw	r28, 0x0f	; 15
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	8f 87       	std	Y+15, r24	; 0x0f

	Dio_vidSetPinVal(LCD_u8RS_PIN,DIO_u8HIGH); //RS
    17f8:	85 e0       	ldi	r24, 0x05	; 5
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8RW_PIN,DIO_u8LOW); //RW
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	//PORTD=Char;
	Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Char,0));
    1808:	8f 85       	ldd	r24, Y+15	; 0x0f
    180a:	98 2f       	mov	r25, r24
    180c:	91 70       	andi	r25, 0x01	; 1
    180e:	88 e1       	ldi	r24, 0x18	; 24
    1810:	69 2f       	mov	r22, r25
    1812:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Char,1));
    1816:	8f 85       	ldd	r24, Y+15	; 0x0f
    1818:	86 95       	lsr	r24
    181a:	98 2f       	mov	r25, r24
    181c:	91 70       	andi	r25, 0x01	; 1
    181e:	89 e1       	ldi	r24, 0x19	; 25
    1820:	69 2f       	mov	r22, r25
    1822:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Char,2));
    1826:	8f 85       	ldd	r24, Y+15	; 0x0f
    1828:	86 95       	lsr	r24
    182a:	86 95       	lsr	r24
    182c:	98 2f       	mov	r25, r24
    182e:	91 70       	andi	r25, 0x01	; 1
    1830:	8a e1       	ldi	r24, 0x1A	; 26
    1832:	69 2f       	mov	r22, r25
    1834:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Char,3));
    1838:	8f 85       	ldd	r24, Y+15	; 0x0f
    183a:	86 95       	lsr	r24
    183c:	86 95       	lsr	r24
    183e:	86 95       	lsr	r24
    1840:	98 2f       	mov	r25, r24
    1842:	91 70       	andi	r25, 0x01	; 1
    1844:	8b e1       	ldi	r24, 0x1B	; 27
    1846:	69 2f       	mov	r22, r25
    1848:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Char,4));
    184c:	8f 85       	ldd	r24, Y+15	; 0x0f
    184e:	82 95       	swap	r24
    1850:	8f 70       	andi	r24, 0x0F	; 15
    1852:	98 2f       	mov	r25, r24
    1854:	91 70       	andi	r25, 0x01	; 1
    1856:	8c e1       	ldi	r24, 0x1C	; 28
    1858:	69 2f       	mov	r22, r25
    185a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Char,5));
    185e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1860:	82 95       	swap	r24
    1862:	86 95       	lsr	r24
    1864:	87 70       	andi	r24, 0x07	; 7
    1866:	98 2f       	mov	r25, r24
    1868:	91 70       	andi	r25, 0x01	; 1
    186a:	8d e1       	ldi	r24, 0x1D	; 29
    186c:	69 2f       	mov	r22, r25
    186e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Char,6));
    1872:	8f 85       	ldd	r24, Y+15	; 0x0f
    1874:	82 95       	swap	r24
    1876:	86 95       	lsr	r24
    1878:	86 95       	lsr	r24
    187a:	83 70       	andi	r24, 0x03	; 3
    187c:	98 2f       	mov	r25, r24
    187e:	91 70       	andi	r25, 0x01	; 1
    1880:	8e e1       	ldi	r24, 0x1E	; 30
    1882:	69 2f       	mov	r22, r25
    1884:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
	Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Char,7));
    1888:	8f 85       	ldd	r24, Y+15	; 0x0f
    188a:	98 2f       	mov	r25, r24
    188c:	99 1f       	adc	r25, r25
    188e:	99 27       	eor	r25, r25
    1890:	99 1f       	adc	r25, r25
    1892:	8f e1       	ldi	r24, 0x1F	; 31
    1894:	69 2f       	mov	r22, r25
    1896:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>

	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);; //EN
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e4       	ldi	r27, 0x40	; 64
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	9c 87       	std	Y+12, r25	; 0x0c
    18ae:	ad 87       	std	Y+13, r26	; 0x0d
    18b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8f 83       	std	Y+7, r24	; 0x07
    18cc:	98 87       	std	Y+8, r25	; 0x08
    18ce:	a9 87       	std	Y+9, r26	; 0x09
    18d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <Lcd_vidWriteChar+0x112>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <Lcd_vidWriteChar+0x190>
	else if (__tmp > 65535)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <Lcd_vidWriteChar+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <Lcd_vidWriteChar+0x172>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <Lcd_vidWriteChar+0x160>
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <Lcd_vidWriteChar+0x154>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <Lcd_vidWriteChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <Lcd_vidWriteChar+0x19c>
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW) ; //EN
    1986:	87 e0       	ldi	r24, 0x07	; 7
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
}
    198e:	2f 96       	adiw	r28, 0x0f	; 15
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <Lcd_vidInit>:
void Lcd_vidInit(void)
{
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	aa 97       	sbiw	r28, 0x2a	; 42
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
	//DDRC=0xff; kol dol out put
	//DDRD=0xff; kol dol out put m3 any 3ayz 3 bs
	Dio_vidSetPinDir(LCD_u8RS_PIN,DIO_u8OUTPUT);
    19b4:	85 e0       	ldi	r24, 0x05	; 5
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8RW_PIN,DIO_u8OUTPUT);
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8EN_PIN,DIO_u8OUTPUT);
    19c4:	87 e0       	ldi	r24, 0x07	; 7
    19c6:	61 e0       	ldi	r22, 0x01	; 1
    19c8:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>

	Dio_vidSetPinDir(LCD_u8D0_PIN,DIO_u8OUTPUT);
    19cc:	88 e1       	ldi	r24, 0x18	; 24
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D1_PIN,DIO_u8OUTPUT);
    19d4:	89 e1       	ldi	r24, 0x19	; 25
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D2_PIN,DIO_u8OUTPUT);
    19dc:	8a e1       	ldi	r24, 0x1A	; 26
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D3_PIN,DIO_u8OUTPUT);
    19e4:	8b e1       	ldi	r24, 0x1B	; 27
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D4_PIN,DIO_u8OUTPUT);
    19ec:	8c e1       	ldi	r24, 0x1C	; 28
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D5_PIN,DIO_u8OUTPUT);
    19f4:	8d e1       	ldi	r24, 0x1D	; 29
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D6_PIN,DIO_u8OUTPUT);
    19fc:	8e e1       	ldi	r24, 0x1E	; 30
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(LCD_u8D7_PIN,DIO_u8OUTPUT);
    1a04:	8f e1       	ldi	r24, 0x1F	; 31
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>

	Lcd_vidSendCommand(LCD_u8CMD_8_BIT_2x16_5x7);
    1a0c:	88 e3       	ldi	r24, 0x38	; 56
    1a0e:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e0       	ldi	r26, 0x00	; 0
    1a18:	b0 e4       	ldi	r27, 0x40	; 64
    1a1a:	8f a3       	std	Y+39, r24	; 0x27
    1a1c:	98 a7       	std	Y+40, r25	; 0x28
    1a1e:	a9 a7       	std	Y+41, r26	; 0x29
    1a20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	6f a1       	ldd	r22, Y+39	; 0x27
    1a24:	78 a5       	ldd	r23, Y+40	; 0x28
    1a26:	89 a5       	ldd	r24, Y+41	; 0x29
    1a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a ef       	ldi	r20, 0xFA	; 250
    1a30:	54 e4       	ldi	r21, 0x44	; 68
    1a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8b a3       	std	Y+35, r24	; 0x23
    1a3c:	9c a3       	std	Y+36, r25	; 0x24
    1a3e:	ad a3       	std	Y+37, r26	; 0x25
    1a40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a42:	6b a1       	ldd	r22, Y+35	; 0x23
    1a44:	7c a1       	ldd	r23, Y+36	; 0x24
    1a46:	8d a1       	ldd	r24, Y+37	; 0x25
    1a48:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <Lcd_vidInit+0xc4>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <Lcd_vidInit+0x142>
	else if (__tmp > 65535)
    1a64:	6b a1       	ldd	r22, Y+35	; 0x23
    1a66:	7c a1       	ldd	r23, Y+36	; 0x24
    1a68:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <Lcd_vidInit+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a80:	89 a5       	ldd	r24, Y+41	; 0x29
    1a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9a a3       	std	Y+34, r25	; 0x22
    1aa2:	89 a3       	std	Y+33, r24	; 0x21
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <Lcd_vidInit+0x124>
    1aa6:	88 ec       	ldi	r24, 0xC8	; 200
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
    1aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <Lcd_vidInit+0x112>
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <Lcd_vidInit+0x106>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <Lcd_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9a a3       	std	Y+34, r25	; 0x22
    1ae0:	89 a3       	std	Y+33, r24	; 0x21
    1ae2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <Lcd_vidInit+0x14e>
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2); //for give the command take it time before another command
	Lcd_vidSendCommand(LCD_u8CMD_DISP_ON_CURS_OFF);
    1af6:	8c e0       	ldi	r24, 0x0C	; 12
    1af8:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e4       	ldi	r27, 0x40	; 64
    1b04:	89 8f       	std	Y+25, r24	; 0x19
    1b06:	9a 8f       	std	Y+26, r25	; 0x1a
    1b08:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8d 8b       	std	Y+21, r24	; 0x15
    1b26:	9e 8b       	std	Y+22, r25	; 0x16
    1b28:	af 8b       	std	Y+23, r26	; 0x17
    1b2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <Lcd_vidInit+0x1ae>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <Lcd_vidInit+0x22c>
	else if (__tmp > 65535)
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <Lcd_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9c 8b       	std	Y+20, r25	; 0x14
    1b8c:	8b 8b       	std	Y+19, r24	; 0x13
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <Lcd_vidInit+0x20e>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9a 8b       	std	Y+18, r25	; 0x12
    1b96:	89 8b       	std	Y+17, r24	; 0x11
    1b98:	89 89       	ldd	r24, Y+17	; 0x11
    1b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <Lcd_vidInit+0x1fc>
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <Lcd_vidInit+0x1f0>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <Lcd_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	98 8b       	std	Y+16, r25	; 0x10
    1bd2:	8f 87       	std	Y+15, r24	; 0x0f
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	98 89       	ldd	r25, Y+16	; 0x10
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <Lcd_vidInit+0x238>
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	Lcd_vidSendCommand(LCD_u8CMD_CLR_DISPLAY);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e4       	ldi	r27, 0x40	; 64
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	ad 87       	std	Y+13, r26	; 0x0d
    1bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a ef       	ldi	r20, 0xFA	; 250
    1c04:	54 e4       	ldi	r21, 0x44	; 68
    1c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	98 87       	std	Y+8, r25	; 0x08
    1c12:	a9 87       	std	Y+9, r26	; 0x09
    1c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <Lcd_vidInit+0x298>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <Lcd_vidInit+0x316>
	else if (__tmp > 65535)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	4c f5       	brge	.+82     	; 0x1ca2 <Lcd_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <Lcd_vidInit+0x2f8>
    1c7a:	88 ec       	ldi	r24, 0xC8	; 200
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <Lcd_vidInit+0x2e6>
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	69 f7       	brne	.-38     	; 0x1c7a <Lcd_vidInit+0x2da>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <Lcd_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <Lcd_vidInit+0x322>
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1cca:	aa 96       	adiw	r28, 0x2a	; 42
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Stepper_vidRight>:
#include"Dio_int.h"
#include"Stepper_int.h"
#include"Stepper_cfg.h"

void Stepper_vidRight(u16 angle)
{
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	c4 56       	subi	r28, 0x64	; 100
    1cee:	d0 40       	sbci	r29, 0x00	; 0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ed 59       	subi	r30, 0x9D	; 157
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
	u16 j;
	j=0;
    1d04:	fe 01       	movw	r30, r28
    1d06:	ef 59       	subi	r30, 0x9F	; 159
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	11 82       	std	Z+1, r1	; 0x01
    1d0c:	10 82       	st	Z, r1
    1d0e:	cd c3       	rjmp	.+1946   	; 0x24aa <Stepper_vidRight+0x7ce>
	while(j<(1.42 *angle))
	{
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8HIGH);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    1d30:	fe 01       	movw	r30, r28
    1d32:	e3 5a       	subi	r30, 0xA3	; 163
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e8       	ldi	r25, 0x80	; 128
    1d3a:	a2 ea       	ldi	r26, 0xA2	; 162
    1d3c:	b4 e4       	ldi	r27, 0x44	; 68
    1d3e:	80 83       	st	Z, r24
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	a2 83       	std	Z+2, r26	; 0x02
    1d44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d46:	8e 01       	movw	r16, r28
    1d48:	07 5a       	subi	r16, 0xA7	; 167
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e3 5a       	subi	r30, 0xA3	; 163
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	2b ea       	ldi	r18, 0xAB	; 171
    1d5c:	3a ea       	ldi	r19, 0xAA	; 170
    1d5e:	4a e2       	ldi	r20, 0x2A	; 42
    1d60:	50 e4       	ldi	r21, 0x40	; 64
    1d62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	80 83       	st	Z, r24
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	a2 83       	std	Z+2, r26	; 0x02
    1d72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 5a       	subi	r30, 0xA7	; 167
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	34 f4       	brge	.+12     	; 0x1d9e <Stepper_vidRight+0xc2>
		__ticks = 1;
    1d92:	fe 01       	movw	r30, r28
    1d94:	e8 5a       	subi	r30, 0xA8	; 168
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	80 83       	st	Z, r24
    1d9c:	e0 c0       	rjmp	.+448    	; 0x1f5e <Stepper_vidRight+0x282>
	else if (__tmp > 255)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e7 5a       	subi	r30, 0xA7	; 167
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	53 e4       	ldi	r21, 0x43	; 67
    1db4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <Stepper_vidRight+0xe2>
    1dbc:	c0 c0       	rjmp	.+384    	; 0x1f3e <Stepper_vidRight+0x262>
	{
		_delay_ms(__us / 1000.0);
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e3 5a       	subi	r30, 0xA3	; 163
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ec 5a       	subi	r30, 0xAC	; 172
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 83       	st	Z, r24
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	a2 83       	std	Z+2, r26	; 0x02
    1de8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	8e 01       	movw	r16, r28
    1dec:	00 5b       	subi	r16, 0xB0	; 176
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	ec 5a       	subi	r30, 0xAC	; 172
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e0 5b       	subi	r30, 0xB0	; 176
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	44 f4       	brge	.+16     	; 0x1e46 <Stepper_vidRight+0x16a>
		__ticks = 1;
    1e36:	fe 01       	movw	r30, r28
    1e38:	e2 5b       	subi	r30, 0xB2	; 178
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	64 c0       	rjmp	.+200    	; 0x1f0e <Stepper_vidRight+0x232>
	else if (__tmp > 65535)
    1e46:	fe 01       	movw	r30, r28
    1e48:	e0 5b       	subi	r30, 0xB0	; 176
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	0c f0       	brlt	.+2      	; 0x1e66 <Stepper_vidRight+0x18a>
    1e64:	43 c0       	rjmp	.+134    	; 0x1eec <Stepper_vidRight+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	fe 01       	movw	r30, r28
    1e68:	ec 5a       	subi	r30, 0xAC	; 172
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	60 81       	ld	r22, Z
    1e6e:	71 81       	ldd	r23, Z+1	; 0x01
    1e70:	82 81       	ldd	r24, Z+2	; 0x02
    1e72:	93 81       	ldd	r25, Z+3	; 0x03
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8e 01       	movw	r16, r28
    1e86:	02 5b       	subi	r16, 0xB2	; 178
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24
    1e9c:	1f c0       	rjmp	.+62     	; 0x1edc <Stepper_vidRight+0x200>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e4 5b       	subi	r30, 0xB4	; 180
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	91 83       	std	Z+1, r25	; 0x01
    1eaa:	80 83       	st	Z, r24
    1eac:	fe 01       	movw	r30, r28
    1eae:	e4 5b       	subi	r30, 0xB4	; 180
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <Stepper_vidRight+0x1da>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e4 5b       	subi	r30, 0xB4	; 180
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	de 01       	movw	r26, r28
    1ec6:	a2 5b       	subi	r26, 0xB2	; 178
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e2 5b       	subi	r30, 0xB2	; 178
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	9c 93       	st	X, r25
    1eda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1edc:	fe 01       	movw	r30, r28
    1ede:	e2 5b       	subi	r30, 0xB2	; 178
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	d1 f6       	brne	.-76     	; 0x1e9e <Stepper_vidRight+0x1c2>
    1eea:	4b c0       	rjmp	.+150    	; 0x1f82 <Stepper_vidRight+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	8e 01       	movw	r16, r28
    1eee:	02 5b       	subi	r16, 0xB2	; 178
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e0 5b       	subi	r30, 0xB0	; 176
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	de 01       	movw	r26, r28
    1f10:	a6 5b       	subi	r26, 0xB6	; 182
    1f12:	bf 4f       	sbci	r27, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	e2 5b       	subi	r30, 0xB2	; 178
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	9c 93       	st	X, r25
    1f22:	8e 93       	st	-X, r24
    1f24:	fe 01       	movw	r30, r28
    1f26:	e6 5b       	subi	r30, 0xB6	; 182
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <Stepper_vidRight+0x252>
    1f32:	fe 01       	movw	r30, r28
    1f34:	e6 5b       	subi	r30, 0xB6	; 182
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
    1f3c:	22 c0       	rjmp	.+68     	; 0x1f82 <Stepper_vidRight+0x2a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f3e:	8e 01       	movw	r16, r28
    1f40:	08 5a       	subi	r16, 0xA8	; 168
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	e7 5a       	subi	r30, 0xA7	; 167
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	80 83       	st	Z, r24
    1f5e:	de 01       	movw	r26, r28
    1f60:	a7 5b       	subi	r26, 0xB7	; 183
    1f62:	bf 4f       	sbci	r27, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e8 5a       	subi	r30, 0xA8	; 168
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e7 5b       	subi	r30, 0xB7	; 183
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	8a 95       	dec	r24
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <Stepper_vidRight+0x29a>
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e7 5b       	subi	r30, 0xB7	; 183
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 83       	st	Z, r24
		//awl step b3dha n3ml delay 3la ma ywsl ltnay step
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8HIGH);
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	eb 5b       	subi	r30, 0xBB	; 187
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e8       	ldi	r25, 0x80	; 128
    1fac:	a2 ea       	ldi	r26, 0xA2	; 162
    1fae:	b4 e4       	ldi	r27, 0x44	; 68
    1fb0:	80 83       	st	Z, r24
    1fb2:	91 83       	std	Z+1, r25	; 0x01
    1fb4:	a2 83       	std	Z+2, r26	; 0x02
    1fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb8:	8e 01       	movw	r16, r28
    1fba:	0f 5b       	subi	r16, 0xBF	; 191
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	eb 5b       	subi	r30, 0xBB	; 187
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	2b ea       	ldi	r18, 0xAB	; 171
    1fce:	3a ea       	ldi	r19, 0xAA	; 170
    1fd0:	4a e2       	ldi	r20, 0x2A	; 42
    1fd2:	50 e4       	ldi	r21, 0x40	; 64
    1fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 83       	st	Z, r24
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	a2 83       	std	Z+2, r26	; 0x02
    1fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ef 5b       	subi	r30, 0xBF	; 191
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	34 f4       	brge	.+12     	; 0x2010 <Stepper_vidRight+0x334>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	fe 01       	movw	r30, r28
    2008:	e0 5c       	subi	r30, 0xC0	; 192
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 83       	st	Z, r24
    200e:	9d c0       	rjmp	.+314    	; 0x214a <Stepper_vidRight+0x46e>
	else if (__tmp > 255)
    2010:	fe 01       	movw	r30, r28
    2012:	ef 5b       	subi	r30, 0xBF	; 191
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	53 e4       	ldi	r21, 0x43	; 67
    2026:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	0c f0       	brlt	.+2      	; 0x2030 <Stepper_vidRight+0x354>
    202e:	7e c0       	rjmp	.+252    	; 0x212c <Stepper_vidRight+0x450>
	{
		_delay_ms(__us / 1000.0);
    2030:	fe 01       	movw	r30, r28
    2032:	eb 5b       	subi	r30, 0xBB	; 187
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8c af       	std	Y+60, r24	; 0x3c
    2050:	9d af       	std	Y+61, r25	; 0x3d
    2052:	ae af       	std	Y+62, r26	; 0x3e
    2054:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6c ad       	ldd	r22, Y+60	; 0x3c
    2058:	7d ad       	ldd	r23, Y+61	; 0x3d
    205a:	8e ad       	ldd	r24, Y+62	; 0x3e
    205c:	9f ad       	ldd	r25, Y+63	; 0x3f
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	88 af       	std	Y+56, r24	; 0x38
    2070:	99 af       	std	Y+57, r25	; 0x39
    2072:	aa af       	std	Y+58, r26	; 0x3a
    2074:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2076:	68 ad       	ldd	r22, Y+56	; 0x38
    2078:	79 ad       	ldd	r23, Y+57	; 0x39
    207a:	8a ad       	ldd	r24, Y+58	; 0x3a
    207c:	9b ad       	ldd	r25, Y+59	; 0x3b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <Stepper_vidRight+0x3bc>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9f ab       	std	Y+55, r25	; 0x37
    2094:	8e ab       	std	Y+54, r24	; 0x36
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <Stepper_vidRight+0x43a>
	else if (__tmp > 65535)
    2098:	68 ad       	ldd	r22, Y+56	; 0x38
    209a:	79 ad       	ldd	r23, Y+57	; 0x39
    209c:	8a ad       	ldd	r24, Y+58	; 0x3a
    209e:	9b ad       	ldd	r25, Y+59	; 0x3b
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <Stepper_vidRight+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    20b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    20b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    20b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9f ab       	std	Y+55, r25	; 0x37
    20d6:	8e ab       	std	Y+54, r24	; 0x36
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <Stepper_vidRight+0x41c>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9d ab       	std	Y+53, r25	; 0x35
    20e0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e2:	8c a9       	ldd	r24, Y+52	; 0x34
    20e4:	9d a9       	ldd	r25, Y+53	; 0x35
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <Stepper_vidRight+0x40a>
    20ea:	9d ab       	std	Y+53, r25	; 0x35
    20ec:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8e a9       	ldd	r24, Y+54	; 0x36
    20f0:	9f a9       	ldd	r25, Y+55	; 0x37
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9f ab       	std	Y+55, r25	; 0x37
    20f6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8e a9       	ldd	r24, Y+54	; 0x36
    20fa:	9f a9       	ldd	r25, Y+55	; 0x37
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <Stepper_vidRight+0x3fe>
    2100:	2d c0       	rjmp	.+90     	; 0x215c <Stepper_vidRight+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	68 ad       	ldd	r22, Y+56	; 0x38
    2104:	79 ad       	ldd	r23, Y+57	; 0x39
    2106:	8a ad       	ldd	r24, Y+58	; 0x3a
    2108:	9b ad       	ldd	r25, Y+59	; 0x3b
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9f ab       	std	Y+55, r25	; 0x37
    2114:	8e ab       	std	Y+54, r24	; 0x36
    2116:	8e a9       	ldd	r24, Y+54	; 0x36
    2118:	9f a9       	ldd	r25, Y+55	; 0x37
    211a:	9b ab       	std	Y+51, r25	; 0x33
    211c:	8a ab       	std	Y+50, r24	; 0x32
    211e:	8a a9       	ldd	r24, Y+50	; 0x32
    2120:	9b a9       	ldd	r25, Y+51	; 0x33
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <Stepper_vidRight+0x446>
    2126:	9b ab       	std	Y+51, r25	; 0x33
    2128:	8a ab       	std	Y+50, r24	; 0x32
    212a:	18 c0       	rjmp	.+48     	; 0x215c <Stepper_vidRight+0x480>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    212c:	fe 01       	movw	r30, r28
    212e:	ef 5b       	subi	r30, 0xBF	; 191
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	fe 01       	movw	r30, r28
    2144:	e0 5c       	subi	r30, 0xC0	; 192
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 83       	st	Z, r24
    214a:	fe 01       	movw	r30, r28
    214c:	e0 5c       	subi	r30, 0xC0	; 192
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2154:	89 a9       	ldd	r24, Y+49	; 0x31
    2156:	8a 95       	dec	r24
    2158:	f1 f7       	brne	.-4      	; 0x2156 <Stepper_vidRight+0x47a>
    215a:	89 ab       	std	Y+49, r24	; 0x31
		//tani step
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8HIGH);
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	61 e0       	ldi	r22, 0x01	; 1
    2170:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e8       	ldi	r25, 0x80	; 128
    2180:	a2 ea       	ldi	r26, 0xA2	; 162
    2182:	b4 e4       	ldi	r27, 0x44	; 68
    2184:	8d a7       	std	Y+45, r24	; 0x2d
    2186:	9e a7       	std	Y+46, r25	; 0x2e
    2188:	af a7       	std	Y+47, r26	; 0x2f
    218a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    218c:	6d a5       	ldd	r22, Y+45	; 0x2d
    218e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2190:	8f a5       	ldd	r24, Y+47	; 0x2f
    2192:	98 a9       	ldd	r25, Y+48	; 0x30
    2194:	2b ea       	ldi	r18, 0xAB	; 171
    2196:	3a ea       	ldi	r19, 0xAA	; 170
    2198:	4a e2       	ldi	r20, 0x2A	; 42
    219a:	50 e4       	ldi	r21, 0x40	; 64
    219c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 a7       	std	Y+41, r24	; 0x29
    21a6:	9a a7       	std	Y+42, r25	; 0x2a
    21a8:	ab a7       	std	Y+43, r26	; 0x2b
    21aa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21ac:	69 a5       	ldd	r22, Y+41	; 0x29
    21ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    21b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	1c f4       	brge	.+6      	; 0x21ca <Stepper_vidRight+0x4ee>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	88 a7       	std	Y+40, r24	; 0x28
    21c8:	91 c0       	rjmp	.+290    	; 0x22ec <Stepper_vidRight+0x610>
	else if (__tmp > 255)
    21ca:	69 a5       	ldd	r22, Y+41	; 0x29
    21cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <Stepper_vidRight+0x508>
    21e2:	7b c0       	rjmp	.+246    	; 0x22da <Stepper_vidRight+0x5fe>
	{
		_delay_ms(__us / 1000.0);
    21e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    21e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8c a3       	std	Y+36, r24	; 0x24
    21fe:	9d a3       	std	Y+37, r25	; 0x25
    2200:	ae a3       	std	Y+38, r26	; 0x26
    2202:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6c a1       	ldd	r22, Y+36	; 0x24
    2206:	7d a1       	ldd	r23, Y+37	; 0x25
    2208:	8e a1       	ldd	r24, Y+38	; 0x26
    220a:	9f a1       	ldd	r25, Y+39	; 0x27
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	88 a3       	std	Y+32, r24	; 0x20
    221e:	99 a3       	std	Y+33, r25	; 0x21
    2220:	aa a3       	std	Y+34, r26	; 0x22
    2222:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2224:	68 a1       	ldd	r22, Y+32	; 0x20
    2226:	79 a1       	ldd	r23, Y+33	; 0x21
    2228:	8a a1       	ldd	r24, Y+34	; 0x22
    222a:	9b a1       	ldd	r25, Y+35	; 0x23
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <Stepper_vidRight+0x56a>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9f 8f       	std	Y+31, r25	; 0x1f
    2242:	8e 8f       	std	Y+30, r24	; 0x1e
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <Stepper_vidRight+0x5e8>
	else if (__tmp > 65535)
    2246:	68 a1       	ldd	r22, Y+32	; 0x20
    2248:	79 a1       	ldd	r23, Y+33	; 0x21
    224a:	8a a1       	ldd	r24, Y+34	; 0x22
    224c:	9b a1       	ldd	r25, Y+35	; 0x23
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <Stepper_vidRight+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6c a1       	ldd	r22, Y+36	; 0x24
    2260:	7d a1       	ldd	r23, Y+37	; 0x25
    2262:	8e a1       	ldd	r24, Y+38	; 0x26
    2264:	9f a1       	ldd	r25, Y+39	; 0x27
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9f 8f       	std	Y+31, r25	; 0x1f
    2284:	8e 8f       	std	Y+30, r24	; 0x1e
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <Stepper_vidRight+0x5ca>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9d 8f       	std	Y+29, r25	; 0x1d
    228e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2290:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2292:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <Stepper_vidRight+0x5b8>
    2298:	9d 8f       	std	Y+29, r25	; 0x1d
    229a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    229e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9f 8f       	std	Y+31, r25	; 0x1f
    22a4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <Stepper_vidRight+0x5ac>
    22ae:	24 c0       	rjmp	.+72     	; 0x22f8 <Stepper_vidRight+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	68 a1       	ldd	r22, Y+32	; 0x20
    22b2:	79 a1       	ldd	r23, Y+33	; 0x21
    22b4:	8a a1       	ldd	r24, Y+34	; 0x22
    22b6:	9b a1       	ldd	r25, Y+35	; 0x23
    22b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9f 8f       	std	Y+31, r25	; 0x1f
    22c2:	8e 8f       	std	Y+30, r24	; 0x1e
    22c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22c8:	9b 8f       	std	Y+27, r25	; 0x1b
    22ca:	8a 8f       	std	Y+26, r24	; 0x1a
    22cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <Stepper_vidRight+0x5f4>
    22d4:	9b 8f       	std	Y+27, r25	; 0x1b
    22d6:	8a 8f       	std	Y+26, r24	; 0x1a
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <Stepper_vidRight+0x61c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22da:	69 a5       	ldd	r22, Y+41	; 0x29
    22dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    22de:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	88 a7       	std	Y+40, r24	; 0x28
    22ec:	88 a5       	ldd	r24, Y+40	; 0x28
    22ee:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f0:	89 8d       	ldd	r24, Y+25	; 0x19
    22f2:	8a 95       	dec	r24
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <Stepper_vidRight+0x616>
    22f6:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8HIGH);
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e8       	ldi	r25, 0x80	; 128
    231c:	a2 ea       	ldi	r26, 0xA2	; 162
    231e:	b4 e4       	ldi	r27, 0x44	; 68
    2320:	8d 8b       	std	Y+21, r24	; 0x15
    2322:	9e 8b       	std	Y+22, r25	; 0x16
    2324:	af 8b       	std	Y+23, r26	; 0x17
    2326:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2328:	6d 89       	ldd	r22, Y+21	; 0x15
    232a:	7e 89       	ldd	r23, Y+22	; 0x16
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	2b ea       	ldi	r18, 0xAB	; 171
    2332:	3a ea       	ldi	r19, 0xAA	; 170
    2334:	4a e2       	ldi	r20, 0x2A	; 42
    2336:	50 e4       	ldi	r21, 0x40	; 64
    2338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	89 8b       	std	Y+17, r24	; 0x11
    2342:	9a 8b       	std	Y+18, r25	; 0x12
    2344:	ab 8b       	std	Y+19, r26	; 0x13
    2346:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2348:	69 89       	ldd	r22, Y+17	; 0x11
    234a:	7a 89       	ldd	r23, Y+18	; 0x12
    234c:	8b 89       	ldd	r24, Y+19	; 0x13
    234e:	9c 89       	ldd	r25, Y+20	; 0x14
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	1c f4       	brge	.+6      	; 0x2366 <Stepper_vidRight+0x68a>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	88 8b       	std	Y+16, r24	; 0x10
    2364:	91 c0       	rjmp	.+290    	; 0x2488 <Stepper_vidRight+0x7ac>
	else if (__tmp > 255)
    2366:	69 89       	ldd	r22, Y+17	; 0x11
    2368:	7a 89       	ldd	r23, Y+18	; 0x12
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	0c f0       	brlt	.+2      	; 0x2380 <Stepper_vidRight+0x6a4>
    237e:	7b c0       	rjmp	.+246    	; 0x2476 <Stepper_vidRight+0x79a>
	{
		_delay_ms(__us / 1000.0);
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	8c 87       	std	Y+12, r24	; 0x0c
    239a:	9d 87       	std	Y+13, r25	; 0x0d
    239c:	ae 87       	std	Y+14, r26	; 0x0e
    239e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	4a ef       	ldi	r20, 0xFA	; 250
    23ae:	54 e4       	ldi	r21, 0x44	; 68
    23b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	88 87       	std	Y+8, r24	; 0x08
    23ba:	99 87       	std	Y+9, r25	; 0x09
    23bc:	aa 87       	std	Y+10, r26	; 0x0a
    23be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23c0:	68 85       	ldd	r22, Y+8	; 0x08
    23c2:	79 85       	ldd	r23, Y+9	; 0x09
    23c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <Stepper_vidRight+0x706>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9f 83       	std	Y+7, r25	; 0x07
    23de:	8e 83       	std	Y+6, r24	; 0x06
    23e0:	3f c0       	rjmp	.+126    	; 0x2460 <Stepper_vidRight+0x784>
	else if (__tmp > 65535)
    23e2:	68 85       	ldd	r22, Y+8	; 0x08
    23e4:	79 85       	ldd	r23, Y+9	; 0x09
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	3f ef       	ldi	r19, 0xFF	; 255
    23ee:	4f e7       	ldi	r20, 0x7F	; 127
    23f0:	57 e4       	ldi	r21, 0x47	; 71
    23f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f6:	18 16       	cp	r1, r24
    23f8:	4c f5       	brge	.+82     	; 0x244c <Stepper_vidRight+0x770>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    23fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    23fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2400:	9f 85       	ldd	r25, Y+15	; 0x0f
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9f 83       	std	Y+7, r25	; 0x07
    2420:	8e 83       	std	Y+6, r24	; 0x06
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <Stepper_vidRight+0x766>
    2424:	88 ec       	ldi	r24, 0xC8	; 200
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9d 83       	std	Y+5, r25	; 0x05
    242a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    242c:	8c 81       	ldd	r24, Y+4	; 0x04
    242e:	9d 81       	ldd	r25, Y+5	; 0x05
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <Stepper_vidRight+0x754>
    2434:	9d 83       	std	Y+5, r25	; 0x05
    2436:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	9f 83       	std	Y+7, r25	; 0x07
    2440:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	69 f7       	brne	.-38     	; 0x2424 <Stepper_vidRight+0x748>
    244a:	24 c0       	rjmp	.+72     	; 0x2494 <Stepper_vidRight+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	68 85       	ldd	r22, Y+8	; 0x08
    244e:	79 85       	ldd	r23, Y+9	; 0x09
    2450:	8a 85       	ldd	r24, Y+10	; 0x0a
    2452:	9b 85       	ldd	r25, Y+11	; 0x0b
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9f 83       	std	Y+7, r25	; 0x07
    245e:	8e 83       	std	Y+6, r24	; 0x06
    2460:	8e 81       	ldd	r24, Y+6	; 0x06
    2462:	9f 81       	ldd	r25, Y+7	; 0x07
    2464:	9b 83       	std	Y+3, r25	; 0x03
    2466:	8a 83       	std	Y+2, r24	; 0x02
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <Stepper_vidRight+0x790>
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <Stepper_vidRight+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2476:	69 89       	ldd	r22, Y+17	; 0x11
    2478:	7a 89       	ldd	r23, Y+18	; 0x12
    247a:	8b 89       	ldd	r24, Y+19	; 0x13
    247c:	9c 89       	ldd	r25, Y+20	; 0x14
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	88 8b       	std	Y+16, r24	; 0x10
    2488:	88 89       	ldd	r24, Y+16	; 0x10
    248a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	8a 95       	dec	r24
    2490:	f1 f7       	brne	.-4      	; 0x248e <Stepper_vidRight+0x7b2>
    2492:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1300);
		j++;
    2494:	de 01       	movw	r26, r28
    2496:	af 59       	subi	r26, 0x9F	; 159
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	ef 59       	subi	r30, 0x9F	; 159
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	8d 93       	st	X+, r24
    24a8:	9c 93       	st	X, r25

void Stepper_vidRight(u16 angle)
{
	u16 j;
	j=0;
	while(j<(1.42 *angle))
    24aa:	fe 01       	movw	r30, r28
    24ac:	ef 59       	subi	r30, 0x9F	; 159
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	cc 01       	movw	r24, r24
    24b6:	a0 e0       	ldi	r26, 0x00	; 0
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    24c2:	7b 01       	movw	r14, r22
    24c4:	8c 01       	movw	r16, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	ed 59       	subi	r30, 0x9D	; 157
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	cc 01       	movw	r24, r24
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	2f e8       	ldi	r18, 0x8F	; 143
    24e8:	32 ec       	ldi	r19, 0xC2	; 194
    24ea:	45 eb       	ldi	r20, 0xB5	; 181
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 01       	movw	r18, r24
    24f8:	ad 01       	movw	r20, r26
    24fa:	c8 01       	movw	r24, r16
    24fc:	b7 01       	movw	r22, r14
    24fe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	0c f4       	brge	.+2      	; 0x2508 <Stepper_vidRight+0x82c>
    2506:	04 cc       	rjmp	.-2040   	; 0x1d10 <Stepper_vidRight+0x34>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8HIGH);
		_delay_us(1300);
		j++;
	}

}
    2508:	cc 59       	subi	r28, 0x9C	; 156
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <Stepper_vidLeft>:
void Stepper_vidLeft(u16 angle)
{
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	c4 56       	subi	r28, 0x64	; 100
    2536:	d0 40       	sbci	r29, 0x00	; 0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	fe 01       	movw	r30, r28
    2544:	ed 59       	subi	r30, 0x9D	; 157
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
	u16 j;
	j=0;
    254c:	fe 01       	movw	r30, r28
    254e:	ef 59       	subi	r30, 0x9F	; 159
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	11 82       	std	Z+1, r1	; 0x01
    2554:	10 82       	st	Z, r1
    2556:	cd c3       	rjmp	.+1946   	; 0x2cf2 <Stepper_vidLeft+0x7ce>
	while(j<(1.42 *angle))
	{


		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8HIGH);
    2570:	83 e0       	ldi	r24, 0x03	; 3
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    2578:	fe 01       	movw	r30, r28
    257a:	e3 5a       	subi	r30, 0xA3	; 163
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e8       	ldi	r25, 0x80	; 128
    2582:	a2 ea       	ldi	r26, 0xA2	; 162
    2584:	b4 e4       	ldi	r27, 0x44	; 68
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    258e:	8e 01       	movw	r16, r28
    2590:	07 5a       	subi	r16, 0xA7	; 167
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e3 5a       	subi	r30, 0xA3	; 163
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	2b ea       	ldi	r18, 0xAB	; 171
    25a4:	3a ea       	ldi	r19, 0xAA	; 170
    25a6:	4a e2       	ldi	r20, 0x2A	; 42
    25a8:	50 e4       	ldi	r21, 0x40	; 64
    25aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	60 81       	ld	r22, Z
    25c4:	71 81       	ldd	r23, Z+1	; 0x01
    25c6:	82 81       	ldd	r24, Z+2	; 0x02
    25c8:	93 81       	ldd	r25, Z+3	; 0x03
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	34 f4       	brge	.+12     	; 0x25e6 <Stepper_vidLeft+0xc2>
		__ticks = 1;
    25da:	fe 01       	movw	r30, r28
    25dc:	e8 5a       	subi	r30, 0xA8	; 168
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	80 83       	st	Z, r24
    25e4:	e0 c0       	rjmp	.+448    	; 0x27a6 <Stepper_vidLeft+0x282>
	else if (__tmp > 255)
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 5a       	subi	r30, 0xA7	; 167
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4f e7       	ldi	r20, 0x7F	; 127
    25fa:	53 e4       	ldi	r21, 0x43	; 67
    25fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2600:	18 16       	cp	r1, r24
    2602:	0c f0       	brlt	.+2      	; 0x2606 <Stepper_vidLeft+0xe2>
    2604:	c0 c0       	rjmp	.+384    	; 0x2786 <Stepper_vidLeft+0x262>
	{
		_delay_ms(__us / 1000.0);
    2606:	fe 01       	movw	r30, r28
    2608:	e3 5a       	subi	r30, 0xA3	; 163
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	4a e7       	ldi	r20, 0x7A	; 122
    261a:	54 e4       	ldi	r21, 0x44	; 68
    261c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	fe 01       	movw	r30, r28
    2626:	ec 5a       	subi	r30, 0xAC	; 172
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 83       	st	Z, r24
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	a2 83       	std	Z+2, r26	; 0x02
    2630:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	8e 01       	movw	r16, r28
    2634:	00 5b       	subi	r16, 0xB0	; 176
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	ec 5a       	subi	r30, 0xAC	; 172
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	4a ef       	ldi	r20, 0xFA	; 250
    264c:	54 e4       	ldi	r21, 0x44	; 68
    264e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	f8 01       	movw	r30, r16
    2658:	80 83       	st	Z, r24
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	a2 83       	std	Z+2, r26	; 0x02
    265e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2660:	fe 01       	movw	r30, r28
    2662:	e0 5b       	subi	r30, 0xB0	; 176
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	44 f4       	brge	.+16     	; 0x268e <Stepper_vidLeft+0x16a>
		__ticks = 1;
    267e:	fe 01       	movw	r30, r28
    2680:	e2 5b       	subi	r30, 0xB2	; 178
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    268c:	64 c0       	rjmp	.+200    	; 0x2756 <Stepper_vidLeft+0x232>
	else if (__tmp > 65535)
    268e:	fe 01       	movw	r30, r28
    2690:	e0 5b       	subi	r30, 0xB0	; 176
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	0c f0       	brlt	.+2      	; 0x26ae <Stepper_vidLeft+0x18a>
    26ac:	43 c0       	rjmp	.+134    	; 0x2734 <Stepper_vidLeft+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	fe 01       	movw	r30, r28
    26b0:	ec 5a       	subi	r30, 0xAC	; 172
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	8e 01       	movw	r16, r28
    26ce:	02 5b       	subi	r16, 0xB2	; 178
    26d0:	1f 4f       	sbci	r17, 0xFF	; 255
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
    26e4:	1f c0       	rjmp	.+62     	; 0x2724 <Stepper_vidLeft+0x200>
    26e6:	fe 01       	movw	r30, r28
    26e8:	e4 5b       	subi	r30, 0xB4	; 180
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f4:	fe 01       	movw	r30, r28
    26f6:	e4 5b       	subi	r30, 0xB4	; 180
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <Stepper_vidLeft+0x1da>
    2702:	fe 01       	movw	r30, r28
    2704:	e4 5b       	subi	r30, 0xB4	; 180
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	de 01       	movw	r26, r28
    270e:	a2 5b       	subi	r26, 0xB2	; 178
    2710:	bf 4f       	sbci	r27, 0xFF	; 255
    2712:	fe 01       	movw	r30, r28
    2714:	e2 5b       	subi	r30, 0xB2	; 178
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	9c 93       	st	X, r25
    2722:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	fe 01       	movw	r30, r28
    2726:	e2 5b       	subi	r30, 0xB2	; 178
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	d1 f6       	brne	.-76     	; 0x26e6 <Stepper_vidLeft+0x1c2>
    2732:	4b c0       	rjmp	.+150    	; 0x27ca <Stepper_vidLeft+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	8e 01       	movw	r16, r28
    2736:	02 5b       	subi	r16, 0xB2	; 178
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e0 5b       	subi	r30, 0xB0	; 176
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	de 01       	movw	r26, r28
    2758:	a6 5b       	subi	r26, 0xB6	; 182
    275a:	bf 4f       	sbci	r27, 0xFF	; 255
    275c:	fe 01       	movw	r30, r28
    275e:	e2 5b       	subi	r30, 0xB2	; 178
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	91 81       	ldd	r25, Z+1	; 0x01
    2766:	11 96       	adiw	r26, 0x01	; 1
    2768:	9c 93       	st	X, r25
    276a:	8e 93       	st	-X, r24
    276c:	fe 01       	movw	r30, r28
    276e:	e6 5b       	subi	r30, 0xB6	; 182
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <Stepper_vidLeft+0x252>
    277a:	fe 01       	movw	r30, r28
    277c:	e6 5b       	subi	r30, 0xB6	; 182
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	91 83       	std	Z+1, r25	; 0x01
    2782:	80 83       	st	Z, r24
    2784:	22 c0       	rjmp	.+68     	; 0x27ca <Stepper_vidLeft+0x2a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2786:	8e 01       	movw	r16, r28
    2788:	08 5a       	subi	r16, 0xA8	; 168
    278a:	1f 4f       	sbci	r17, 0xFF	; 255
    278c:	fe 01       	movw	r30, r28
    278e:	e7 5a       	subi	r30, 0xA7	; 167
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	f8 01       	movw	r30, r16
    27a4:	80 83       	st	Z, r24
    27a6:	de 01       	movw	r26, r28
    27a8:	a7 5b       	subi	r26, 0xB7	; 183
    27aa:	bf 4f       	sbci	r27, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	e8 5a       	subi	r30, 0xA8	; 168
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 5b       	subi	r30, 0xB7	; 183
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	8a 95       	dec	r24
    27c0:	f1 f7       	brne	.-4      	; 0x27be <Stepper_vidLeft+0x29a>
    27c2:	fe 01       	movw	r30, r28
    27c4:	e7 5b       	subi	r30, 0xB7	; 183
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 83       	st	Z, r24
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8HIGH);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    27e2:	83 e0       	ldi	r24, 0x03	; 3
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    27ea:	fe 01       	movw	r30, r28
    27ec:	eb 5b       	subi	r30, 0xBB	; 187
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e8       	ldi	r25, 0x80	; 128
    27f4:	a2 ea       	ldi	r26, 0xA2	; 162
    27f6:	b4 e4       	ldi	r27, 0x44	; 68
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2800:	8e 01       	movw	r16, r28
    2802:	0f 5b       	subi	r16, 0xBF	; 191
    2804:	1f 4f       	sbci	r17, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	eb 5b       	subi	r30, 0xBB	; 187
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	2b ea       	ldi	r18, 0xAB	; 171
    2816:	3a ea       	ldi	r19, 0xAA	; 170
    2818:	4a e2       	ldi	r20, 0x2A	; 42
    281a:	50 e4       	ldi	r21, 0x40	; 64
    281c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	80 83       	st	Z, r24
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	a2 83       	std	Z+2, r26	; 0x02
    282c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282e:	fe 01       	movw	r30, r28
    2830:	ef 5b       	subi	r30, 0xBF	; 191
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	34 f4       	brge	.+12     	; 0x2858 <Stepper_vidLeft+0x334>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	fe 01       	movw	r30, r28
    2850:	e0 5c       	subi	r30, 0xC0	; 192
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 83       	st	Z, r24
    2856:	9d c0       	rjmp	.+314    	; 0x2992 <Stepper_vidLeft+0x46e>
	else if (__tmp > 255)
    2858:	fe 01       	movw	r30, r28
    285a:	ef 5b       	subi	r30, 0xBF	; 191
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	60 81       	ld	r22, Z
    2860:	71 81       	ldd	r23, Z+1	; 0x01
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	93 81       	ldd	r25, Z+3	; 0x03
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	53 e4       	ldi	r21, 0x43	; 67
    286e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	0c f0       	brlt	.+2      	; 0x2878 <Stepper_vidLeft+0x354>
    2876:	7e c0       	rjmp	.+252    	; 0x2974 <Stepper_vidLeft+0x450>
	{
		_delay_ms(__us / 1000.0);
    2878:	fe 01       	movw	r30, r28
    287a:	eb 5b       	subi	r30, 0xBB	; 187
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a e7       	ldi	r20, 0x7A	; 122
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8c af       	std	Y+60, r24	; 0x3c
    2898:	9d af       	std	Y+61, r25	; 0x3d
    289a:	ae af       	std	Y+62, r26	; 0x3e
    289c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6c ad       	ldd	r22, Y+60	; 0x3c
    28a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    28a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    28a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a ef       	ldi	r20, 0xFA	; 250
    28ac:	54 e4       	ldi	r21, 0x44	; 68
    28ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	88 af       	std	Y+56, r24	; 0x38
    28b8:	99 af       	std	Y+57, r25	; 0x39
    28ba:	aa af       	std	Y+58, r26	; 0x3a
    28bc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    28be:	68 ad       	ldd	r22, Y+56	; 0x38
    28c0:	79 ad       	ldd	r23, Y+57	; 0x39
    28c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    28c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <Stepper_vidLeft+0x3bc>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	9f ab       	std	Y+55, r25	; 0x37
    28dc:	8e ab       	std	Y+54, r24	; 0x36
    28de:	3f c0       	rjmp	.+126    	; 0x295e <Stepper_vidLeft+0x43a>
	else if (__tmp > 65535)
    28e0:	68 ad       	ldd	r22, Y+56	; 0x38
    28e2:	79 ad       	ldd	r23, Y+57	; 0x39
    28e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    28e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <Stepper_vidLeft+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    28fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    28fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    28fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9f ab       	std	Y+55, r25	; 0x37
    291e:	8e ab       	std	Y+54, r24	; 0x36
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <Stepper_vidLeft+0x41c>
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9d ab       	std	Y+53, r25	; 0x35
    2928:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    292a:	8c a9       	ldd	r24, Y+52	; 0x34
    292c:	9d a9       	ldd	r25, Y+53	; 0x35
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <Stepper_vidLeft+0x40a>
    2932:	9d ab       	std	Y+53, r25	; 0x35
    2934:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8e a9       	ldd	r24, Y+54	; 0x36
    2938:	9f a9       	ldd	r25, Y+55	; 0x37
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9f ab       	std	Y+55, r25	; 0x37
    293e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8e a9       	ldd	r24, Y+54	; 0x36
    2942:	9f a9       	ldd	r25, Y+55	; 0x37
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <Stepper_vidLeft+0x3fe>
    2948:	2d c0       	rjmp	.+90     	; 0x29a4 <Stepper_vidLeft+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	68 ad       	ldd	r22, Y+56	; 0x38
    294c:	79 ad       	ldd	r23, Y+57	; 0x39
    294e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2950:	9b ad       	ldd	r25, Y+59	; 0x3b
    2952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	9f ab       	std	Y+55, r25	; 0x37
    295c:	8e ab       	std	Y+54, r24	; 0x36
    295e:	8e a9       	ldd	r24, Y+54	; 0x36
    2960:	9f a9       	ldd	r25, Y+55	; 0x37
    2962:	9b ab       	std	Y+51, r25	; 0x33
    2964:	8a ab       	std	Y+50, r24	; 0x32
    2966:	8a a9       	ldd	r24, Y+50	; 0x32
    2968:	9b a9       	ldd	r25, Y+51	; 0x33
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <Stepper_vidLeft+0x446>
    296e:	9b ab       	std	Y+51, r25	; 0x33
    2970:	8a ab       	std	Y+50, r24	; 0x32
    2972:	18 c0       	rjmp	.+48     	; 0x29a4 <Stepper_vidLeft+0x480>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2974:	fe 01       	movw	r30, r28
    2976:	ef 5b       	subi	r30, 0xBF	; 191
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	fe 01       	movw	r30, r28
    298c:	e0 5c       	subi	r30, 0xC0	; 192
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 83       	st	Z, r24
    2992:	fe 01       	movw	r30, r28
    2994:	e0 5c       	subi	r30, 0xC0	; 192
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	80 81       	ld	r24, Z
    299a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    299c:	89 a9       	ldd	r24, Y+49	; 0x31
    299e:	8a 95       	dec	r24
    29a0:	f1 f7       	brne	.-4      	; 0x299e <Stepper_vidLeft+0x47a>
    29a2:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8HIGH);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e8       	ldi	r25, 0x80	; 128
    29c8:	a2 ea       	ldi	r26, 0xA2	; 162
    29ca:	b4 e4       	ldi	r27, 0x44	; 68
    29cc:	8d a7       	std	Y+45, r24	; 0x2d
    29ce:	9e a7       	std	Y+46, r25	; 0x2e
    29d0:	af a7       	std	Y+47, r26	; 0x2f
    29d2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    29d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    29d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29da:	98 a9       	ldd	r25, Y+48	; 0x30
    29dc:	2b ea       	ldi	r18, 0xAB	; 171
    29de:	3a ea       	ldi	r19, 0xAA	; 170
    29e0:	4a e2       	ldi	r20, 0x2A	; 42
    29e2:	50 e4       	ldi	r21, 0x40	; 64
    29e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	89 a7       	std	Y+41, r24	; 0x29
    29ee:	9a a7       	std	Y+42, r25	; 0x2a
    29f0:	ab a7       	std	Y+43, r26	; 0x2b
    29f2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29f4:	69 a5       	ldd	r22, Y+41	; 0x29
    29f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    29f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	1c f4       	brge	.+6      	; 0x2a12 <Stepper_vidLeft+0x4ee>
		__ticks = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	88 a7       	std	Y+40, r24	; 0x28
    2a10:	91 c0       	rjmp	.+290    	; 0x2b34 <Stepper_vidLeft+0x610>
	else if (__tmp > 255)
    2a12:	69 a5       	ldd	r22, Y+41	; 0x29
    2a14:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	53 e4       	ldi	r21, 0x43	; 67
    2a22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	0c f0       	brlt	.+2      	; 0x2a2c <Stepper_vidLeft+0x508>
    2a2a:	7b c0       	rjmp	.+246    	; 0x2b22 <Stepper_vidLeft+0x5fe>
	{
		_delay_ms(__us / 1000.0);
    2a2c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a2e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a32:	98 a9       	ldd	r25, Y+48	; 0x30
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a e7       	ldi	r20, 0x7A	; 122
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8c a3       	std	Y+36, r24	; 0x24
    2a46:	9d a3       	std	Y+37, r25	; 0x25
    2a48:	ae a3       	std	Y+38, r26	; 0x26
    2a4a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	6c a1       	ldd	r22, Y+36	; 0x24
    2a4e:	7d a1       	ldd	r23, Y+37	; 0x25
    2a50:	8e a1       	ldd	r24, Y+38	; 0x26
    2a52:	9f a1       	ldd	r25, Y+39	; 0x27
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4a ef       	ldi	r20, 0xFA	; 250
    2a5a:	54 e4       	ldi	r21, 0x44	; 68
    2a5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	88 a3       	std	Y+32, r24	; 0x20
    2a66:	99 a3       	std	Y+33, r25	; 0x21
    2a68:	aa a3       	std	Y+34, r26	; 0x22
    2a6a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a6c:	68 a1       	ldd	r22, Y+32	; 0x20
    2a6e:	79 a1       	ldd	r23, Y+33	; 0x21
    2a70:	8a a1       	ldd	r24, Y+34	; 0x22
    2a72:	9b a1       	ldd	r25, Y+35	; 0x23
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <Stepper_vidLeft+0x56a>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9f 8f       	std	Y+31, r25	; 0x1f
    2a8a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <Stepper_vidLeft+0x5e8>
	else if (__tmp > 65535)
    2a8e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a90:	79 a1       	ldd	r23, Y+33	; 0x21
    2a92:	8a a1       	ldd	r24, Y+34	; 0x22
    2a94:	9b a1       	ldd	r25, Y+35	; 0x23
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	4c f5       	brge	.+82     	; 0x2af8 <Stepper_vidLeft+0x5d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	6c a1       	ldd	r22, Y+36	; 0x24
    2aa8:	7d a1       	ldd	r23, Y+37	; 0x25
    2aaa:	8e a1       	ldd	r24, Y+38	; 0x26
    2aac:	9f a1       	ldd	r25, Y+39	; 0x27
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9f 8f       	std	Y+31, r25	; 0x1f
    2acc:	8e 8f       	std	Y+30, r24	; 0x1e
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <Stepper_vidLeft+0x5ca>
    2ad0:	88 ec       	ldi	r24, 0xC8	; 200
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9d 8f       	std	Y+29, r25	; 0x1d
    2ad6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ad8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ada:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <Stepper_vidLeft+0x5b8>
    2ae0:	9d 8f       	std	Y+29, r25	; 0x1d
    2ae2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ae6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	9f 8f       	std	Y+31, r25	; 0x1f
    2aec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2af0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <Stepper_vidLeft+0x5ac>
    2af6:	24 c0       	rjmp	.+72     	; 0x2b40 <Stepper_vidLeft+0x61c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	68 a1       	ldd	r22, Y+32	; 0x20
    2afa:	79 a1       	ldd	r23, Y+33	; 0x21
    2afc:	8a a1       	ldd	r24, Y+34	; 0x22
    2afe:	9b a1       	ldd	r25, Y+35	; 0x23
    2b00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9f 8f       	std	Y+31, r25	; 0x1f
    2b0a:	8e 8f       	std	Y+30, r24	; 0x1e
    2b0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b10:	9b 8f       	std	Y+27, r25	; 0x1b
    2b12:	8a 8f       	std	Y+26, r24	; 0x1a
    2b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <Stepper_vidLeft+0x5f4>
    2b1c:	9b 8f       	std	Y+27, r25	; 0x1b
    2b1e:	8a 8f       	std	Y+26, r24	; 0x1a
    2b20:	0f c0       	rjmp	.+30     	; 0x2b40 <Stepper_vidLeft+0x61c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b22:	69 a5       	ldd	r22, Y+41	; 0x29
    2b24:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	88 a7       	std	Y+40, r24	; 0x28
    2b34:	88 a5       	ldd	r24, Y+40	; 0x28
    2b36:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b38:	89 8d       	ldd	r24, Y+25	; 0x19
    2b3a:	8a 95       	dec	r24
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <Stepper_vidLeft+0x616>
    2b3e:	89 8f       	std	Y+25, r24	; 0x19
		//tani step
		_delay_us(1300);
		Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8HIGH);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    2b58:	83 e0       	ldi	r24, 0x03	; 3
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e8       	ldi	r25, 0x80	; 128
    2b64:	a2 ea       	ldi	r26, 0xA2	; 162
    2b66:	b4 e4       	ldi	r27, 0x44	; 68
    2b68:	8d 8b       	std	Y+21, r24	; 0x15
    2b6a:	9e 8b       	std	Y+22, r25	; 0x16
    2b6c:	af 8b       	std	Y+23, r26	; 0x17
    2b6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	2b ea       	ldi	r18, 0xAB	; 171
    2b7a:	3a ea       	ldi	r19, 0xAA	; 170
    2b7c:	4a e2       	ldi	r20, 0x2A	; 42
    2b7e:	50 e4       	ldi	r21, 0x40	; 64
    2b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	89 8b       	std	Y+17, r24	; 0x11
    2b8a:	9a 8b       	std	Y+18, r25	; 0x12
    2b8c:	ab 8b       	std	Y+19, r26	; 0x13
    2b8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b90:	69 89       	ldd	r22, Y+17	; 0x11
    2b92:	7a 89       	ldd	r23, Y+18	; 0x12
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	1c f4       	brge	.+6      	; 0x2bae <Stepper_vidLeft+0x68a>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	88 8b       	std	Y+16, r24	; 0x10
    2bac:	91 c0       	rjmp	.+290    	; 0x2cd0 <Stepper_vidLeft+0x7ac>
	else if (__tmp > 255)
    2bae:	69 89       	ldd	r22, Y+17	; 0x11
    2bb0:	7a 89       	ldd	r23, Y+18	; 0x12
    2bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	53 e4       	ldi	r21, 0x43	; 67
    2bbe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	0c f0       	brlt	.+2      	; 0x2bc8 <Stepper_vidLeft+0x6a4>
    2bc6:	7b c0       	rjmp	.+246    	; 0x2cbe <Stepper_vidLeft+0x79a>
	{
		_delay_ms(__us / 1000.0);
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	8c 87       	std	Y+12, r24	; 0x0c
    2be2:	9d 87       	std	Y+13, r25	; 0x0d
    2be4:	ae 87       	std	Y+14, r26	; 0x0e
    2be6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bea:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bec:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bee:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a ef       	ldi	r20, 0xFA	; 250
    2bf6:	54 e4       	ldi	r21, 0x44	; 68
    2bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	88 87       	std	Y+8, r24	; 0x08
    2c02:	99 87       	std	Y+9, r25	; 0x09
    2c04:	aa 87       	std	Y+10, r26	; 0x0a
    2c06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c08:	68 85       	ldd	r22, Y+8	; 0x08
    2c0a:	79 85       	ldd	r23, Y+9	; 0x09
    2c0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <Stepper_vidLeft+0x706>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9f 83       	std	Y+7, r25	; 0x07
    2c26:	8e 83       	std	Y+6, r24	; 0x06
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <Stepper_vidLeft+0x784>
	else if (__tmp > 65535)
    2c2a:	68 85       	ldd	r22, Y+8	; 0x08
    2c2c:	79 85       	ldd	r23, Y+9	; 0x09
    2c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <Stepper_vidLeft+0x770>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c44:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9f 83       	std	Y+7, r25	; 0x07
    2c68:	8e 83       	std	Y+6, r24	; 0x06
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <Stepper_vidLeft+0x766>
    2c6c:	88 ec       	ldi	r24, 0xC8	; 200
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9d 83       	std	Y+5, r25	; 0x05
    2c72:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <Stepper_vidLeft+0x754>
    2c7c:	9d 83       	std	Y+5, r25	; 0x05
    2c7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8e 81       	ldd	r24, Y+6	; 0x06
    2c82:	9f 81       	ldd	r25, Y+7	; 0x07
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9f 83       	std	Y+7, r25	; 0x07
    2c88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <Stepper_vidLeft+0x748>
    2c92:	24 c0       	rjmp	.+72     	; 0x2cdc <Stepper_vidLeft+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	68 85       	ldd	r22, Y+8	; 0x08
    2c96:	79 85       	ldd	r23, Y+9	; 0x09
    2c98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9f 83       	std	Y+7, r25	; 0x07
    2ca6:	8e 83       	std	Y+6, r24	; 0x06
    2ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    2caa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cac:	9b 83       	std	Y+3, r25	; 0x03
    2cae:	8a 83       	std	Y+2, r24	; 0x02
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <Stepper_vidLeft+0x790>
    2cb8:	9b 83       	std	Y+3, r25	; 0x03
    2cba:	8a 83       	std	Y+2, r24	; 0x02
    2cbc:	0f c0       	rjmp	.+30     	; 0x2cdc <Stepper_vidLeft+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cbe:	69 89       	ldd	r22, Y+17	; 0x11
    2cc0:	7a 89       	ldd	r23, Y+18	; 0x12
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	88 8b       	std	Y+16, r24	; 0x10
    2cd0:	88 89       	ldd	r24, Y+16	; 0x10
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	8a 95       	dec	r24
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <Stepper_vidLeft+0x7b2>
    2cda:	89 83       	std	Y+1, r24	; 0x01
		//awl step b3dha n3ml delay 3la ma ywsl ltnay step
		_delay_us(1300);

		j++;
    2cdc:	de 01       	movw	r26, r28
    2cde:	af 59       	subi	r26, 0x9F	; 159
    2ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 59       	subi	r30, 0x9F	; 159
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	8d 93       	st	X+, r24
    2cf0:	9c 93       	st	X, r25
}
void Stepper_vidLeft(u16 angle)
{
	u16 j;
	j=0;
	while(j<(1.42 *angle))
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ef 59       	subi	r30, 0x9F	; 159
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	cc 01       	movw	r24, r24
    2cfe:	a0 e0       	ldi	r26, 0x00	; 0
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	bc 01       	movw	r22, r24
    2d04:	cd 01       	movw	r24, r26
    2d06:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2d0a:	7b 01       	movw	r14, r22
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 59       	subi	r30, 0x9D	; 157
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	cc 01       	movw	r24, r24
    2d1a:	a0 e0       	ldi	r26, 0x00	; 0
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	2f e8       	ldi	r18, 0x8F	; 143
    2d30:	32 ec       	ldi	r19, 0xC2	; 194
    2d32:	45 eb       	ldi	r20, 0xB5	; 181
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9c 01       	movw	r18, r24
    2d40:	ad 01       	movw	r20, r26
    2d42:	c8 01       	movw	r24, r16
    2d44:	b7 01       	movw	r22, r14
    2d46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d4a:	88 23       	and	r24, r24
    2d4c:	0c f4       	brge	.+2      	; 0x2d50 <Stepper_vidLeft+0x82c>
    2d4e:	04 cc       	rjmp	.-2040   	; 0x2558 <Stepper_vidLeft+0x34>
		_delay_us(1300);

		j++;
	}

}
    2d50:	cc 59       	subi	r28, 0x9C	; 156
    2d52:	df 4f       	sbci	r29, 0xFF	; 255
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	08 95       	ret

00002d6c <Stepper_vidTurnOnLeft>:
void Stepper_vidTurnOnLeft(void)
{
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	c0 56       	subi	r28, 0x60	; 96
    2d7a:	d0 40       	sbci	r29, 0x00	; 0
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
	Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8HIGH);
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	61 e0       	ldi	r22, 0x01	; 1
    2da2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    2da6:	fe 01       	movw	r30, r28
    2da8:	e3 5a       	subi	r30, 0xA3	; 163
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e8       	ldi	r25, 0x80	; 128
    2db0:	a2 ea       	ldi	r26, 0xA2	; 162
    2db2:	b4 e4       	ldi	r27, 0x44	; 68
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	07 5a       	subi	r16, 0xA7	; 167
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e3 5a       	subi	r30, 0xA3	; 163
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	2b ea       	ldi	r18, 0xAB	; 171
    2dd2:	3a ea       	ldi	r19, 0xAA	; 170
    2dd4:	4a e2       	ldi	r20, 0x2A	; 42
    2dd6:	50 e4       	ldi	r21, 0x40	; 64
    2dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	f8 01       	movw	r30, r16
    2de2:	80 83       	st	Z, r24
    2de4:	91 83       	std	Z+1, r25	; 0x01
    2de6:	a2 83       	std	Z+2, r26	; 0x02
    2de8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dea:	fe 01       	movw	r30, r28
    2dec:	e7 5a       	subi	r30, 0xA7	; 167
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	60 81       	ld	r22, Z
    2df2:	71 81       	ldd	r23, Z+1	; 0x01
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e8       	ldi	r20, 0x80	; 128
    2dfe:	5f e3       	ldi	r21, 0x3F	; 63
    2e00:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e04:	88 23       	and	r24, r24
    2e06:	34 f4       	brge	.+12     	; 0x2e14 <Stepper_vidTurnOnLeft+0xa8>
		__ticks = 1;
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e8 5a       	subi	r30, 0xA8	; 168
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	80 83       	st	Z, r24
    2e12:	e0 c0       	rjmp	.+448    	; 0x2fd4 <Stepper_vidTurnOnLeft+0x268>
	else if (__tmp > 255)
    2e14:	fe 01       	movw	r30, r28
    2e16:	e7 5a       	subi	r30, 0xA7	; 167
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	82 81       	ldd	r24, Z+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	53 e4       	ldi	r21, 0x43	; 67
    2e2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	0c f0       	brlt	.+2      	; 0x2e34 <Stepper_vidTurnOnLeft+0xc8>
    2e32:	c0 c0       	rjmp	.+384    	; 0x2fb4 <Stepper_vidTurnOnLeft+0x248>
	{
		_delay_ms(__us / 1000.0);
    2e34:	fe 01       	movw	r30, r28
    2e36:	e3 5a       	subi	r30, 0xA3	; 163
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a e7       	ldi	r20, 0x7A	; 122
    2e48:	54 e4       	ldi	r21, 0x44	; 68
    2e4a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	fe 01       	movw	r30, r28
    2e54:	ec 5a       	subi	r30, 0xAC	; 172
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 83       	st	Z, r24
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	a2 83       	std	Z+2, r26	; 0x02
    2e5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	8e 01       	movw	r16, r28
    2e62:	00 5b       	subi	r16, 0xB0	; 176
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	fe 01       	movw	r30, r28
    2e68:	ec 5a       	subi	r30, 0xAC	; 172
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a ef       	ldi	r20, 0xFA	; 250
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	f8 01       	movw	r30, r16
    2e86:	80 83       	st	Z, r24
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	a2 83       	std	Z+2, r26	; 0x02
    2e8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e0 5b       	subi	r30, 0xB0	; 176
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	44 f4       	brge	.+16     	; 0x2ebc <Stepper_vidTurnOnLeft+0x150>
		__ticks = 1;
    2eac:	fe 01       	movw	r30, r28
    2eae:	e2 5b       	subi	r30, 0xB2	; 178
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	64 c0       	rjmp	.+200    	; 0x2f84 <Stepper_vidTurnOnLeft+0x218>
	else if (__tmp > 65535)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e0 5b       	subi	r30, 0xB0	; 176
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	3f ef       	ldi	r19, 0xFF	; 255
    2ece:	4f e7       	ldi	r20, 0x7F	; 127
    2ed0:	57 e4       	ldi	r21, 0x47	; 71
    2ed2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ed6:	18 16       	cp	r1, r24
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <Stepper_vidTurnOnLeft+0x170>
    2eda:	43 c0       	rjmp	.+134    	; 0x2f62 <Stepper_vidTurnOnLeft+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2edc:	fe 01       	movw	r30, r28
    2ede:	ec 5a       	subi	r30, 0xAC	; 172
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e2       	ldi	r20, 0x20	; 32
    2ef0:	51 e4       	ldi	r21, 0x41	; 65
    2ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8e 01       	movw	r16, r28
    2efc:	02 5b       	subi	r16, 0xB2	; 178
    2efe:	1f 4f       	sbci	r17, 0xFF	; 255
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	f8 01       	movw	r30, r16
    2f0e:	91 83       	std	Z+1, r25	; 0x01
    2f10:	80 83       	st	Z, r24
    2f12:	1f c0       	rjmp	.+62     	; 0x2f52 <Stepper_vidTurnOnLeft+0x1e6>
    2f14:	fe 01       	movw	r30, r28
    2f16:	e4 5b       	subi	r30, 0xB4	; 180
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	88 ec       	ldi	r24, 0xC8	; 200
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f22:	fe 01       	movw	r30, r28
    2f24:	e4 5b       	subi	r30, 0xB4	; 180
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 81       	ld	r24, Z
    2f2a:	91 81       	ldd	r25, Z+1	; 0x01
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <Stepper_vidTurnOnLeft+0x1c0>
    2f30:	fe 01       	movw	r30, r28
    2f32:	e4 5b       	subi	r30, 0xB4	; 180
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	de 01       	movw	r26, r28
    2f3c:	a2 5b       	subi	r26, 0xB2	; 178
    2f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	e2 5b       	subi	r30, 0xB2	; 178
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	11 96       	adiw	r26, 0x01	; 1
    2f4e:	9c 93       	st	X, r25
    2f50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e2 5b       	subi	r30, 0xB2	; 178
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	d1 f6       	brne	.-76     	; 0x2f14 <Stepper_vidTurnOnLeft+0x1a8>
    2f60:	4b c0       	rjmp	.+150    	; 0x2ff8 <Stepper_vidTurnOnLeft+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f62:	8e 01       	movw	r16, r28
    2f64:	02 5b       	subi	r16, 0xB2	; 178
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e0 5b       	subi	r30, 0xB0	; 176
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	f8 01       	movw	r30, r16
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	de 01       	movw	r26, r28
    2f86:	a6 5b       	subi	r26, 0xB6	; 182
    2f88:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	e2 5b       	subi	r30, 0xB2	; 178
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	91 81       	ldd	r25, Z+1	; 0x01
    2f94:	11 96       	adiw	r26, 0x01	; 1
    2f96:	9c 93       	st	X, r25
    2f98:	8e 93       	st	-X, r24
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e6 5b       	subi	r30, 0xB6	; 182
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <Stepper_vidTurnOnLeft+0x238>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e6 5b       	subi	r30, 0xB6	; 182
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    2fb2:	22 c0       	rjmp	.+68     	; 0x2ff8 <Stepper_vidTurnOnLeft+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	08 5a       	subi	r16, 0xA8	; 168
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e7 5a       	subi	r30, 0xA7	; 167
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	80 83       	st	Z, r24
    2fd4:	de 01       	movw	r26, r28
    2fd6:	a7 5b       	subi	r26, 0xB7	; 183
    2fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e8 5a       	subi	r30, 0xA8	; 168
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e7 5b       	subi	r30, 0xB7	; 183
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 81       	ld	r24, Z
    2fec:	8a 95       	dec	r24
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <Stepper_vidTurnOnLeft+0x280>
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e7 5b       	subi	r30, 0xB7	; 183
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	80 83       	st	Z, r24
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8HIGH);
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    3018:	fe 01       	movw	r30, r28
    301a:	eb 5b       	subi	r30, 0xBB	; 187
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e8       	ldi	r25, 0x80	; 128
    3022:	a2 ea       	ldi	r26, 0xA2	; 162
    3024:	b4 e4       	ldi	r27, 0x44	; 68
    3026:	80 83       	st	Z, r24
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	a2 83       	std	Z+2, r26	; 0x02
    302c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    302e:	8e 01       	movw	r16, r28
    3030:	0f 5b       	subi	r16, 0xBF	; 191
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	fe 01       	movw	r30, r28
    3036:	eb 5b       	subi	r30, 0xBB	; 187
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	60 81       	ld	r22, Z
    303c:	71 81       	ldd	r23, Z+1	; 0x01
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	93 81       	ldd	r25, Z+3	; 0x03
    3042:	2b ea       	ldi	r18, 0xAB	; 171
    3044:	3a ea       	ldi	r19, 0xAA	; 170
    3046:	4a e2       	ldi	r20, 0x2A	; 42
    3048:	50 e4       	ldi	r21, 0x40	; 64
    304a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	f8 01       	movw	r30, r16
    3054:	80 83       	st	Z, r24
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	a2 83       	std	Z+2, r26	; 0x02
    305a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    305c:	fe 01       	movw	r30, r28
    305e:	ef 5b       	subi	r30, 0xBF	; 191
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e8       	ldi	r20, 0x80	; 128
    3070:	5f e3       	ldi	r21, 0x3F	; 63
    3072:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3076:	88 23       	and	r24, r24
    3078:	34 f4       	brge	.+12     	; 0x3086 <Stepper_vidTurnOnLeft+0x31a>
		__ticks = 1;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	fe 01       	movw	r30, r28
    307e:	e0 5c       	subi	r30, 0xC0	; 192
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 83       	st	Z, r24
    3084:	9d c0       	rjmp	.+314    	; 0x31c0 <Stepper_vidTurnOnLeft+0x454>
	else if (__tmp > 255)
    3086:	fe 01       	movw	r30, r28
    3088:	ef 5b       	subi	r30, 0xBF	; 191
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	60 81       	ld	r22, Z
    308e:	71 81       	ldd	r23, Z+1	; 0x01
    3090:	82 81       	ldd	r24, Z+2	; 0x02
    3092:	93 81       	ldd	r25, Z+3	; 0x03
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	4f e7       	ldi	r20, 0x7F	; 127
    309a:	53 e4       	ldi	r21, 0x43	; 67
    309c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30a0:	18 16       	cp	r1, r24
    30a2:	0c f0       	brlt	.+2      	; 0x30a6 <Stepper_vidTurnOnLeft+0x33a>
    30a4:	7e c0       	rjmp	.+252    	; 0x31a2 <Stepper_vidTurnOnLeft+0x436>
	{
		_delay_ms(__us / 1000.0);
    30a6:	fe 01       	movw	r30, r28
    30a8:	eb 5b       	subi	r30, 0xBB	; 187
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4a e7       	ldi	r20, 0x7A	; 122
    30ba:	54 e4       	ldi	r21, 0x44	; 68
    30bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8c af       	std	Y+60, r24	; 0x3c
    30c6:	9d af       	std	Y+61, r25	; 0x3d
    30c8:	ae af       	std	Y+62, r26	; 0x3e
    30ca:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    30ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    30d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    30d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	4a ef       	ldi	r20, 0xFA	; 250
    30da:	54 e4       	ldi	r21, 0x44	; 68
    30dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	88 af       	std	Y+56, r24	; 0x38
    30e6:	99 af       	std	Y+57, r25	; 0x39
    30e8:	aa af       	std	Y+58, r26	; 0x3a
    30ea:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    30ec:	68 ad       	ldd	r22, Y+56	; 0x38
    30ee:	79 ad       	ldd	r23, Y+57	; 0x39
    30f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    30f2:	9b ad       	ldd	r25, Y+59	; 0x3b
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e8       	ldi	r20, 0x80	; 128
    30fa:	5f e3       	ldi	r21, 0x3F	; 63
    30fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3100:	88 23       	and	r24, r24
    3102:	2c f4       	brge	.+10     	; 0x310e <Stepper_vidTurnOnLeft+0x3a2>
		__ticks = 1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	9f ab       	std	Y+55, r25	; 0x37
    310a:	8e ab       	std	Y+54, r24	; 0x36
    310c:	3f c0       	rjmp	.+126    	; 0x318c <Stepper_vidTurnOnLeft+0x420>
	else if (__tmp > 65535)
    310e:	68 ad       	ldd	r22, Y+56	; 0x38
    3110:	79 ad       	ldd	r23, Y+57	; 0x39
    3112:	8a ad       	ldd	r24, Y+58	; 0x3a
    3114:	9b ad       	ldd	r25, Y+59	; 0x3b
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	3f ef       	ldi	r19, 0xFF	; 255
    311a:	4f e7       	ldi	r20, 0x7F	; 127
    311c:	57 e4       	ldi	r21, 0x47	; 71
    311e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3122:	18 16       	cp	r1, r24
    3124:	4c f5       	brge	.+82     	; 0x3178 <Stepper_vidTurnOnLeft+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3126:	6c ad       	ldd	r22, Y+60	; 0x3c
    3128:	7d ad       	ldd	r23, Y+61	; 0x3d
    312a:	8e ad       	ldd	r24, Y+62	; 0x3e
    312c:	9f ad       	ldd	r25, Y+63	; 0x3f
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e2       	ldi	r20, 0x20	; 32
    3134:	51 e4       	ldi	r21, 0x41	; 65
    3136:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	9f ab       	std	Y+55, r25	; 0x37
    314c:	8e ab       	std	Y+54, r24	; 0x36
    314e:	0f c0       	rjmp	.+30     	; 0x316e <Stepper_vidTurnOnLeft+0x402>
    3150:	88 ec       	ldi	r24, 0xC8	; 200
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	9d ab       	std	Y+53, r25	; 0x35
    3156:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3158:	8c a9       	ldd	r24, Y+52	; 0x34
    315a:	9d a9       	ldd	r25, Y+53	; 0x35
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <Stepper_vidTurnOnLeft+0x3f0>
    3160:	9d ab       	std	Y+53, r25	; 0x35
    3162:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3164:	8e a9       	ldd	r24, Y+54	; 0x36
    3166:	9f a9       	ldd	r25, Y+55	; 0x37
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	9f ab       	std	Y+55, r25	; 0x37
    316c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316e:	8e a9       	ldd	r24, Y+54	; 0x36
    3170:	9f a9       	ldd	r25, Y+55	; 0x37
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	69 f7       	brne	.-38     	; 0x3150 <Stepper_vidTurnOnLeft+0x3e4>
    3176:	2d c0       	rjmp	.+90     	; 0x31d2 <Stepper_vidTurnOnLeft+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3178:	68 ad       	ldd	r22, Y+56	; 0x38
    317a:	79 ad       	ldd	r23, Y+57	; 0x39
    317c:	8a ad       	ldd	r24, Y+58	; 0x3a
    317e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	9f ab       	std	Y+55, r25	; 0x37
    318a:	8e ab       	std	Y+54, r24	; 0x36
    318c:	8e a9       	ldd	r24, Y+54	; 0x36
    318e:	9f a9       	ldd	r25, Y+55	; 0x37
    3190:	9b ab       	std	Y+51, r25	; 0x33
    3192:	8a ab       	std	Y+50, r24	; 0x32
    3194:	8a a9       	ldd	r24, Y+50	; 0x32
    3196:	9b a9       	ldd	r25, Y+51	; 0x33
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <Stepper_vidTurnOnLeft+0x42c>
    319c:	9b ab       	std	Y+51, r25	; 0x33
    319e:	8a ab       	std	Y+50, r24	; 0x32
    31a0:	18 c0       	rjmp	.+48     	; 0x31d2 <Stepper_vidTurnOnLeft+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a2:	fe 01       	movw	r30, r28
    31a4:	ef 5b       	subi	r30, 0xBF	; 191
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	fe 01       	movw	r30, r28
    31ba:	e0 5c       	subi	r30, 0xC0	; 192
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 83       	st	Z, r24
    31c0:	fe 01       	movw	r30, r28
    31c2:	e0 5c       	subi	r30, 0xC0	; 192
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	80 81       	ld	r24, Z
    31c8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31ca:	89 a9       	ldd	r24, Y+49	; 0x31
    31cc:	8a 95       	dec	r24
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <Stepper_vidTurnOnLeft+0x460>
    31d0:	89 ab       	std	Y+49, r24	; 0x31
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8HIGH);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e8       	ldi	r25, 0x80	; 128
    31f6:	a2 ea       	ldi	r26, 0xA2	; 162
    31f8:	b4 e4       	ldi	r27, 0x44	; 68
    31fa:	8d a7       	std	Y+45, r24	; 0x2d
    31fc:	9e a7       	std	Y+46, r25	; 0x2e
    31fe:	af a7       	std	Y+47, r26	; 0x2f
    3200:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3202:	6d a5       	ldd	r22, Y+45	; 0x2d
    3204:	7e a5       	ldd	r23, Y+46	; 0x2e
    3206:	8f a5       	ldd	r24, Y+47	; 0x2f
    3208:	98 a9       	ldd	r25, Y+48	; 0x30
    320a:	2b ea       	ldi	r18, 0xAB	; 171
    320c:	3a ea       	ldi	r19, 0xAA	; 170
    320e:	4a e2       	ldi	r20, 0x2A	; 42
    3210:	50 e4       	ldi	r21, 0x40	; 64
    3212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	89 a7       	std	Y+41, r24	; 0x29
    321c:	9a a7       	std	Y+42, r25	; 0x2a
    321e:	ab a7       	std	Y+43, r26	; 0x2b
    3220:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3222:	69 a5       	ldd	r22, Y+41	; 0x29
    3224:	7a a5       	ldd	r23, Y+42	; 0x2a
    3226:	8b a5       	ldd	r24, Y+43	; 0x2b
    3228:	9c a5       	ldd	r25, Y+44	; 0x2c
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	1c f4       	brge	.+6      	; 0x3240 <Stepper_vidTurnOnLeft+0x4d4>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	88 a7       	std	Y+40, r24	; 0x28
    323e:	91 c0       	rjmp	.+290    	; 0x3362 <Stepper_vidTurnOnLeft+0x5f6>
	else if (__tmp > 255)
    3240:	69 a5       	ldd	r22, Y+41	; 0x29
    3242:	7a a5       	ldd	r23, Y+42	; 0x2a
    3244:	8b a5       	ldd	r24, Y+43	; 0x2b
    3246:	9c a5       	ldd	r25, Y+44	; 0x2c
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	53 e4       	ldi	r21, 0x43	; 67
    3250:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	0c f0       	brlt	.+2      	; 0x325a <Stepper_vidTurnOnLeft+0x4ee>
    3258:	7b c0       	rjmp	.+246    	; 0x3350 <Stepper_vidTurnOnLeft+0x5e4>
	{
		_delay_ms(__us / 1000.0);
    325a:	6d a5       	ldd	r22, Y+45	; 0x2d
    325c:	7e a5       	ldd	r23, Y+46	; 0x2e
    325e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3260:	98 a9       	ldd	r25, Y+48	; 0x30
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4a e7       	ldi	r20, 0x7A	; 122
    3268:	54 e4       	ldi	r21, 0x44	; 68
    326a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8c a3       	std	Y+36, r24	; 0x24
    3274:	9d a3       	std	Y+37, r25	; 0x25
    3276:	ae a3       	std	Y+38, r26	; 0x26
    3278:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327a:	6c a1       	ldd	r22, Y+36	; 0x24
    327c:	7d a1       	ldd	r23, Y+37	; 0x25
    327e:	8e a1       	ldd	r24, Y+38	; 0x26
    3280:	9f a1       	ldd	r25, Y+39	; 0x27
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	4a ef       	ldi	r20, 0xFA	; 250
    3288:	54 e4       	ldi	r21, 0x44	; 68
    328a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	88 a3       	std	Y+32, r24	; 0x20
    3294:	99 a3       	std	Y+33, r25	; 0x21
    3296:	aa a3       	std	Y+34, r26	; 0x22
    3298:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    329a:	68 a1       	ldd	r22, Y+32	; 0x20
    329c:	79 a1       	ldd	r23, Y+33	; 0x21
    329e:	8a a1       	ldd	r24, Y+34	; 0x22
    32a0:	9b a1       	ldd	r25, Y+35	; 0x23
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e8       	ldi	r20, 0x80	; 128
    32a8:	5f e3       	ldi	r21, 0x3F	; 63
    32aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <Stepper_vidTurnOnLeft+0x550>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9f 8f       	std	Y+31, r25	; 0x1f
    32b8:	8e 8f       	std	Y+30, r24	; 0x1e
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <Stepper_vidTurnOnLeft+0x5ce>
	else if (__tmp > 65535)
    32bc:	68 a1       	ldd	r22, Y+32	; 0x20
    32be:	79 a1       	ldd	r23, Y+33	; 0x21
    32c0:	8a a1       	ldd	r24, Y+34	; 0x22
    32c2:	9b a1       	ldd	r25, Y+35	; 0x23
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	3f ef       	ldi	r19, 0xFF	; 255
    32c8:	4f e7       	ldi	r20, 0x7F	; 127
    32ca:	57 e4       	ldi	r21, 0x47	; 71
    32cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <Stepper_vidTurnOnLeft+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	6c a1       	ldd	r22, Y+36	; 0x24
    32d6:	7d a1       	ldd	r23, Y+37	; 0x25
    32d8:	8e a1       	ldd	r24, Y+38	; 0x26
    32da:	9f a1       	ldd	r25, Y+39	; 0x27
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e2       	ldi	r20, 0x20	; 32
    32e2:	51 e4       	ldi	r21, 0x41	; 65
    32e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9f 8f       	std	Y+31, r25	; 0x1f
    32fa:	8e 8f       	std	Y+30, r24	; 0x1e
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <Stepper_vidTurnOnLeft+0x5b0>
    32fe:	88 ec       	ldi	r24, 0xC8	; 200
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	9d 8f       	std	Y+29, r25	; 0x1d
    3304:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3306:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3308:	9d 8d       	ldd	r25, Y+29	; 0x1d
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <Stepper_vidTurnOnLeft+0x59e>
    330e:	9d 8f       	std	Y+29, r25	; 0x1d
    3310:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3314:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9f 8f       	std	Y+31, r25	; 0x1f
    331a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    331e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	69 f7       	brne	.-38     	; 0x32fe <Stepper_vidTurnOnLeft+0x592>
    3324:	24 c0       	rjmp	.+72     	; 0x336e <Stepper_vidTurnOnLeft+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	68 a1       	ldd	r22, Y+32	; 0x20
    3328:	79 a1       	ldd	r23, Y+33	; 0x21
    332a:	8a a1       	ldd	r24, Y+34	; 0x22
    332c:	9b a1       	ldd	r25, Y+35	; 0x23
    332e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9f 8f       	std	Y+31, r25	; 0x1f
    3338:	8e 8f       	std	Y+30, r24	; 0x1e
    333a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    333c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    333e:	9b 8f       	std	Y+27, r25	; 0x1b
    3340:	8a 8f       	std	Y+26, r24	; 0x1a
    3342:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3344:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <Stepper_vidTurnOnLeft+0x5da>
    334a:	9b 8f       	std	Y+27, r25	; 0x1b
    334c:	8a 8f       	std	Y+26, r24	; 0x1a
    334e:	0f c0       	rjmp	.+30     	; 0x336e <Stepper_vidTurnOnLeft+0x602>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3350:	69 a5       	ldd	r22, Y+41	; 0x29
    3352:	7a a5       	ldd	r23, Y+42	; 0x2a
    3354:	8b a5       	ldd	r24, Y+43	; 0x2b
    3356:	9c a5       	ldd	r25, Y+44	; 0x2c
    3358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	88 a7       	std	Y+40, r24	; 0x28
    3362:	88 a5       	ldd	r24, Y+40	; 0x28
    3364:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3366:	89 8d       	ldd	r24, Y+25	; 0x19
    3368:	8a 95       	dec	r24
    336a:	f1 f7       	brne	.-4      	; 0x3368 <Stepper_vidTurnOnLeft+0x5fc>
    336c:	89 8f       	std	Y+25, r24	; 0x19
			//tani step
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8HIGH);
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	61 e0       	ldi	r22, 0x01	; 1
    3372:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    337e:	82 e0       	ldi	r24, 0x02	; 2
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    3386:	83 e0       	ldi	r24, 0x03	; 3
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e8       	ldi	r25, 0x80	; 128
    3392:	a2 ea       	ldi	r26, 0xA2	; 162
    3394:	b4 e4       	ldi	r27, 0x44	; 68
    3396:	8d 8b       	std	Y+21, r24	; 0x15
    3398:	9e 8b       	std	Y+22, r25	; 0x16
    339a:	af 8b       	std	Y+23, r26	; 0x17
    339c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    339e:	6d 89       	ldd	r22, Y+21	; 0x15
    33a0:	7e 89       	ldd	r23, Y+22	; 0x16
    33a2:	8f 89       	ldd	r24, Y+23	; 0x17
    33a4:	98 8d       	ldd	r25, Y+24	; 0x18
    33a6:	2b ea       	ldi	r18, 0xAB	; 171
    33a8:	3a ea       	ldi	r19, 0xAA	; 170
    33aa:	4a e2       	ldi	r20, 0x2A	; 42
    33ac:	50 e4       	ldi	r21, 0x40	; 64
    33ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	89 8b       	std	Y+17, r24	; 0x11
    33b8:	9a 8b       	std	Y+18, r25	; 0x12
    33ba:	ab 8b       	std	Y+19, r26	; 0x13
    33bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33be:	69 89       	ldd	r22, Y+17	; 0x11
    33c0:	7a 89       	ldd	r23, Y+18	; 0x12
    33c2:	8b 89       	ldd	r24, Y+19	; 0x13
    33c4:	9c 89       	ldd	r25, Y+20	; 0x14
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	1c f4       	brge	.+6      	; 0x33dc <Stepper_vidTurnOnLeft+0x670>
		__ticks = 1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	88 8b       	std	Y+16, r24	; 0x10
    33da:	91 c0       	rjmp	.+290    	; 0x34fe <Stepper_vidTurnOnLeft+0x792>
	else if (__tmp > 255)
    33dc:	69 89       	ldd	r22, Y+17	; 0x11
    33de:	7a 89       	ldd	r23, Y+18	; 0x12
    33e0:	8b 89       	ldd	r24, Y+19	; 0x13
    33e2:	9c 89       	ldd	r25, Y+20	; 0x14
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	53 e4       	ldi	r21, 0x43	; 67
    33ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	0c f0       	brlt	.+2      	; 0x33f6 <Stepper_vidTurnOnLeft+0x68a>
    33f4:	7b c0       	rjmp	.+246    	; 0x34ec <Stepper_vidTurnOnLeft+0x780>
	{
		_delay_ms(__us / 1000.0);
    33f6:	6d 89       	ldd	r22, Y+21	; 0x15
    33f8:	7e 89       	ldd	r23, Y+22	; 0x16
    33fa:	8f 89       	ldd	r24, Y+23	; 0x17
    33fc:	98 8d       	ldd	r25, Y+24	; 0x18
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a e7       	ldi	r20, 0x7A	; 122
    3404:	54 e4       	ldi	r21, 0x44	; 68
    3406:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8c 87       	std	Y+12, r24	; 0x0c
    3410:	9d 87       	std	Y+13, r25	; 0x0d
    3412:	ae 87       	std	Y+14, r26	; 0x0e
    3414:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3416:	6c 85       	ldd	r22, Y+12	; 0x0c
    3418:	7d 85       	ldd	r23, Y+13	; 0x0d
    341a:	8e 85       	ldd	r24, Y+14	; 0x0e
    341c:	9f 85       	ldd	r25, Y+15	; 0x0f
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4a ef       	ldi	r20, 0xFA	; 250
    3424:	54 e4       	ldi	r21, 0x44	; 68
    3426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	88 87       	std	Y+8, r24	; 0x08
    3430:	99 87       	std	Y+9, r25	; 0x09
    3432:	aa 87       	std	Y+10, r26	; 0x0a
    3434:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3436:	68 85       	ldd	r22, Y+8	; 0x08
    3438:	79 85       	ldd	r23, Y+9	; 0x09
    343a:	8a 85       	ldd	r24, Y+10	; 0x0a
    343c:	9b 85       	ldd	r25, Y+11	; 0x0b
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e8       	ldi	r20, 0x80	; 128
    3444:	5f e3       	ldi	r21, 0x3F	; 63
    3446:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    344a:	88 23       	and	r24, r24
    344c:	2c f4       	brge	.+10     	; 0x3458 <Stepper_vidTurnOnLeft+0x6ec>
		__ticks = 1;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9f 83       	std	Y+7, r25	; 0x07
    3454:	8e 83       	std	Y+6, r24	; 0x06
    3456:	3f c0       	rjmp	.+126    	; 0x34d6 <Stepper_vidTurnOnLeft+0x76a>
	else if (__tmp > 65535)
    3458:	68 85       	ldd	r22, Y+8	; 0x08
    345a:	79 85       	ldd	r23, Y+9	; 0x09
    345c:	8a 85       	ldd	r24, Y+10	; 0x0a
    345e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	3f ef       	ldi	r19, 0xFF	; 255
    3464:	4f e7       	ldi	r20, 0x7F	; 127
    3466:	57 e4       	ldi	r21, 0x47	; 71
    3468:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    346c:	18 16       	cp	r1, r24
    346e:	4c f5       	brge	.+82     	; 0x34c2 <Stepper_vidTurnOnLeft+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3470:	6c 85       	ldd	r22, Y+12	; 0x0c
    3472:	7d 85       	ldd	r23, Y+13	; 0x0d
    3474:	8e 85       	ldd	r24, Y+14	; 0x0e
    3476:	9f 85       	ldd	r25, Y+15	; 0x0f
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e2       	ldi	r20, 0x20	; 32
    347e:	51 e4       	ldi	r21, 0x41	; 65
    3480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	9f 83       	std	Y+7, r25	; 0x07
    3496:	8e 83       	std	Y+6, r24	; 0x06
    3498:	0f c0       	rjmp	.+30     	; 0x34b8 <Stepper_vidTurnOnLeft+0x74c>
    349a:	88 ec       	ldi	r24, 0xC8	; 200
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9d 83       	std	Y+5, r25	; 0x05
    34a0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34a2:	8c 81       	ldd	r24, Y+4	; 0x04
    34a4:	9d 81       	ldd	r25, Y+5	; 0x05
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <Stepper_vidTurnOnLeft+0x73a>
    34aa:	9d 83       	std	Y+5, r25	; 0x05
    34ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ae:	8e 81       	ldd	r24, Y+6	; 0x06
    34b0:	9f 81       	ldd	r25, Y+7	; 0x07
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	9f 83       	std	Y+7, r25	; 0x07
    34b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b8:	8e 81       	ldd	r24, Y+6	; 0x06
    34ba:	9f 81       	ldd	r25, Y+7	; 0x07
    34bc:	00 97       	sbiw	r24, 0x00	; 0
    34be:	69 f7       	brne	.-38     	; 0x349a <Stepper_vidTurnOnLeft+0x72e>
    34c0:	24 c0       	rjmp	.+72     	; 0x350a <Stepper_vidTurnOnLeft+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c2:	68 85       	ldd	r22, Y+8	; 0x08
    34c4:	79 85       	ldd	r23, Y+9	; 0x09
    34c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    34c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    34ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	9f 83       	std	Y+7, r25	; 0x07
    34d4:	8e 83       	std	Y+6, r24	; 0x06
    34d6:	8e 81       	ldd	r24, Y+6	; 0x06
    34d8:	9f 81       	ldd	r25, Y+7	; 0x07
    34da:	9b 83       	std	Y+3, r25	; 0x03
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	9b 81       	ldd	r25, Y+3	; 0x03
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <Stepper_vidTurnOnLeft+0x776>
    34e6:	9b 83       	std	Y+3, r25	; 0x03
    34e8:	8a 83       	std	Y+2, r24	; 0x02
    34ea:	0f c0       	rjmp	.+30     	; 0x350a <Stepper_vidTurnOnLeft+0x79e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34ec:	69 89       	ldd	r22, Y+17	; 0x11
    34ee:	7a 89       	ldd	r23, Y+18	; 0x12
    34f0:	8b 89       	ldd	r24, Y+19	; 0x13
    34f2:	9c 89       	ldd	r25, Y+20	; 0x14
    34f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	88 8b       	std	Y+16, r24	; 0x10
    34fe:	88 89       	ldd	r24, Y+16	; 0x10
    3500:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	8a 95       	dec	r24
    3506:	f1 f7       	brne	.-4      	; 0x3504 <Stepper_vidTurnOnLeft+0x798>
    3508:	89 83       	std	Y+1, r24	; 0x01
			//awl step b3dha n3ml delay 3la ma ywsl ltnay step
			_delay_us(1300);

}
    350a:	c0 5a       	subi	r28, 0xA0	; 160
    350c:	df 4f       	sbci	r29, 0xFF	; 255
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	f8 94       	cli
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	0f be       	out	0x3f, r0	; 63
    3516:	cd bf       	out	0x3d, r28	; 61
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	08 95       	ret

00003522 <Stepper_vidTurnOnRight>:
void Stepper_vidTurnOnRight(void)
{
    3522:	0f 93       	push	r16
    3524:	1f 93       	push	r17
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	c0 56       	subi	r28, 0x60	; 96
    3530:	d0 40       	sbci	r29, 0x00	; 0
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61

	Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8HIGH);
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    3554:	83 e0       	ldi	r24, 0x03	; 3
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    355c:	fe 01       	movw	r30, r28
    355e:	e3 5a       	subi	r30, 0xA3	; 163
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e8       	ldi	r25, 0x80	; 128
    3566:	a2 ea       	ldi	r26, 0xA2	; 162
    3568:	b4 e4       	ldi	r27, 0x44	; 68
    356a:	80 83       	st	Z, r24
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	a2 83       	std	Z+2, r26	; 0x02
    3570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3572:	8e 01       	movw	r16, r28
    3574:	07 5a       	subi	r16, 0xA7	; 167
    3576:	1f 4f       	sbci	r17, 0xFF	; 255
    3578:	fe 01       	movw	r30, r28
    357a:	e3 5a       	subi	r30, 0xA3	; 163
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	2b ea       	ldi	r18, 0xAB	; 171
    3588:	3a ea       	ldi	r19, 0xAA	; 170
    358a:	4a e2       	ldi	r20, 0x2A	; 42
    358c:	50 e4       	ldi	r21, 0x40	; 64
    358e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	f8 01       	movw	r30, r16
    3598:	80 83       	st	Z, r24
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	a2 83       	std	Z+2, r26	; 0x02
    359e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35a0:	fe 01       	movw	r30, r28
    35a2:	e7 5a       	subi	r30, 0xA7	; 167
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	40 e8       	ldi	r20, 0x80	; 128
    35b4:	5f e3       	ldi	r21, 0x3F	; 63
    35b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    35ba:	88 23       	and	r24, r24
    35bc:	34 f4       	brge	.+12     	; 0x35ca <Stepper_vidTurnOnRight+0xa8>
		__ticks = 1;
    35be:	fe 01       	movw	r30, r28
    35c0:	e8 5a       	subi	r30, 0xA8	; 168
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	80 83       	st	Z, r24
    35c8:	e0 c0       	rjmp	.+448    	; 0x378a <Stepper_vidTurnOnRight+0x268>
	else if (__tmp > 255)
    35ca:	fe 01       	movw	r30, r28
    35cc:	e7 5a       	subi	r30, 0xA7	; 167
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4f e7       	ldi	r20, 0x7F	; 127
    35de:	53 e4       	ldi	r21, 0x43	; 67
    35e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    35e4:	18 16       	cp	r1, r24
    35e6:	0c f0       	brlt	.+2      	; 0x35ea <Stepper_vidTurnOnRight+0xc8>
    35e8:	c0 c0       	rjmp	.+384    	; 0x376a <Stepper_vidTurnOnRight+0x248>
	{
		_delay_ms(__us / 1000.0);
    35ea:	fe 01       	movw	r30, r28
    35ec:	e3 5a       	subi	r30, 0xA3	; 163
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a e7       	ldi	r20, 0x7A	; 122
    35fe:	54 e4       	ldi	r21, 0x44	; 68
    3600:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	fe 01       	movw	r30, r28
    360a:	ec 5a       	subi	r30, 0xAC	; 172
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 83       	st	Z, r24
    3610:	91 83       	std	Z+1, r25	; 0x01
    3612:	a2 83       	std	Z+2, r26	; 0x02
    3614:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	8e 01       	movw	r16, r28
    3618:	00 5b       	subi	r16, 0xB0	; 176
    361a:	1f 4f       	sbci	r17, 0xFF	; 255
    361c:	fe 01       	movw	r30, r28
    361e:	ec 5a       	subi	r30, 0xAC	; 172
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4a ef       	ldi	r20, 0xFA	; 250
    3630:	54 e4       	ldi	r21, 0x44	; 68
    3632:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	f8 01       	movw	r30, r16
    363c:	80 83       	st	Z, r24
    363e:	91 83       	std	Z+1, r25	; 0x01
    3640:	a2 83       	std	Z+2, r26	; 0x02
    3642:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3644:	fe 01       	movw	r30, r28
    3646:	e0 5b       	subi	r30, 0xB0	; 176
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e8       	ldi	r20, 0x80	; 128
    3658:	5f e3       	ldi	r21, 0x3F	; 63
    365a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    365e:	88 23       	and	r24, r24
    3660:	44 f4       	brge	.+16     	; 0x3672 <Stepper_vidTurnOnRight+0x150>
		__ticks = 1;
    3662:	fe 01       	movw	r30, r28
    3664:	e2 5b       	subi	r30, 0xB2	; 178
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	91 83       	std	Z+1, r25	; 0x01
    366e:	80 83       	st	Z, r24
    3670:	64 c0       	rjmp	.+200    	; 0x373a <Stepper_vidTurnOnRight+0x218>
	else if (__tmp > 65535)
    3672:	fe 01       	movw	r30, r28
    3674:	e0 5b       	subi	r30, 0xB0	; 176
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	60 81       	ld	r22, Z
    367a:	71 81       	ldd	r23, Z+1	; 0x01
    367c:	82 81       	ldd	r24, Z+2	; 0x02
    367e:	93 81       	ldd	r25, Z+3	; 0x03
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	3f ef       	ldi	r19, 0xFF	; 255
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	57 e4       	ldi	r21, 0x47	; 71
    3688:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	0c f0       	brlt	.+2      	; 0x3692 <Stepper_vidTurnOnRight+0x170>
    3690:	43 c0       	rjmp	.+134    	; 0x3718 <Stepper_vidTurnOnRight+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	fe 01       	movw	r30, r28
    3694:	ec 5a       	subi	r30, 0xAC	; 172
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	60 81       	ld	r22, Z
    369a:	71 81       	ldd	r23, Z+1	; 0x01
    369c:	82 81       	ldd	r24, Z+2	; 0x02
    369e:	93 81       	ldd	r25, Z+3	; 0x03
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e2       	ldi	r20, 0x20	; 32
    36a6:	51 e4       	ldi	r21, 0x41	; 65
    36a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	8e 01       	movw	r16, r28
    36b2:	02 5b       	subi	r16, 0xB2	; 178
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	f8 01       	movw	r30, r16
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	80 83       	st	Z, r24
    36c8:	1f c0       	rjmp	.+62     	; 0x3708 <Stepper_vidTurnOnRight+0x1e6>
    36ca:	fe 01       	movw	r30, r28
    36cc:	e4 5b       	subi	r30, 0xB4	; 180
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	88 ec       	ldi	r24, 0xC8	; 200
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36d8:	fe 01       	movw	r30, r28
    36da:	e4 5b       	subi	r30, 0xB4	; 180
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <Stepper_vidTurnOnRight+0x1c0>
    36e6:	fe 01       	movw	r30, r28
    36e8:	e4 5b       	subi	r30, 0xB4	; 180
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f0:	de 01       	movw	r26, r28
    36f2:	a2 5b       	subi	r26, 0xB2	; 178
    36f4:	bf 4f       	sbci	r27, 0xFF	; 255
    36f6:	fe 01       	movw	r30, r28
    36f8:	e2 5b       	subi	r30, 0xB2	; 178
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	11 96       	adiw	r26, 0x01	; 1
    3704:	9c 93       	st	X, r25
    3706:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3708:	fe 01       	movw	r30, r28
    370a:	e2 5b       	subi	r30, 0xB2	; 178
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	d1 f6       	brne	.-76     	; 0x36ca <Stepper_vidTurnOnRight+0x1a8>
    3716:	4b c0       	rjmp	.+150    	; 0x37ae <Stepper_vidTurnOnRight+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3718:	8e 01       	movw	r16, r28
    371a:	02 5b       	subi	r16, 0xB2	; 178
    371c:	1f 4f       	sbci	r17, 0xFF	; 255
    371e:	fe 01       	movw	r30, r28
    3720:	e0 5b       	subi	r30, 0xB0	; 176
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	60 81       	ld	r22, Z
    3726:	71 81       	ldd	r23, Z+1	; 0x01
    3728:	82 81       	ldd	r24, Z+2	; 0x02
    372a:	93 81       	ldd	r25, Z+3	; 0x03
    372c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	f8 01       	movw	r30, r16
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	80 83       	st	Z, r24
    373a:	de 01       	movw	r26, r28
    373c:	a6 5b       	subi	r26, 0xB6	; 182
    373e:	bf 4f       	sbci	r27, 0xFF	; 255
    3740:	fe 01       	movw	r30, r28
    3742:	e2 5b       	subi	r30, 0xB2	; 178
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	80 81       	ld	r24, Z
    3748:	91 81       	ldd	r25, Z+1	; 0x01
    374a:	11 96       	adiw	r26, 0x01	; 1
    374c:	9c 93       	st	X, r25
    374e:	8e 93       	st	-X, r24
    3750:	fe 01       	movw	r30, r28
    3752:	e6 5b       	subi	r30, 0xB6	; 182
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <Stepper_vidTurnOnRight+0x238>
    375e:	fe 01       	movw	r30, r28
    3760:	e6 5b       	subi	r30, 0xB6	; 182
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	80 83       	st	Z, r24
    3768:	22 c0       	rjmp	.+68     	; 0x37ae <Stepper_vidTurnOnRight+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    376a:	8e 01       	movw	r16, r28
    376c:	08 5a       	subi	r16, 0xA8	; 168
    376e:	1f 4f       	sbci	r17, 0xFF	; 255
    3770:	fe 01       	movw	r30, r28
    3772:	e7 5a       	subi	r30, 0xA7	; 167
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	60 81       	ld	r22, Z
    3778:	71 81       	ldd	r23, Z+1	; 0x01
    377a:	82 81       	ldd	r24, Z+2	; 0x02
    377c:	93 81       	ldd	r25, Z+3	; 0x03
    377e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	f8 01       	movw	r30, r16
    3788:	80 83       	st	Z, r24
    378a:	de 01       	movw	r26, r28
    378c:	a7 5b       	subi	r26, 0xB7	; 183
    378e:	bf 4f       	sbci	r27, 0xFF	; 255
    3790:	fe 01       	movw	r30, r28
    3792:	e8 5a       	subi	r30, 0xA8	; 168
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	80 81       	ld	r24, Z
    3798:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    379a:	fe 01       	movw	r30, r28
    379c:	e7 5b       	subi	r30, 0xB7	; 183
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	8a 95       	dec	r24
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <Stepper_vidTurnOnRight+0x280>
    37a6:	fe 01       	movw	r30, r28
    37a8:	e7 5b       	subi	r30, 0xB7	; 183
    37aa:	ff 4f       	sbci	r31, 0xFF	; 255
    37ac:	80 83       	st	Z, r24
			//awl step b3dha n3ml delay 3la ma ywsl ltnay step
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8HIGH);
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	61 e0       	ldi	r22, 0x01	; 1
    37ba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    37be:	82 e0       	ldi	r24, 0x02	; 2
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    37ce:	fe 01       	movw	r30, r28
    37d0:	eb 5b       	subi	r30, 0xBB	; 187
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e8       	ldi	r25, 0x80	; 128
    37d8:	a2 ea       	ldi	r26, 0xA2	; 162
    37da:	b4 e4       	ldi	r27, 0x44	; 68
    37dc:	80 83       	st	Z, r24
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	a2 83       	std	Z+2, r26	; 0x02
    37e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37e4:	8e 01       	movw	r16, r28
    37e6:	0f 5b       	subi	r16, 0xBF	; 191
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	fe 01       	movw	r30, r28
    37ec:	eb 5b       	subi	r30, 0xBB	; 187
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	60 81       	ld	r22, Z
    37f2:	71 81       	ldd	r23, Z+1	; 0x01
    37f4:	82 81       	ldd	r24, Z+2	; 0x02
    37f6:	93 81       	ldd	r25, Z+3	; 0x03
    37f8:	2b ea       	ldi	r18, 0xAB	; 171
    37fa:	3a ea       	ldi	r19, 0xAA	; 170
    37fc:	4a e2       	ldi	r20, 0x2A	; 42
    37fe:	50 e4       	ldi	r21, 0x40	; 64
    3800:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	f8 01       	movw	r30, r16
    380a:	80 83       	st	Z, r24
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	a2 83       	std	Z+2, r26	; 0x02
    3810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3812:	fe 01       	movw	r30, r28
    3814:	ef 5b       	subi	r30, 0xBF	; 191
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e8       	ldi	r20, 0x80	; 128
    3826:	5f e3       	ldi	r21, 0x3F	; 63
    3828:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    382c:	88 23       	and	r24, r24
    382e:	34 f4       	brge	.+12     	; 0x383c <Stepper_vidTurnOnRight+0x31a>
		__ticks = 1;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	fe 01       	movw	r30, r28
    3834:	e0 5c       	subi	r30, 0xC0	; 192
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 83       	st	Z, r24
    383a:	9d c0       	rjmp	.+314    	; 0x3976 <Stepper_vidTurnOnRight+0x454>
	else if (__tmp > 255)
    383c:	fe 01       	movw	r30, r28
    383e:	ef 5b       	subi	r30, 0xBF	; 191
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	60 81       	ld	r22, Z
    3844:	71 81       	ldd	r23, Z+1	; 0x01
    3846:	82 81       	ldd	r24, Z+2	; 0x02
    3848:	93 81       	ldd	r25, Z+3	; 0x03
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	4f e7       	ldi	r20, 0x7F	; 127
    3850:	53 e4       	ldi	r21, 0x43	; 67
    3852:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3856:	18 16       	cp	r1, r24
    3858:	0c f0       	brlt	.+2      	; 0x385c <Stepper_vidTurnOnRight+0x33a>
    385a:	7e c0       	rjmp	.+252    	; 0x3958 <Stepper_vidTurnOnRight+0x436>
	{
		_delay_ms(__us / 1000.0);
    385c:	fe 01       	movw	r30, r28
    385e:	eb 5b       	subi	r30, 0xBB	; 187
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	4a e7       	ldi	r20, 0x7A	; 122
    3870:	54 e4       	ldi	r21, 0x44	; 68
    3872:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	8c af       	std	Y+60, r24	; 0x3c
    387c:	9d af       	std	Y+61, r25	; 0x3d
    387e:	ae af       	std	Y+62, r26	; 0x3e
    3880:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3882:	6c ad       	ldd	r22, Y+60	; 0x3c
    3884:	7d ad       	ldd	r23, Y+61	; 0x3d
    3886:	8e ad       	ldd	r24, Y+62	; 0x3e
    3888:	9f ad       	ldd	r25, Y+63	; 0x3f
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	4a ef       	ldi	r20, 0xFA	; 250
    3890:	54 e4       	ldi	r21, 0x44	; 68
    3892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	88 af       	std	Y+56, r24	; 0x38
    389c:	99 af       	std	Y+57, r25	; 0x39
    389e:	aa af       	std	Y+58, r26	; 0x3a
    38a0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    38a2:	68 ad       	ldd	r22, Y+56	; 0x38
    38a4:	79 ad       	ldd	r23, Y+57	; 0x39
    38a6:	8a ad       	ldd	r24, Y+58	; 0x3a
    38a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e8       	ldi	r20, 0x80	; 128
    38b0:	5f e3       	ldi	r21, 0x3F	; 63
    38b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    38b6:	88 23       	and	r24, r24
    38b8:	2c f4       	brge	.+10     	; 0x38c4 <Stepper_vidTurnOnRight+0x3a2>
		__ticks = 1;
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	9f ab       	std	Y+55, r25	; 0x37
    38c0:	8e ab       	std	Y+54, r24	; 0x36
    38c2:	3f c0       	rjmp	.+126    	; 0x3942 <Stepper_vidTurnOnRight+0x420>
	else if (__tmp > 65535)
    38c4:	68 ad       	ldd	r22, Y+56	; 0x38
    38c6:	79 ad       	ldd	r23, Y+57	; 0x39
    38c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    38ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	3f ef       	ldi	r19, 0xFF	; 255
    38d0:	4f e7       	ldi	r20, 0x7F	; 127
    38d2:	57 e4       	ldi	r21, 0x47	; 71
    38d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    38d8:	18 16       	cp	r1, r24
    38da:	4c f5       	brge	.+82     	; 0x392e <Stepper_vidTurnOnRight+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    38de:	7d ad       	ldd	r23, Y+61	; 0x3d
    38e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    38e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e2       	ldi	r20, 0x20	; 32
    38ea:	51 e4       	ldi	r21, 0x41	; 65
    38ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	9f ab       	std	Y+55, r25	; 0x37
    3902:	8e ab       	std	Y+54, r24	; 0x36
    3904:	0f c0       	rjmp	.+30     	; 0x3924 <Stepper_vidTurnOnRight+0x402>
    3906:	88 ec       	ldi	r24, 0xC8	; 200
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9d ab       	std	Y+53, r25	; 0x35
    390c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    390e:	8c a9       	ldd	r24, Y+52	; 0x34
    3910:	9d a9       	ldd	r25, Y+53	; 0x35
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <Stepper_vidTurnOnRight+0x3f0>
    3916:	9d ab       	std	Y+53, r25	; 0x35
    3918:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391a:	8e a9       	ldd	r24, Y+54	; 0x36
    391c:	9f a9       	ldd	r25, Y+55	; 0x37
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	9f ab       	std	Y+55, r25	; 0x37
    3922:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3924:	8e a9       	ldd	r24, Y+54	; 0x36
    3926:	9f a9       	ldd	r25, Y+55	; 0x37
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	69 f7       	brne	.-38     	; 0x3906 <Stepper_vidTurnOnRight+0x3e4>
    392c:	2d c0       	rjmp	.+90     	; 0x3988 <Stepper_vidTurnOnRight+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392e:	68 ad       	ldd	r22, Y+56	; 0x38
    3930:	79 ad       	ldd	r23, Y+57	; 0x39
    3932:	8a ad       	ldd	r24, Y+58	; 0x3a
    3934:	9b ad       	ldd	r25, Y+59	; 0x3b
    3936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	9f ab       	std	Y+55, r25	; 0x37
    3940:	8e ab       	std	Y+54, r24	; 0x36
    3942:	8e a9       	ldd	r24, Y+54	; 0x36
    3944:	9f a9       	ldd	r25, Y+55	; 0x37
    3946:	9b ab       	std	Y+51, r25	; 0x33
    3948:	8a ab       	std	Y+50, r24	; 0x32
    394a:	8a a9       	ldd	r24, Y+50	; 0x32
    394c:	9b a9       	ldd	r25, Y+51	; 0x33
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <Stepper_vidTurnOnRight+0x42c>
    3952:	9b ab       	std	Y+51, r25	; 0x33
    3954:	8a ab       	std	Y+50, r24	; 0x32
    3956:	18 c0       	rjmp	.+48     	; 0x3988 <Stepper_vidTurnOnRight+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3958:	fe 01       	movw	r30, r28
    395a:	ef 5b       	subi	r30, 0xBF	; 191
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	60 81       	ld	r22, Z
    3960:	71 81       	ldd	r23, Z+1	; 0x01
    3962:	82 81       	ldd	r24, Z+2	; 0x02
    3964:	93 81       	ldd	r25, Z+3	; 0x03
    3966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	fe 01       	movw	r30, r28
    3970:	e0 5c       	subi	r30, 0xC0	; 192
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	80 83       	st	Z, r24
    3976:	fe 01       	movw	r30, r28
    3978:	e0 5c       	subi	r30, 0xC0	; 192
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	80 81       	ld	r24, Z
    397e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3980:	89 a9       	ldd	r24, Y+49	; 0x31
    3982:	8a 95       	dec	r24
    3984:	f1 f7       	brne	.-4      	; 0x3982 <Stepper_vidTurnOnRight+0x460>
    3986:	89 ab       	std	Y+49, r24	; 0x31
			//tani step
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8HIGH);
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	61 e0       	ldi	r22, 0x01	; 1
    399c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    39a0:	83 e0       	ldi	r24, 0x03	; 3
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e8       	ldi	r25, 0x80	; 128
    39ac:	a2 ea       	ldi	r26, 0xA2	; 162
    39ae:	b4 e4       	ldi	r27, 0x44	; 68
    39b0:	8d a7       	std	Y+45, r24	; 0x2d
    39b2:	9e a7       	std	Y+46, r25	; 0x2e
    39b4:	af a7       	std	Y+47, r26	; 0x2f
    39b6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39b8:	6d a5       	ldd	r22, Y+45	; 0x2d
    39ba:	7e a5       	ldd	r23, Y+46	; 0x2e
    39bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    39be:	98 a9       	ldd	r25, Y+48	; 0x30
    39c0:	2b ea       	ldi	r18, 0xAB	; 171
    39c2:	3a ea       	ldi	r19, 0xAA	; 170
    39c4:	4a e2       	ldi	r20, 0x2A	; 42
    39c6:	50 e4       	ldi	r21, 0x40	; 64
    39c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	89 a7       	std	Y+41, r24	; 0x29
    39d2:	9a a7       	std	Y+42, r25	; 0x2a
    39d4:	ab a7       	std	Y+43, r26	; 0x2b
    39d6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    39d8:	69 a5       	ldd	r22, Y+41	; 0x29
    39da:	7a a5       	ldd	r23, Y+42	; 0x2a
    39dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39de:	9c a5       	ldd	r25, Y+44	; 0x2c
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e8       	ldi	r20, 0x80	; 128
    39e6:	5f e3       	ldi	r21, 0x3F	; 63
    39e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    39ec:	88 23       	and	r24, r24
    39ee:	1c f4       	brge	.+6      	; 0x39f6 <Stepper_vidTurnOnRight+0x4d4>
		__ticks = 1;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	88 a7       	std	Y+40, r24	; 0x28
    39f4:	91 c0       	rjmp	.+290    	; 0x3b18 <Stepper_vidTurnOnRight+0x5f6>
	else if (__tmp > 255)
    39f6:	69 a5       	ldd	r22, Y+41	; 0x29
    39f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    39fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    39fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4f e7       	ldi	r20, 0x7F	; 127
    3a04:	53 e4       	ldi	r21, 0x43	; 67
    3a06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a0a:	18 16       	cp	r1, r24
    3a0c:	0c f0       	brlt	.+2      	; 0x3a10 <Stepper_vidTurnOnRight+0x4ee>
    3a0e:	7b c0       	rjmp	.+246    	; 0x3b06 <Stepper_vidTurnOnRight+0x5e4>
	{
		_delay_ms(__us / 1000.0);
    3a10:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a12:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a16:	98 a9       	ldd	r25, Y+48	; 0x30
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	4a e7       	ldi	r20, 0x7A	; 122
    3a1e:	54 e4       	ldi	r21, 0x44	; 68
    3a20:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	8c a3       	std	Y+36, r24	; 0x24
    3a2a:	9d a3       	std	Y+37, r25	; 0x25
    3a2c:	ae a3       	std	Y+38, r26	; 0x26
    3a2e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a30:	6c a1       	ldd	r22, Y+36	; 0x24
    3a32:	7d a1       	ldd	r23, Y+37	; 0x25
    3a34:	8e a1       	ldd	r24, Y+38	; 0x26
    3a36:	9f a1       	ldd	r25, Y+39	; 0x27
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	4a ef       	ldi	r20, 0xFA	; 250
    3a3e:	54 e4       	ldi	r21, 0x44	; 68
    3a40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	88 a3       	std	Y+32, r24	; 0x20
    3a4a:	99 a3       	std	Y+33, r25	; 0x21
    3a4c:	aa a3       	std	Y+34, r26	; 0x22
    3a4e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3a50:	68 a1       	ldd	r22, Y+32	; 0x20
    3a52:	79 a1       	ldd	r23, Y+33	; 0x21
    3a54:	8a a1       	ldd	r24, Y+34	; 0x22
    3a56:	9b a1       	ldd	r25, Y+35	; 0x23
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a64:	88 23       	and	r24, r24
    3a66:	2c f4       	brge	.+10     	; 0x3a72 <Stepper_vidTurnOnRight+0x550>
		__ticks = 1;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9f 8f       	std	Y+31, r25	; 0x1f
    3a6e:	8e 8f       	std	Y+30, r24	; 0x1e
    3a70:	3f c0       	rjmp	.+126    	; 0x3af0 <Stepper_vidTurnOnRight+0x5ce>
	else if (__tmp > 65535)
    3a72:	68 a1       	ldd	r22, Y+32	; 0x20
    3a74:	79 a1       	ldd	r23, Y+33	; 0x21
    3a76:	8a a1       	ldd	r24, Y+34	; 0x22
    3a78:	9b a1       	ldd	r25, Y+35	; 0x23
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	3f ef       	ldi	r19, 0xFF	; 255
    3a7e:	4f e7       	ldi	r20, 0x7F	; 127
    3a80:	57 e4       	ldi	r21, 0x47	; 71
    3a82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a86:	18 16       	cp	r1, r24
    3a88:	4c f5       	brge	.+82     	; 0x3adc <Stepper_vidTurnOnRight+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8a:	6c a1       	ldd	r22, Y+36	; 0x24
    3a8c:	7d a1       	ldd	r23, Y+37	; 0x25
    3a8e:	8e a1       	ldd	r24, Y+38	; 0x26
    3a90:	9f a1       	ldd	r25, Y+39	; 0x27
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e2       	ldi	r20, 0x20	; 32
    3a98:	51 e4       	ldi	r21, 0x41	; 65
    3a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	9f 8f       	std	Y+31, r25	; 0x1f
    3ab0:	8e 8f       	std	Y+30, r24	; 0x1e
    3ab2:	0f c0       	rjmp	.+30     	; 0x3ad2 <Stepper_vidTurnOnRight+0x5b0>
    3ab4:	88 ec       	ldi	r24, 0xC8	; 200
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	9d 8f       	std	Y+29, r25	; 0x1d
    3aba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3abc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3abe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <Stepper_vidTurnOnRight+0x59e>
    3ac4:	9d 8f       	std	Y+29, r25	; 0x1d
    3ac6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	9f 8f       	std	Y+31, r25	; 0x1f
    3ad0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ad4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	69 f7       	brne	.-38     	; 0x3ab4 <Stepper_vidTurnOnRight+0x592>
    3ada:	24 c0       	rjmp	.+72     	; 0x3b24 <Stepper_vidTurnOnRight+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3adc:	68 a1       	ldd	r22, Y+32	; 0x20
    3ade:	79 a1       	ldd	r23, Y+33	; 0x21
    3ae0:	8a a1       	ldd	r24, Y+34	; 0x22
    3ae2:	9b a1       	ldd	r25, Y+35	; 0x23
    3ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	9f 8f       	std	Y+31, r25	; 0x1f
    3aee:	8e 8f       	std	Y+30, r24	; 0x1e
    3af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3af2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3af4:	9b 8f       	std	Y+27, r25	; 0x1b
    3af6:	8a 8f       	std	Y+26, r24	; 0x1a
    3af8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3afa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <Stepper_vidTurnOnRight+0x5da>
    3b00:	9b 8f       	std	Y+27, r25	; 0x1b
    3b02:	8a 8f       	std	Y+26, r24	; 0x1a
    3b04:	0f c0       	rjmp	.+30     	; 0x3b24 <Stepper_vidTurnOnRight+0x602>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b06:	69 a5       	ldd	r22, Y+41	; 0x29
    3b08:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	88 a7       	std	Y+40, r24	; 0x28
    3b18:	88 a5       	ldd	r24, Y+40	; 0x28
    3b1a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b1c:	89 8d       	ldd	r24, Y+25	; 0x19
    3b1e:	8a 95       	dec	r24
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <Stepper_vidTurnOnRight+0x5fc>
    3b22:	89 8f       	std	Y+25, r24	; 0x19
			_delay_us(1300);
			Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    3b34:	82 e0       	ldi	r24, 0x02	; 2
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8HIGH);
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	90 e8       	ldi	r25, 0x80	; 128
    3b48:	a2 ea       	ldi	r26, 0xA2	; 162
    3b4a:	b4 e4       	ldi	r27, 0x44	; 68
    3b4c:	8d 8b       	std	Y+21, r24	; 0x15
    3b4e:	9e 8b       	std	Y+22, r25	; 0x16
    3b50:	af 8b       	std	Y+23, r26	; 0x17
    3b52:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b54:	6d 89       	ldd	r22, Y+21	; 0x15
    3b56:	7e 89       	ldd	r23, Y+22	; 0x16
    3b58:	8f 89       	ldd	r24, Y+23	; 0x17
    3b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5c:	2b ea       	ldi	r18, 0xAB	; 171
    3b5e:	3a ea       	ldi	r19, 0xAA	; 170
    3b60:	4a e2       	ldi	r20, 0x2A	; 42
    3b62:	50 e4       	ldi	r21, 0x40	; 64
    3b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	89 8b       	std	Y+17, r24	; 0x11
    3b6e:	9a 8b       	std	Y+18, r25	; 0x12
    3b70:	ab 8b       	std	Y+19, r26	; 0x13
    3b72:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3b74:	69 89       	ldd	r22, Y+17	; 0x11
    3b76:	7a 89       	ldd	r23, Y+18	; 0x12
    3b78:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e8       	ldi	r20, 0x80	; 128
    3b82:	5f e3       	ldi	r21, 0x3F	; 63
    3b84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b88:	88 23       	and	r24, r24
    3b8a:	1c f4       	brge	.+6      	; 0x3b92 <Stepper_vidTurnOnRight+0x670>
		__ticks = 1;
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	88 8b       	std	Y+16, r24	; 0x10
    3b90:	91 c0       	rjmp	.+290    	; 0x3cb4 <Stepper_vidTurnOnRight+0x792>
	else if (__tmp > 255)
    3b92:	69 89       	ldd	r22, Y+17	; 0x11
    3b94:	7a 89       	ldd	r23, Y+18	; 0x12
    3b96:	8b 89       	ldd	r24, Y+19	; 0x13
    3b98:	9c 89       	ldd	r25, Y+20	; 0x14
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ba0:	53 e4       	ldi	r21, 0x43	; 67
    3ba2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ba6:	18 16       	cp	r1, r24
    3ba8:	0c f0       	brlt	.+2      	; 0x3bac <Stepper_vidTurnOnRight+0x68a>
    3baa:	7b c0       	rjmp	.+246    	; 0x3ca2 <Stepper_vidTurnOnRight+0x780>
	{
		_delay_ms(__us / 1000.0);
    3bac:	6d 89       	ldd	r22, Y+21	; 0x15
    3bae:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a e7       	ldi	r20, 0x7A	; 122
    3bba:	54 e4       	ldi	r21, 0x44	; 68
    3bbc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8c 87       	std	Y+12, r24	; 0x0c
    3bc6:	9d 87       	std	Y+13, r25	; 0x0d
    3bc8:	ae 87       	std	Y+14, r26	; 0x0e
    3bca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    3bce:	7d 85       	ldd	r23, Y+13	; 0x0d
    3bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	4a ef       	ldi	r20, 0xFA	; 250
    3bda:	54 e4       	ldi	r21, 0x44	; 68
    3bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	88 87       	std	Y+8, r24	; 0x08
    3be6:	99 87       	std	Y+9, r25	; 0x09
    3be8:	aa 87       	std	Y+10, r26	; 0x0a
    3bea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3bec:	68 85       	ldd	r22, Y+8	; 0x08
    3bee:	79 85       	ldd	r23, Y+9	; 0x09
    3bf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e8       	ldi	r20, 0x80	; 128
    3bfa:	5f e3       	ldi	r21, 0x3F	; 63
    3bfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c00:	88 23       	and	r24, r24
    3c02:	2c f4       	brge	.+10     	; 0x3c0e <Stepper_vidTurnOnRight+0x6ec>
		__ticks = 1;
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	9f 83       	std	Y+7, r25	; 0x07
    3c0a:	8e 83       	std	Y+6, r24	; 0x06
    3c0c:	3f c0       	rjmp	.+126    	; 0x3c8c <Stepper_vidTurnOnRight+0x76a>
	else if (__tmp > 65535)
    3c0e:	68 85       	ldd	r22, Y+8	; 0x08
    3c10:	79 85       	ldd	r23, Y+9	; 0x09
    3c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	3f ef       	ldi	r19, 0xFF	; 255
    3c1a:	4f e7       	ldi	r20, 0x7F	; 127
    3c1c:	57 e4       	ldi	r21, 0x47	; 71
    3c1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3c22:	18 16       	cp	r1, r24
    3c24:	4c f5       	brge	.+82     	; 0x3c78 <Stepper_vidTurnOnRight+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c26:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c28:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	40 e2       	ldi	r20, 0x20	; 32
    3c34:	51 e4       	ldi	r21, 0x41	; 65
    3c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	9f 83       	std	Y+7, r25	; 0x07
    3c4c:	8e 83       	std	Y+6, r24	; 0x06
    3c4e:	0f c0       	rjmp	.+30     	; 0x3c6e <Stepper_vidTurnOnRight+0x74c>
    3c50:	88 ec       	ldi	r24, 0xC8	; 200
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	9d 83       	std	Y+5, r25	; 0x05
    3c56:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c58:	8c 81       	ldd	r24, Y+4	; 0x04
    3c5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	f1 f7       	brne	.-4      	; 0x3c5c <Stepper_vidTurnOnRight+0x73a>
    3c60:	9d 83       	std	Y+5, r25	; 0x05
    3c62:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c64:	8e 81       	ldd	r24, Y+6	; 0x06
    3c66:	9f 81       	ldd	r25, Y+7	; 0x07
    3c68:	01 97       	sbiw	r24, 0x01	; 1
    3c6a:	9f 83       	std	Y+7, r25	; 0x07
    3c6c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c70:	9f 81       	ldd	r25, Y+7	; 0x07
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	69 f7       	brne	.-38     	; 0x3c50 <Stepper_vidTurnOnRight+0x72e>
    3c76:	24 c0       	rjmp	.+72     	; 0x3cc0 <Stepper_vidTurnOnRight+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c78:	68 85       	ldd	r22, Y+8	; 0x08
    3c7a:	79 85       	ldd	r23, Y+9	; 0x09
    3c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	9f 83       	std	Y+7, r25	; 0x07
    3c8a:	8e 83       	std	Y+6, r24	; 0x06
    3c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c90:	9b 83       	std	Y+3, r25	; 0x03
    3c92:	8a 83       	std	Y+2, r24	; 0x02
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <Stepper_vidTurnOnRight+0x776>
    3c9c:	9b 83       	std	Y+3, r25	; 0x03
    3c9e:	8a 83       	std	Y+2, r24	; 0x02
    3ca0:	0f c0       	rjmp	.+30     	; 0x3cc0 <Stepper_vidTurnOnRight+0x79e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ca2:	69 89       	ldd	r22, Y+17	; 0x11
    3ca4:	7a 89       	ldd	r23, Y+18	; 0x12
    3ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    3caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	88 8b       	std	Y+16, r24	; 0x10
    3cb4:	88 89       	ldd	r24, Y+16	; 0x10
    3cb6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	8a 95       	dec	r24
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <Stepper_vidTurnOnRight+0x798>
    3cbe:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(1300);

}
    3cc0:	c0 5a       	subi	r28, 0xA0	; 160
    3cc2:	df 4f       	sbci	r29, 0xFF	; 255
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	08 95       	ret

00003cd8 <Stepper_vidTurnOff>:
void Stepper_vidTurnOff(void)
{
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62

	       Dio_vidSetPinVal(DIO_u8PIN_0,DIO_u8LOW);
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_1,DIO_u8LOW);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_2,DIO_u8LOW);
    3cf0:	82 e0       	ldi	r24, 0x02	; 2
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
			Dio_vidSetPinVal(DIO_u8PIN_3,DIO_u8LOW);
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
}
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <Stepper_vidInit>:
void Stepper_vidInit(void)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(ULN2003_u8PIN_0,DIO_u8OUTPUT);
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	61 e0       	ldi	r22, 0x01	; 1
    3d12:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(ULN2003_u8PIN_1,DIO_u8OUTPUT);
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	61 e0       	ldi	r22, 0x01	; 1
    3d1a:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(ULN2003_u8PIN_2,DIO_u8OUTPUT);
    3d1e:	82 e0       	ldi	r24, 0x02	; 2
    3d20:	61 e0       	ldi	r22, 0x01	; 1
    3d22:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
	Dio_vidSetPinDir(ULN2003_u8PIN_3,DIO_u8OUTPUT);
    3d26:	83 e0       	ldi	r24, 0x03	; 3
    3d28:	61 e0       	ldi	r22, 0x01	; 1
    3d2a:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>
}
    3d2e:	cf 91       	pop	r28
    3d30:	df 91       	pop	r29
    3d32:	08 95       	ret

00003d34 <Bazz_vidTurn>:
#include <util/delay.h>
#include"Dio_int.h"
#include"secrt_int.h"

void Bazz_vidTurn(u8 secondtimeon,u8 secondtimeoff)
	{
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	6e 97       	sbiw	r28, 0x1e	; 30
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	8d 8f       	std	Y+29, r24	; 0x1d
    3d4a:	6e 8f       	std	Y+30, r22	; 0x1e

    Dio_vidSetPinVal(DIO_u8PIN_14 ,DIO_u8HIGH);
    3d4c:	8e e0       	ldi	r24, 0x0E	; 14
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		_delay_ms(secondtimeon*1000);
    3d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	88 ee       	ldi	r24, 0xE8	; 232
    3d5c:	93 e0       	ldi	r25, 0x03	; 3
    3d5e:	ac 01       	movw	r20, r24
    3d60:	24 9f       	mul	r18, r20
    3d62:	c0 01       	movw	r24, r0
    3d64:	25 9f       	mul	r18, r21
    3d66:	90 0d       	add	r25, r0
    3d68:	34 9f       	mul	r19, r20
    3d6a:	90 0d       	add	r25, r0
    3d6c:	11 24       	eor	r1, r1
    3d6e:	aa 27       	eor	r26, r26
    3d70:	97 fd       	sbrc	r25, 7
    3d72:	a0 95       	com	r26
    3d74:	ba 2f       	mov	r27, r26
    3d76:	bc 01       	movw	r22, r24
    3d78:	cd 01       	movw	r24, r26
    3d7a:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	89 8f       	std	Y+25, r24	; 0x19
    3d84:	9a 8f       	std	Y+26, r25	; 0x1a
    3d86:	ab 8f       	std	Y+27, r26	; 0x1b
    3d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	4a ef       	ldi	r20, 0xFA	; 250
    3d98:	54 e4       	ldi	r21, 0x44	; 68
    3d9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	8d 8b       	std	Y+21, r24	; 0x15
    3da4:	9e 8b       	std	Y+22, r25	; 0x16
    3da6:	af 8b       	std	Y+23, r26	; 0x17
    3da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3daa:	6d 89       	ldd	r22, Y+21	; 0x15
    3dac:	7e 89       	ldd	r23, Y+22	; 0x16
    3dae:	8f 89       	ldd	r24, Y+23	; 0x17
    3db0:	98 8d       	ldd	r25, Y+24	; 0x18
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	5f e3       	ldi	r21, 0x3F	; 63
    3dba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3dbe:	88 23       	and	r24, r24
    3dc0:	2c f4       	brge	.+10     	; 0x3dcc <Bazz_vidTurn+0x98>
		__ticks = 1;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	9c 8b       	std	Y+20, r25	; 0x14
    3dc8:	8b 8b       	std	Y+19, r24	; 0x13
    3dca:	3f c0       	rjmp	.+126    	; 0x3e4a <Bazz_vidTurn+0x116>
	else if (__tmp > 65535)
    3dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dce:	7e 89       	ldd	r23, Y+22	; 0x16
    3dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	3f ef       	ldi	r19, 0xFF	; 255
    3dd8:	4f e7       	ldi	r20, 0x7F	; 127
    3dda:	57 e4       	ldi	r21, 0x47	; 71
    3ddc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3de0:	18 16       	cp	r1, r24
    3de2:	4c f5       	brge	.+82     	; 0x3e36 <Bazz_vidTurn+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de4:	69 8d       	ldd	r22, Y+25	; 0x19
    3de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e2       	ldi	r20, 0x20	; 32
    3df2:	51 e4       	ldi	r21, 0x41	; 65
    3df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	9c 8b       	std	Y+20, r25	; 0x14
    3e0a:	8b 8b       	std	Y+19, r24	; 0x13
    3e0c:	0f c0       	rjmp	.+30     	; 0x3e2c <Bazz_vidTurn+0xf8>
    3e0e:	88 ec       	ldi	r24, 0xC8	; 200
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	9a 8b       	std	Y+18, r25	; 0x12
    3e14:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e16:	89 89       	ldd	r24, Y+17	; 0x11
    3e18:	9a 89       	ldd	r25, Y+18	; 0x12
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	f1 f7       	brne	.-4      	; 0x3e1a <Bazz_vidTurn+0xe6>
    3e1e:	9a 8b       	std	Y+18, r25	; 0x12
    3e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e22:	8b 89       	ldd	r24, Y+19	; 0x13
    3e24:	9c 89       	ldd	r25, Y+20	; 0x14
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	9c 8b       	std	Y+20, r25	; 0x14
    3e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	69 f7       	brne	.-38     	; 0x3e0e <Bazz_vidTurn+0xda>
    3e34:	14 c0       	rjmp	.+40     	; 0x3e5e <Bazz_vidTurn+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e36:	6d 89       	ldd	r22, Y+21	; 0x15
    3e38:	7e 89       	ldd	r23, Y+22	; 0x16
    3e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	9c 8b       	std	Y+20, r25	; 0x14
    3e48:	8b 8b       	std	Y+19, r24	; 0x13
    3e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e4e:	98 8b       	std	Y+16, r25	; 0x10
    3e50:	8f 87       	std	Y+15, r24	; 0x0f
    3e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e54:	98 89       	ldd	r25, Y+16	; 0x10
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <Bazz_vidTurn+0x122>
    3e5a:	98 8b       	std	Y+16, r25	; 0x10
    3e5c:	8f 87       	std	Y+15, r24	; 0x0f
		Dio_vidSetPinVal(DIO_u8PIN_14 ,DIO_u8LOW);
    3e5e:	8e e0       	ldi	r24, 0x0E	; 14
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Dio_vidSetPinVal>
		_delay_ms(secondtimeoff*1000);
    3e66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e68:	28 2f       	mov	r18, r24
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	88 ee       	ldi	r24, 0xE8	; 232
    3e6e:	93 e0       	ldi	r25, 0x03	; 3
    3e70:	ac 01       	movw	r20, r24
    3e72:	24 9f       	mul	r18, r20
    3e74:	c0 01       	movw	r24, r0
    3e76:	25 9f       	mul	r18, r21
    3e78:	90 0d       	add	r25, r0
    3e7a:	34 9f       	mul	r19, r20
    3e7c:	90 0d       	add	r25, r0
    3e7e:	11 24       	eor	r1, r1
    3e80:	aa 27       	eor	r26, r26
    3e82:	97 fd       	sbrc	r25, 7
    3e84:	a0 95       	com	r26
    3e86:	ba 2f       	mov	r27, r26
    3e88:	bc 01       	movw	r22, r24
    3e8a:	cd 01       	movw	r24, r26
    3e8c:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	8b 87       	std	Y+11, r24	; 0x0b
    3e96:	9c 87       	std	Y+12, r25	; 0x0c
    3e98:	ad 87       	std	Y+13, r26	; 0x0d
    3e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	4a ef       	ldi	r20, 0xFA	; 250
    3eaa:	54 e4       	ldi	r21, 0x44	; 68
    3eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	8f 83       	std	Y+7, r24	; 0x07
    3eb6:	98 87       	std	Y+8, r25	; 0x08
    3eb8:	a9 87       	std	Y+9, r26	; 0x09
    3eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ebe:	78 85       	ldd	r23, Y+8	; 0x08
    3ec0:	89 85       	ldd	r24, Y+9	; 0x09
    3ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e8       	ldi	r20, 0x80	; 128
    3eca:	5f e3       	ldi	r21, 0x3F	; 63
    3ecc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ed0:	88 23       	and	r24, r24
    3ed2:	2c f4       	brge	.+10     	; 0x3ede <Bazz_vidTurn+0x1aa>
		__ticks = 1;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	9e 83       	std	Y+6, r25	; 0x06
    3eda:	8d 83       	std	Y+5, r24	; 0x05
    3edc:	3f c0       	rjmp	.+126    	; 0x3f5c <Bazz_vidTurn+0x228>
	else if (__tmp > 65535)
    3ede:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee0:	78 85       	ldd	r23, Y+8	; 0x08
    3ee2:	89 85       	ldd	r24, Y+9	; 0x09
    3ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	3f ef       	ldi	r19, 0xFF	; 255
    3eea:	4f e7       	ldi	r20, 0x7F	; 127
    3eec:	57 e4       	ldi	r21, 0x47	; 71
    3eee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ef2:	18 16       	cp	r1, r24
    3ef4:	4c f5       	brge	.+82     	; 0x3f48 <Bazz_vidTurn+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e2       	ldi	r20, 0x20	; 32
    3f04:	51 e4       	ldi	r21, 0x41	; 65
    3f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	bc 01       	movw	r22, r24
    3f10:	cd 01       	movw	r24, r26
    3f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	9e 83       	std	Y+6, r25	; 0x06
    3f1c:	8d 83       	std	Y+5, r24	; 0x05
    3f1e:	0f c0       	rjmp	.+30     	; 0x3f3e <Bazz_vidTurn+0x20a>
    3f20:	88 ec       	ldi	r24, 0xC8	; 200
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	9c 83       	std	Y+4, r25	; 0x04
    3f26:	8b 83       	std	Y+3, r24	; 0x03
    3f28:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2c:	01 97       	sbiw	r24, 0x01	; 1
    3f2e:	f1 f7       	brne	.-4      	; 0x3f2c <Bazz_vidTurn+0x1f8>
    3f30:	9c 83       	std	Y+4, r25	; 0x04
    3f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f34:	8d 81       	ldd	r24, Y+5	; 0x05
    3f36:	9e 81       	ldd	r25, Y+6	; 0x06
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f40:	9e 81       	ldd	r25, Y+6	; 0x06
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	69 f7       	brne	.-38     	; 0x3f20 <Bazz_vidTurn+0x1ec>
    3f46:	14 c0       	rjmp	.+40     	; 0x3f70 <Bazz_vidTurn+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f48:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4a:	78 85       	ldd	r23, Y+8	; 0x08
    3f4c:	89 85       	ldd	r24, Y+9	; 0x09
    3f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	9e 83       	std	Y+6, r25	; 0x06
    3f5a:	8d 83       	std	Y+5, r24	; 0x05
    3f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f60:	9a 83       	std	Y+2, r25	; 0x02
    3f62:	89 83       	std	Y+1, r24	; 0x01
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	9a 81       	ldd	r25, Y+2	; 0x02
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	f1 f7       	brne	.-4      	; 0x3f68 <Bazz_vidTurn+0x234>
    3f6c:	9a 83       	std	Y+2, r25	; 0x02
    3f6e:	89 83       	std	Y+1, r24	; 0x01

	}
    3f70:	6e 96       	adiw	r28, 0x1e	; 30
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	cf 91       	pop	r28
    3f7e:	df 91       	pop	r29
    3f80:	08 95       	ret

00003f82 <main>:
#include"Stepper_int.h"
#undef F_CPU
#define F_CPU 8000000
#include <util/delay.h>
int main(void)
{
    3f82:	df 93       	push	r29
    3f84:	cf 93       	push	r28
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
    3f8a:	c7 55       	subi	r28, 0x57	; 87
    3f8c:	d0 40       	sbci	r29, 0x00	; 0
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
	u8 IDch;
	Keypad_vidInit(); //intialize
    3f98:	0e 94 43 09 	call	0x1286	; 0x1286 <Keypad_vidInit>
	u8 user[3];
	u8 key ;
	u8 mflag ;
	Stepper_vidInit();//dol kano any bkhly d5l al daling output
    3f9c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <Stepper_vidInit>
	//dol kano any bkhly d5l al daling output
	Dio_vidSetPinDir(DIO_u8PIN_14 ,DIO_u8OUTPUT);
    3fa0:	8e e0       	ldi	r24, 0x0E	; 14
    3fa2:	61 e0       	ldi	r22, 0x01	; 1
    3fa4:	0e 94 6d 07 	call	0xeda	; 0xeda <Dio_vidSetPinDir>

	while(1)
	{IDch=0;
    3fa8:	18 86       	std	Y+8, r1	; 0x08
	mflag=0;
    3faa:	1e 82       	std	Y+6, r1	; 0x06
    3fac:	aa c1       	rjmp	.+852    	; 0x4302 <main+0x380>
	while(mflag==0)
	{Lcd_vidInit();
    3fae:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Lcd_vidInit>
	u8 i;
	u8 arr[8]="UserID:";
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	0c 96       	adiw	r24, 0x0c	; 12
    3fb6:	26 96       	adiw	r28, 0x06	; 6
    3fb8:	9f af       	std	Y+63, r25	; 0x3f
    3fba:	8e af       	std	Y+62, r24	; 0x3e
    3fbc:	26 97       	sbiw	r28, 0x06	; 6
    3fbe:	e0 e6       	ldi	r30, 0x60	; 96
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	28 96       	adiw	r28, 0x08	; 8
    3fc4:	ff af       	std	Y+63, r31	; 0x3f
    3fc6:	ee af       	std	Y+62, r30	; 0x3e
    3fc8:	28 97       	sbiw	r28, 0x08	; 8
    3fca:	f8 e0       	ldi	r31, 0x08	; 8
    3fcc:	29 96       	adiw	r28, 0x09	; 9
    3fce:	ff af       	std	Y+63, r31	; 0x3f
    3fd0:	29 97       	sbiw	r28, 0x09	; 9
    3fd2:	28 96       	adiw	r28, 0x08	; 8
    3fd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    3fd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    3fd8:	28 97       	sbiw	r28, 0x08	; 8
    3fda:	00 80       	ld	r0, Z
    3fdc:	28 96       	adiw	r28, 0x08	; 8
    3fde:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fe0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fe2:	28 97       	sbiw	r28, 0x08	; 8
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	28 96       	adiw	r28, 0x08	; 8
    3fe8:	9f af       	std	Y+63, r25	; 0x3f
    3fea:	8e af       	std	Y+62, r24	; 0x3e
    3fec:	28 97       	sbiw	r28, 0x08	; 8
    3fee:	26 96       	adiw	r28, 0x06	; 6
    3ff0:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ff2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ff4:	26 97       	sbiw	r28, 0x06	; 6
    3ff6:	00 82       	st	Z, r0
    3ff8:	26 96       	adiw	r28, 0x06	; 6
    3ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ffe:	26 97       	sbiw	r28, 0x06	; 6
    4000:	01 96       	adiw	r24, 0x01	; 1
    4002:	26 96       	adiw	r28, 0x06	; 6
    4004:	9f af       	std	Y+63, r25	; 0x3f
    4006:	8e af       	std	Y+62, r24	; 0x3e
    4008:	26 97       	sbiw	r28, 0x06	; 6
    400a:	29 96       	adiw	r28, 0x09	; 9
    400c:	9f ad       	ldd	r25, Y+63	; 0x3f
    400e:	29 97       	sbiw	r28, 0x09	; 9
    4010:	91 50       	subi	r25, 0x01	; 1
    4012:	29 96       	adiw	r28, 0x09	; 9
    4014:	9f af       	std	Y+63, r25	; 0x3f
    4016:	29 97       	sbiw	r28, 0x09	; 9
    4018:	29 96       	adiw	r28, 0x09	; 9
    401a:	ef ad       	ldd	r30, Y+63	; 0x3f
    401c:	29 97       	sbiw	r28, 0x09	; 9
    401e:	ee 23       	and	r30, r30
    4020:	c1 f6       	brne	.-80     	; 0x3fd2 <main+0x50>
	for(u8 in=0;in<7;in++)
    4022:	1c 82       	std	Y+4, r1	; 0x04
    4024:	0e c0       	rjmp	.+28     	; 0x4042 <main+0xc0>
	{
		Lcd_vidWriteChar(arr[in]);
    4026:	8c 81       	ldd	r24, Y+4	; 0x04
    4028:	28 2f       	mov	r18, r24
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	ce 01       	movw	r24, r28
    402e:	0c 96       	adiw	r24, 0x0c	; 12
    4030:	fc 01       	movw	r30, r24
    4032:	e2 0f       	add	r30, r18
    4034:	f3 1f       	adc	r31, r19
    4036:	80 81       	ld	r24, Z
    4038:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	mflag=0;
	while(mflag==0)
	{Lcd_vidInit();
	u8 i;
	u8 arr[8]="UserID:";
	for(u8 in=0;in<7;in++)
    403c:	8c 81       	ldd	r24, Y+4	; 0x04
    403e:	8f 5f       	subi	r24, 0xFF	; 255
    4040:	8c 83       	std	Y+4, r24	; 0x04
    4042:	8c 81       	ldd	r24, Y+4	; 0x04
    4044:	87 30       	cpi	r24, 0x07	; 7
    4046:	78 f3       	brcs	.-34     	; 0x4026 <main+0xa4>
	{
		Lcd_vidWriteChar(arr[in]);
	}

	Lcd_vidSendCommand(0x88);
    4048:	88 e8       	ldi	r24, 0x88	; 136
    404a:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	for(i=0;i<=3 ;i++)
    404e:	1d 82       	std	Y+5, r1	; 0x05
    4050:	1a c0       	rjmp	.+52     	; 0x4086 <main+0x104>
	{
		key =Keypad_u8GetConstKey();
    4052:	0e 94 6d 0a 	call	0x14da	; 0x14da <Keypad_u8GetConstKey>
    4056:	8f 83       	std	Y+7, r24	; 0x07
		if(key=='#')
    4058:	8f 81       	ldd	r24, Y+7	; 0x07
    405a:	83 32       	cpi	r24, 0x23	; 35
    405c:	19 f4       	brne	.+6      	; 0x4064 <main+0xe2>
		{i=4;
    405e:	84 e0       	ldi	r24, 0x04	; 4
    4060:	8d 83       	std	Y+5, r24	; 0x05
    4062:	0e c0       	rjmp	.+28     	; 0x4080 <main+0xfe>
		}
		else
		{
	Lcd_vidWriteChar(key+'0');
    4064:	8f 81       	ldd	r24, Y+7	; 0x07
    4066:	80 5d       	subi	r24, 0xD0	; 208
    4068:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	user[i]=key;
    406c:	8d 81       	ldd	r24, Y+5	; 0x05
    406e:	28 2f       	mov	r18, r24
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	ce 01       	movw	r24, r28
    4074:	09 96       	adiw	r24, 0x09	; 9
    4076:	fc 01       	movw	r30, r24
    4078:	e2 0f       	add	r30, r18
    407a:	f3 1f       	adc	r31, r19
    407c:	8f 81       	ldd	r24, Y+7	; 0x07
    407e:	80 83       	st	Z, r24
	{
		Lcd_vidWriteChar(arr[in]);
	}

	Lcd_vidSendCommand(0x88);
	for(i=0;i<=3 ;i++)
    4080:	8d 81       	ldd	r24, Y+5	; 0x05
    4082:	8f 5f       	subi	r24, 0xFF	; 255
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	8d 81       	ldd	r24, Y+5	; 0x05
    4088:	84 30       	cpi	r24, 0x04	; 4
    408a:	18 f3       	brcs	.-58     	; 0x4052 <main+0xd0>
    408c:	03 c0       	rjmp	.+6      	; 0x4094 <main+0x112>
	user[i]=key;
		}
	}
	while(key!='#')
	{
		key =Keypad_u8GetConstKey();
    408e:	0e 94 6d 0a 	call	0x14da	; 0x14da <Keypad_u8GetConstKey>
    4092:	8f 83       	std	Y+7, r24	; 0x07
		{
	Lcd_vidWriteChar(key+'0');
	user[i]=key;
		}
	}
	while(key!='#')
    4094:	8f 81       	ldd	r24, Y+7	; 0x07
    4096:	83 32       	cpi	r24, 0x23	; 35
    4098:	d1 f7       	brne	.-12     	; 0x408e <main+0x10c>
	{
		key =Keypad_u8GetConstKey();
	}
	if(user[0] == 0 && user[1] ==0 && user[2]==0 &&user[3]==0)
    409a:	89 85       	ldd	r24, Y+9	; 0x09
    409c:	88 23       	and	r24, r24
    409e:	89 f4       	brne	.+34     	; 0x40c2 <main+0x140>
    40a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a2:	88 23       	and	r24, r24
    40a4:	71 f4       	brne	.+28     	; 0x40c2 <main+0x140>
    40a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    40a8:	88 23       	and	r24, r24
    40aa:	59 f4       	brne	.+22     	; 0x40c2 <main+0x140>
    40ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    40ae:	88 23       	and	r24, r24
    40b0:	41 f4       	brne	.+16     	; 0x40c2 <main+0x140>
	{IDch =0;
    40b2:	18 86       	std	Y+8, r1	; 0x08
	check_pas(0);
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <check_pas>
	mflag++;
    40ba:	8e 81       	ldd	r24, Y+6	; 0x06
    40bc:	8f 5f       	subi	r24, 0xFF	; 255
    40be:	8e 83       	std	Y+6, r24	; 0x06
    40c0:	7c c0       	rjmp	.+248    	; 0x41ba <main+0x238>
	}
	else if(user[0] == 1 && user[1] ==1 && user[2]==1 &&user[3]==1)
    40c2:	89 85       	ldd	r24, Y+9	; 0x09
    40c4:	81 30       	cpi	r24, 0x01	; 1
    40c6:	89 f4       	brne	.+34     	; 0x40ea <main+0x168>
    40c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	71 f4       	brne	.+28     	; 0x40ea <main+0x168>
    40ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    40d0:	81 30       	cpi	r24, 0x01	; 1
    40d2:	59 f4       	brne	.+22     	; 0x40ea <main+0x168>
    40d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    40d6:	81 30       	cpi	r24, 0x01	; 1
    40d8:	41 f4       	brne	.+16     	; 0x40ea <main+0x168>
	{IDch=0;
    40da:	18 86       	std	Y+8, r1	; 0x08
	check_pas(1);
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <check_pas>
	mflag++;
    40e2:	8e 81       	ldd	r24, Y+6	; 0x06
    40e4:	8f 5f       	subi	r24, 0xFF	; 255
    40e6:	8e 83       	std	Y+6, r24	; 0x06
    40e8:	68 c0       	rjmp	.+208    	; 0x41ba <main+0x238>
	}
	else if(user[0] == 2 && user[1] ==2 && user[2]==2 &&user[3]==2)
    40ea:	89 85       	ldd	r24, Y+9	; 0x09
    40ec:	82 30       	cpi	r24, 0x02	; 2
    40ee:	89 f4       	brne	.+34     	; 0x4112 <main+0x190>
    40f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40f2:	82 30       	cpi	r24, 0x02	; 2
    40f4:	71 f4       	brne	.+28     	; 0x4112 <main+0x190>
    40f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    40f8:	82 30       	cpi	r24, 0x02	; 2
    40fa:	59 f4       	brne	.+22     	; 0x4112 <main+0x190>
    40fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    40fe:	82 30       	cpi	r24, 0x02	; 2
    4100:	41 f4       	brne	.+16     	; 0x4112 <main+0x190>
	{IDch=0;
    4102:	18 86       	std	Y+8, r1	; 0x08
	check_pas(2);
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <check_pas>
	mflag++;
    410a:	8e 81       	ldd	r24, Y+6	; 0x06
    410c:	8f 5f       	subi	r24, 0xFF	; 255
    410e:	8e 83       	std	Y+6, r24	; 0x06
    4110:	54 c0       	rjmp	.+168    	; 0x41ba <main+0x238>
	}
	else
	{
		Lcd_vidInit();
    4112:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Lcd_vidInit>
		u8 a[16]="invalid user ID";
    4116:	ce 01       	movw	r24, r28
    4118:	44 96       	adiw	r24, 0x14	; 20
    411a:	2b 96       	adiw	r28, 0x0b	; 11
    411c:	9f af       	std	Y+63, r25	; 0x3f
    411e:	8e af       	std	Y+62, r24	; 0x3e
    4120:	2b 97       	sbiw	r28, 0x0b	; 11
    4122:	e8 e6       	ldi	r30, 0x68	; 104
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	2d 96       	adiw	r28, 0x0d	; 13
    4128:	ff af       	std	Y+63, r31	; 0x3f
    412a:	ee af       	std	Y+62, r30	; 0x3e
    412c:	2d 97       	sbiw	r28, 0x0d	; 13
    412e:	f0 e1       	ldi	r31, 0x10	; 16
    4130:	2e 96       	adiw	r28, 0x0e	; 14
    4132:	ff af       	std	Y+63, r31	; 0x3f
    4134:	2e 97       	sbiw	r28, 0x0e	; 14
    4136:	2d 96       	adiw	r28, 0x0d	; 13
    4138:	ee ad       	ldd	r30, Y+62	; 0x3e
    413a:	ff ad       	ldd	r31, Y+63	; 0x3f
    413c:	2d 97       	sbiw	r28, 0x0d	; 13
    413e:	00 80       	ld	r0, Z
    4140:	2d 96       	adiw	r28, 0x0d	; 13
    4142:	8e ad       	ldd	r24, Y+62	; 0x3e
    4144:	9f ad       	ldd	r25, Y+63	; 0x3f
    4146:	2d 97       	sbiw	r28, 0x0d	; 13
    4148:	01 96       	adiw	r24, 0x01	; 1
    414a:	2d 96       	adiw	r28, 0x0d	; 13
    414c:	9f af       	std	Y+63, r25	; 0x3f
    414e:	8e af       	std	Y+62, r24	; 0x3e
    4150:	2d 97       	sbiw	r28, 0x0d	; 13
    4152:	2b 96       	adiw	r28, 0x0b	; 11
    4154:	ee ad       	ldd	r30, Y+62	; 0x3e
    4156:	ff ad       	ldd	r31, Y+63	; 0x3f
    4158:	2b 97       	sbiw	r28, 0x0b	; 11
    415a:	00 82       	st	Z, r0
    415c:	2b 96       	adiw	r28, 0x0b	; 11
    415e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4160:	9f ad       	ldd	r25, Y+63	; 0x3f
    4162:	2b 97       	sbiw	r28, 0x0b	; 11
    4164:	01 96       	adiw	r24, 0x01	; 1
    4166:	2b 96       	adiw	r28, 0x0b	; 11
    4168:	9f af       	std	Y+63, r25	; 0x3f
    416a:	8e af       	std	Y+62, r24	; 0x3e
    416c:	2b 97       	sbiw	r28, 0x0b	; 11
    416e:	2e 96       	adiw	r28, 0x0e	; 14
    4170:	9f ad       	ldd	r25, Y+63	; 0x3f
    4172:	2e 97       	sbiw	r28, 0x0e	; 14
    4174:	91 50       	subi	r25, 0x01	; 1
    4176:	2e 96       	adiw	r28, 0x0e	; 14
    4178:	9f af       	std	Y+63, r25	; 0x3f
    417a:	2e 97       	sbiw	r28, 0x0e	; 14
    417c:	2e 96       	adiw	r28, 0x0e	; 14
    417e:	ef ad       	ldd	r30, Y+63	; 0x3f
    4180:	2e 97       	sbiw	r28, 0x0e	; 14
    4182:	ee 23       	and	r30, r30
    4184:	c1 f6       	brne	.-80     	; 0x4136 <main+0x1b4>
		for(u8 in=0;in<15;in++)
    4186:	1b 82       	std	Y+3, r1	; 0x03
    4188:	0e c0       	rjmp	.+28     	; 0x41a6 <main+0x224>
		{
			Lcd_vidWriteChar(a[in]);
    418a:	8b 81       	ldd	r24, Y+3	; 0x03
    418c:	28 2f       	mov	r18, r24
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	ce 01       	movw	r24, r28
    4192:	44 96       	adiw	r24, 0x14	; 20
    4194:	fc 01       	movw	r30, r24
    4196:	e2 0f       	add	r30, r18
    4198:	f3 1f       	adc	r31, r19
    419a:	80 81       	ld	r24, Z
    419c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	}
	else
	{
		Lcd_vidInit();
		u8 a[16]="invalid user ID";
		for(u8 in=0;in<15;in++)
    41a0:	8b 81       	ldd	r24, Y+3	; 0x03
    41a2:	8f 5f       	subi	r24, 0xFF	; 255
    41a4:	8b 83       	std	Y+3, r24	; 0x03
    41a6:	8b 81       	ldd	r24, Y+3	; 0x03
    41a8:	8f 30       	cpi	r24, 0x0F	; 15
    41aa:	78 f3       	brcs	.-34     	; 0x418a <main+0x208>
		{
			Lcd_vidWriteChar(a[in]);
		}
		Bazz_vidTurn(2,0 );
    41ac:	82 e0       	ldi	r24, 0x02	; 2
    41ae:	60 e0       	ldi	r22, 0x00	; 0
    41b0:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <Bazz_vidTurn>
		IDch++;
    41b4:	88 85       	ldd	r24, Y+8	; 0x08
    41b6:	8f 5f       	subi	r24, 0xFF	; 255
    41b8:	88 87       	std	Y+8, r24	; 0x08

	}
	if(IDch==3)
    41ba:	88 85       	ldd	r24, Y+8	; 0x08
    41bc:	83 30       	cpi	r24, 0x03	; 3
    41be:	09 f0       	breq	.+2      	; 0x41c2 <main+0x240>
    41c0:	a0 c0       	rjmp	.+320    	; 0x4302 <main+0x380>
	{Lcd_vidInit();
    41c2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Lcd_vidInit>
	u8 arr[19]="invalid ID 3 times";
    41c6:	ce 01       	movw	r24, r28
    41c8:	84 96       	adiw	r24, 0x24	; 36
    41ca:	60 96       	adiw	r28, 0x10	; 16
    41cc:	9f af       	std	Y+63, r25	; 0x3f
    41ce:	8e af       	std	Y+62, r24	; 0x3e
    41d0:	60 97       	sbiw	r28, 0x10	; 16
    41d2:	e8 e7       	ldi	r30, 0x78	; 120
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	62 96       	adiw	r28, 0x12	; 18
    41d8:	ff af       	std	Y+63, r31	; 0x3f
    41da:	ee af       	std	Y+62, r30	; 0x3e
    41dc:	62 97       	sbiw	r28, 0x12	; 18
    41de:	f3 e1       	ldi	r31, 0x13	; 19
    41e0:	63 96       	adiw	r28, 0x13	; 19
    41e2:	ff af       	std	Y+63, r31	; 0x3f
    41e4:	63 97       	sbiw	r28, 0x13	; 19
    41e6:	62 96       	adiw	r28, 0x12	; 18
    41e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    41ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    41ec:	62 97       	sbiw	r28, 0x12	; 18
    41ee:	00 80       	ld	r0, Z
    41f0:	62 96       	adiw	r28, 0x12	; 18
    41f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    41f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    41f6:	62 97       	sbiw	r28, 0x12	; 18
    41f8:	01 96       	adiw	r24, 0x01	; 1
    41fa:	62 96       	adiw	r28, 0x12	; 18
    41fc:	9f af       	std	Y+63, r25	; 0x3f
    41fe:	8e af       	std	Y+62, r24	; 0x3e
    4200:	62 97       	sbiw	r28, 0x12	; 18
    4202:	60 96       	adiw	r28, 0x10	; 16
    4204:	ee ad       	ldd	r30, Y+62	; 0x3e
    4206:	ff ad       	ldd	r31, Y+63	; 0x3f
    4208:	60 97       	sbiw	r28, 0x10	; 16
    420a:	00 82       	st	Z, r0
    420c:	60 96       	adiw	r28, 0x10	; 16
    420e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4210:	9f ad       	ldd	r25, Y+63	; 0x3f
    4212:	60 97       	sbiw	r28, 0x10	; 16
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	60 96       	adiw	r28, 0x10	; 16
    4218:	9f af       	std	Y+63, r25	; 0x3f
    421a:	8e af       	std	Y+62, r24	; 0x3e
    421c:	60 97       	sbiw	r28, 0x10	; 16
    421e:	63 96       	adiw	r28, 0x13	; 19
    4220:	9f ad       	ldd	r25, Y+63	; 0x3f
    4222:	63 97       	sbiw	r28, 0x13	; 19
    4224:	91 50       	subi	r25, 0x01	; 1
    4226:	63 96       	adiw	r28, 0x13	; 19
    4228:	9f af       	std	Y+63, r25	; 0x3f
    422a:	63 97       	sbiw	r28, 0x13	; 19
    422c:	63 96       	adiw	r28, 0x13	; 19
    422e:	ef ad       	ldd	r30, Y+63	; 0x3f
    4230:	63 97       	sbiw	r28, 0x13	; 19
    4232:	ee 23       	and	r30, r30
    4234:	c1 f6       	brne	.-80     	; 0x41e6 <main+0x264>
	for(u8 in=0;in<18;in++)
    4236:	1a 82       	std	Y+2, r1	; 0x02
    4238:	0e c0       	rjmp	.+28     	; 0x4256 <main+0x2d4>
	{
		Lcd_vidWriteChar(arr[in]);
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	28 2f       	mov	r18, r24
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	ce 01       	movw	r24, r28
    4242:	84 96       	adiw	r24, 0x24	; 36
    4244:	fc 01       	movw	r30, r24
    4246:	e2 0f       	add	r30, r18
    4248:	f3 1f       	adc	r31, r19
    424a:	80 81       	ld	r24, Z
    424c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>

	}
	if(IDch==3)
	{Lcd_vidInit();
	u8 arr[19]="invalid ID 3 times";
	for(u8 in=0;in<18;in++)
    4250:	8a 81       	ldd	r24, Y+2	; 0x02
    4252:	8f 5f       	subi	r24, 0xFF	; 255
    4254:	8a 83       	std	Y+2, r24	; 0x02
    4256:	8a 81       	ldd	r24, Y+2	; 0x02
    4258:	82 31       	cpi	r24, 0x12	; 18
    425a:	78 f3       	brcs	.-34     	; 0x423a <main+0x2b8>
	{
		Lcd_vidWriteChar(arr[in]);
	}
	Lcd_vidSendCommand(0xc0);
    425c:	80 ec       	ldi	r24, 0xC0	; 192
    425e:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	u8 arr1[13]="System close";
    4262:	ce 01       	movw	r24, r28
    4264:	c7 96       	adiw	r24, 0x37	; 55
    4266:	65 96       	adiw	r28, 0x15	; 21
    4268:	9f af       	std	Y+63, r25	; 0x3f
    426a:	8e af       	std	Y+62, r24	; 0x3e
    426c:	65 97       	sbiw	r28, 0x15	; 21
    426e:	eb e8       	ldi	r30, 0x8B	; 139
    4270:	f0 e0       	ldi	r31, 0x00	; 0
    4272:	67 96       	adiw	r28, 0x17	; 23
    4274:	ff af       	std	Y+63, r31	; 0x3f
    4276:	ee af       	std	Y+62, r30	; 0x3e
    4278:	67 97       	sbiw	r28, 0x17	; 23
    427a:	fd e0       	ldi	r31, 0x0D	; 13
    427c:	68 96       	adiw	r28, 0x18	; 24
    427e:	ff af       	std	Y+63, r31	; 0x3f
    4280:	68 97       	sbiw	r28, 0x18	; 24
    4282:	67 96       	adiw	r28, 0x17	; 23
    4284:	ee ad       	ldd	r30, Y+62	; 0x3e
    4286:	ff ad       	ldd	r31, Y+63	; 0x3f
    4288:	67 97       	sbiw	r28, 0x17	; 23
    428a:	00 80       	ld	r0, Z
    428c:	67 96       	adiw	r28, 0x17	; 23
    428e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4290:	9f ad       	ldd	r25, Y+63	; 0x3f
    4292:	67 97       	sbiw	r28, 0x17	; 23
    4294:	01 96       	adiw	r24, 0x01	; 1
    4296:	67 96       	adiw	r28, 0x17	; 23
    4298:	9f af       	std	Y+63, r25	; 0x3f
    429a:	8e af       	std	Y+62, r24	; 0x3e
    429c:	67 97       	sbiw	r28, 0x17	; 23
    429e:	65 96       	adiw	r28, 0x15	; 21
    42a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    42a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    42a4:	65 97       	sbiw	r28, 0x15	; 21
    42a6:	00 82       	st	Z, r0
    42a8:	65 96       	adiw	r28, 0x15	; 21
    42aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    42ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    42ae:	65 97       	sbiw	r28, 0x15	; 21
    42b0:	01 96       	adiw	r24, 0x01	; 1
    42b2:	65 96       	adiw	r28, 0x15	; 21
    42b4:	9f af       	std	Y+63, r25	; 0x3f
    42b6:	8e af       	std	Y+62, r24	; 0x3e
    42b8:	65 97       	sbiw	r28, 0x15	; 21
    42ba:	68 96       	adiw	r28, 0x18	; 24
    42bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    42be:	68 97       	sbiw	r28, 0x18	; 24
    42c0:	91 50       	subi	r25, 0x01	; 1
    42c2:	68 96       	adiw	r28, 0x18	; 24
    42c4:	9f af       	std	Y+63, r25	; 0x3f
    42c6:	68 97       	sbiw	r28, 0x18	; 24
    42c8:	68 96       	adiw	r28, 0x18	; 24
    42ca:	ef ad       	ldd	r30, Y+63	; 0x3f
    42cc:	68 97       	sbiw	r28, 0x18	; 24
    42ce:	ee 23       	and	r30, r30
    42d0:	c1 f6       	brne	.-80     	; 0x4282 <main+0x300>
		for(u8 in=0;in<12;in++)
    42d2:	19 82       	std	Y+1, r1	; 0x01
    42d4:	0e c0       	rjmp	.+28     	; 0x42f2 <main+0x370>
		{
			Lcd_vidWriteChar(arr1[in]);
    42d6:	89 81       	ldd	r24, Y+1	; 0x01
    42d8:	28 2f       	mov	r18, r24
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	ce 01       	movw	r24, r28
    42de:	c7 96       	adiw	r24, 0x37	; 55
    42e0:	fc 01       	movw	r30, r24
    42e2:	e2 0f       	add	r30, r18
    42e4:	f3 1f       	adc	r31, r19
    42e6:	80 81       	ld	r24, Z
    42e8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	{
		Lcd_vidWriteChar(arr[in]);
	}
	Lcd_vidSendCommand(0xc0);
	u8 arr1[13]="System close";
		for(u8 in=0;in<12;in++)
    42ec:	89 81       	ldd	r24, Y+1	; 0x01
    42ee:	8f 5f       	subi	r24, 0xFF	; 255
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	8c 30       	cpi	r24, 0x0C	; 12
    42f6:	78 f3       	brcs	.-34     	; 0x42d6 <main+0x354>
		{
			Lcd_vidWriteChar(arr1[in]);
		}

	while(1){Bazz_vidTurn(2,1 );}
    42f8:	82 e0       	ldi	r24, 0x02	; 2
    42fa:	61 e0       	ldi	r22, 0x01	; 1
    42fc:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <Bazz_vidTurn>
    4300:	fb cf       	rjmp	.-10     	; 0x42f8 <main+0x376>
	Dio_vidSetPinDir(DIO_u8PIN_14 ,DIO_u8OUTPUT);

	while(1)
	{IDch=0;
	mflag=0;
	while(mflag==0)
    4302:	8e 81       	ldd	r24, Y+6	; 0x06
    4304:	88 23       	and	r24, r24
    4306:	09 f4       	brne	.+2      	; 0x430a <main+0x388>
    4308:	52 ce       	rjmp	.-860    	; 0x3fae <main+0x2c>
    430a:	4e ce       	rjmp	.-868    	; 0x3fa8 <main+0x26>

0000430c <welcome>:

}
	return 0;
}
void welcome(void)
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	2e 97       	sbiw	r28, 0x0e	; 14
    4316:	0f b6       	in	r0, 0x3f	; 63
    4318:	f8 94       	cli
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	0f be       	out	0x3f, r0	; 63
    431e:	cd bf       	out	0x3d, r28	; 61
	Lcd_vidInit();
    4320:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Lcd_vidInit>
	Lcd_vidSendCommand(0x85);
    4324:	85 e8       	ldi	r24, 0x85	; 133
    4326:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	u8 arrr[8]="Welcome";
    432a:	ce 01       	movw	r24, r28
    432c:	02 96       	adiw	r24, 0x02	; 2
    432e:	9b 87       	std	Y+11, r25	; 0x0b
    4330:	8a 87       	std	Y+10, r24	; 0x0a
    4332:	e8 e9       	ldi	r30, 0x98	; 152
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	fd 87       	std	Y+13, r31	; 0x0d
    4338:	ec 87       	std	Y+12, r30	; 0x0c
    433a:	f8 e0       	ldi	r31, 0x08	; 8
    433c:	fe 87       	std	Y+14, r31	; 0x0e
    433e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4340:	fd 85       	ldd	r31, Y+13	; 0x0d
    4342:	00 80       	ld	r0, Z
    4344:	8c 85       	ldd	r24, Y+12	; 0x0c
    4346:	9d 85       	ldd	r25, Y+13	; 0x0d
    4348:	01 96       	adiw	r24, 0x01	; 1
    434a:	9d 87       	std	Y+13, r25	; 0x0d
    434c:	8c 87       	std	Y+12, r24	; 0x0c
    434e:	ea 85       	ldd	r30, Y+10	; 0x0a
    4350:	fb 85       	ldd	r31, Y+11	; 0x0b
    4352:	00 82       	st	Z, r0
    4354:	8a 85       	ldd	r24, Y+10	; 0x0a
    4356:	9b 85       	ldd	r25, Y+11	; 0x0b
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	9b 87       	std	Y+11, r25	; 0x0b
    435c:	8a 87       	std	Y+10, r24	; 0x0a
    435e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4360:	91 50       	subi	r25, 0x01	; 1
    4362:	9e 87       	std	Y+14, r25	; 0x0e
    4364:	ee 85       	ldd	r30, Y+14	; 0x0e
    4366:	ee 23       	and	r30, r30
    4368:	51 f7       	brne	.-44     	; 0x433e <welcome+0x32>
	for(u8 in=0;in<7;in++)
    436a:	19 82       	std	Y+1, r1	; 0x01
    436c:	0e c0       	rjmp	.+28     	; 0x438a <welcome+0x7e>
	{
		Lcd_vidWriteChar(arrr[in]);
    436e:	89 81       	ldd	r24, Y+1	; 0x01
    4370:	28 2f       	mov	r18, r24
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	ce 01       	movw	r24, r28
    4376:	02 96       	adiw	r24, 0x02	; 2
    4378:	fc 01       	movw	r30, r24
    437a:	e2 0f       	add	r30, r18
    437c:	f3 1f       	adc	r31, r19
    437e:	80 81       	ld	r24, Z
    4380:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
void welcome(void)
{
	Lcd_vidInit();
	Lcd_vidSendCommand(0x85);
	u8 arrr[8]="Welcome";
	for(u8 in=0;in<7;in++)
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	8f 5f       	subi	r24, 0xFF	; 255
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	87 30       	cpi	r24, 0x07	; 7
    438e:	78 f3       	brcs	.-34     	; 0x436e <welcome+0x62>
	{
		Lcd_vidWriteChar(arrr[in]);
	}

}
    4390:	2e 96       	adiw	r28, 0x0e	; 14
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	cf 91       	pop	r28
    439e:	df 91       	pop	r29
    43a0:	08 95       	ret

000043a2 <check_pas>:



void check_pas(u8 ID)
{  u8 pwch=0;
    43a2:	df 93       	push	r29
    43a4:	cf 93       	push	r28
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
    43aa:	c4 58       	subi	r28, 0x84	; 132
    43ac:	d0 40       	sbci	r29, 0x00	; 0
    43ae:	0f b6       	in	r0, 0x3f	; 63
    43b0:	f8 94       	cli
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	0f be       	out	0x3f, r0	; 63
    43b6:	cd bf       	out	0x3d, r28	; 61
    43b8:	fe 01       	movw	r30, r28
    43ba:	e0 59       	subi	r30, 0x90	; 144
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 83       	st	Z, r24
    43c0:	1b aa       	std	Y+51, r1	; 0x33
u8 	Pas[3];
u8 key;
u8 j;
u8 flag =0;
    43c2:	18 aa       	std	Y+48, r1	; 0x30
    43c4:	6a c3       	rjmp	.+1748   	; 0x4a9a <check_pas+0x6f8>
while(flag==0)
{

	for(u8 i=0xc0;i<=0xcf ;i++)
    43c6:	80 ec       	ldi	r24, 0xC0	; 192
    43c8:	8f a7       	std	Y+47, r24	; 0x2f
    43ca:	09 c0       	rjmp	.+18     	; 0x43de <check_pas+0x3c>
	{	Lcd_vidSendCommand(i);
    43cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43ce:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	Lcd_vidWriteChar(' ');
    43d2:	80 e2       	ldi	r24, 0x20	; 32
    43d4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
u8 j;
u8 flag =0;
while(flag==0)
{

	for(u8 i=0xc0;i<=0xcf ;i++)
    43d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	8f a7       	std	Y+47, r24	; 0x2f
    43de:	8f a5       	ldd	r24, Y+47	; 0x2f
    43e0:	80 3d       	cpi	r24, 0xD0	; 208
    43e2:	a0 f3       	brcs	.-24     	; 0x43cc <check_pas+0x2a>
	{	Lcd_vidSendCommand(i);
	Lcd_vidWriteChar(' ');
	}
	Lcd_vidSendCommand(0xc0);
    43e4:	80 ec       	ldi	r24, 0xC0	; 192
    43e6:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	u8 ar[10]="Password:";
    43ea:	ce 01       	movw	r24, r28
    43ec:	c7 96       	adiw	r24, 0x37	; 55
    43ee:	e3 96       	adiw	r28, 0x33	; 51
    43f0:	9f af       	std	Y+63, r25	; 0x3f
    43f2:	8e af       	std	Y+62, r24	; 0x3e
    43f4:	e3 97       	sbiw	r28, 0x33	; 51
    43f6:	e0 ea       	ldi	r30, 0xA0	; 160
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	e5 96       	adiw	r28, 0x35	; 53
    43fc:	ff af       	std	Y+63, r31	; 0x3f
    43fe:	ee af       	std	Y+62, r30	; 0x3e
    4400:	e5 97       	sbiw	r28, 0x35	; 53
    4402:	fa e0       	ldi	r31, 0x0A	; 10
    4404:	e6 96       	adiw	r28, 0x36	; 54
    4406:	ff af       	std	Y+63, r31	; 0x3f
    4408:	e6 97       	sbiw	r28, 0x36	; 54
    440a:	e5 96       	adiw	r28, 0x35	; 53
    440c:	ee ad       	ldd	r30, Y+62	; 0x3e
    440e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4410:	e5 97       	sbiw	r28, 0x35	; 53
    4412:	00 80       	ld	r0, Z
    4414:	e5 96       	adiw	r28, 0x35	; 53
    4416:	8e ad       	ldd	r24, Y+62	; 0x3e
    4418:	9f ad       	ldd	r25, Y+63	; 0x3f
    441a:	e5 97       	sbiw	r28, 0x35	; 53
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	e5 96       	adiw	r28, 0x35	; 53
    4420:	9f af       	std	Y+63, r25	; 0x3f
    4422:	8e af       	std	Y+62, r24	; 0x3e
    4424:	e5 97       	sbiw	r28, 0x35	; 53
    4426:	e3 96       	adiw	r28, 0x33	; 51
    4428:	ee ad       	ldd	r30, Y+62	; 0x3e
    442a:	ff ad       	ldd	r31, Y+63	; 0x3f
    442c:	e3 97       	sbiw	r28, 0x33	; 51
    442e:	00 82       	st	Z, r0
    4430:	e3 96       	adiw	r28, 0x33	; 51
    4432:	8e ad       	ldd	r24, Y+62	; 0x3e
    4434:	9f ad       	ldd	r25, Y+63	; 0x3f
    4436:	e3 97       	sbiw	r28, 0x33	; 51
    4438:	01 96       	adiw	r24, 0x01	; 1
    443a:	e3 96       	adiw	r28, 0x33	; 51
    443c:	9f af       	std	Y+63, r25	; 0x3f
    443e:	8e af       	std	Y+62, r24	; 0x3e
    4440:	e3 97       	sbiw	r28, 0x33	; 51
    4442:	e6 96       	adiw	r28, 0x36	; 54
    4444:	9f ad       	ldd	r25, Y+63	; 0x3f
    4446:	e6 97       	sbiw	r28, 0x36	; 54
    4448:	91 50       	subi	r25, 0x01	; 1
    444a:	e6 96       	adiw	r28, 0x36	; 54
    444c:	9f af       	std	Y+63, r25	; 0x3f
    444e:	e6 97       	sbiw	r28, 0x36	; 54
    4450:	e6 96       	adiw	r28, 0x36	; 54
    4452:	ef ad       	ldd	r30, Y+63	; 0x3f
    4454:	e6 97       	sbiw	r28, 0x36	; 54
    4456:	ee 23       	and	r30, r30
    4458:	c1 f6       	brne	.-80     	; 0x440a <check_pas+0x68>
	for(u8 in=0;in<9;in++)
    445a:	1e a6       	std	Y+46, r1	; 0x2e
    445c:	0e c0       	rjmp	.+28     	; 0x447a <check_pas+0xd8>
	{
		Lcd_vidWriteChar(ar[in]);
    445e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	ce 01       	movw	r24, r28
    4466:	c7 96       	adiw	r24, 0x37	; 55
    4468:	fc 01       	movw	r30, r24
    446a:	e2 0f       	add	r30, r18
    446c:	f3 1f       	adc	r31, r19
    446e:	80 81       	ld	r24, Z
    4470:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	{	Lcd_vidSendCommand(i);
	Lcd_vidWriteChar(' ');
	}
	Lcd_vidSendCommand(0xc0);
	u8 ar[10]="Password:";
	for(u8 in=0;in<9;in++)
    4474:	8e a5       	ldd	r24, Y+46	; 0x2e
    4476:	8f 5f       	subi	r24, 0xFF	; 255
    4478:	8e a7       	std	Y+46, r24	; 0x2e
    447a:	8e a5       	ldd	r24, Y+46	; 0x2e
    447c:	89 30       	cpi	r24, 0x09	; 9
    447e:	78 f3       	brcs	.-34     	; 0x445e <check_pas+0xbc>
	{
		Lcd_vidWriteChar(ar[in]);
	}

	for(j=0;j<=3 ;j++)
    4480:	19 aa       	std	Y+49, r1	; 0x31
    4482:	1a c0       	rjmp	.+52     	; 0x44b8 <check_pas+0x116>
	{key =Keypad_u8GetConstKey();
    4484:	0e 94 6d 0a 	call	0x14da	; 0x14da <Keypad_u8GetConstKey>
    4488:	8a ab       	std	Y+50, r24	; 0x32
	if(key=='#')
    448a:	8a a9       	ldd	r24, Y+50	; 0x32
    448c:	83 32       	cpi	r24, 0x23	; 35
    448e:	19 f4       	brne	.+6      	; 0x4496 <check_pas+0xf4>
			{j=4;
    4490:	84 e0       	ldi	r24, 0x04	; 4
    4492:	89 ab       	std	Y+49, r24	; 0x31
    4494:	0e c0       	rjmp	.+28     	; 0x44b2 <check_pas+0x110>
			}
	else
	{
	Lcd_vidWriteChar(key+'0');
    4496:	8a a9       	ldd	r24, Y+50	; 0x32
    4498:	80 5d       	subi	r24, 0xD0	; 208
    449a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	Pas[j]=key;
    449e:	89 a9       	ldd	r24, Y+49	; 0x31
    44a0:	28 2f       	mov	r18, r24
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	ce 01       	movw	r24, r28
    44a6:	c4 96       	adiw	r24, 0x34	; 52
    44a8:	fc 01       	movw	r30, r24
    44aa:	e2 0f       	add	r30, r18
    44ac:	f3 1f       	adc	r31, r19
    44ae:	8a a9       	ldd	r24, Y+50	; 0x32
    44b0:	80 83       	st	Z, r24
	for(u8 in=0;in<9;in++)
	{
		Lcd_vidWriteChar(ar[in]);
	}

	for(j=0;j<=3 ;j++)
    44b2:	89 a9       	ldd	r24, Y+49	; 0x31
    44b4:	8f 5f       	subi	r24, 0xFF	; 255
    44b6:	89 ab       	std	Y+49, r24	; 0x31
    44b8:	89 a9       	ldd	r24, Y+49	; 0x31
    44ba:	84 30       	cpi	r24, 0x04	; 4
    44bc:	18 f3       	brcs	.-58     	; 0x4484 <check_pas+0xe2>
    44be:	03 c0       	rjmp	.+6      	; 0x44c6 <check_pas+0x124>
	Pas[j]=key;
	}
	}
	while(key!='#')
	{
		key =Keypad_u8GetConstKey();
    44c0:	0e 94 6d 0a 	call	0x14da	; 0x14da <Keypad_u8GetConstKey>
    44c4:	8a ab       	std	Y+50, r24	; 0x32
	{
	Lcd_vidWriteChar(key+'0');
	Pas[j]=key;
	}
	}
	while(key!='#')
    44c6:	8a a9       	ldd	r24, Y+50	; 0x32
    44c8:	83 32       	cpi	r24, 0x23	; 35
    44ca:	d1 f7       	brne	.-12     	; 0x44c0 <check_pas+0x11e>
	{
		key =Keypad_u8GetConstKey();
	}

	if(Pas[0] == 0 && Pas[1] ==0 && Pas[2]==0 &&Pas[3]==0 &&ID==0)
    44cc:	8c a9       	ldd	r24, Y+52	; 0x34
    44ce:	88 23       	and	r24, r24
    44d0:	09 f0       	breq	.+2      	; 0x44d4 <check_pas+0x132>
    44d2:	94 c0       	rjmp	.+296    	; 0x45fc <check_pas+0x25a>
    44d4:	8d a9       	ldd	r24, Y+53	; 0x35
    44d6:	88 23       	and	r24, r24
    44d8:	09 f0       	breq	.+2      	; 0x44dc <check_pas+0x13a>
    44da:	90 c0       	rjmp	.+288    	; 0x45fc <check_pas+0x25a>
    44dc:	8e a9       	ldd	r24, Y+54	; 0x36
    44de:	88 23       	and	r24, r24
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <check_pas+0x142>
    44e2:	8c c0       	rjmp	.+280    	; 0x45fc <check_pas+0x25a>
    44e4:	8f a9       	ldd	r24, Y+55	; 0x37
    44e6:	88 23       	and	r24, r24
    44e8:	09 f0       	breq	.+2      	; 0x44ec <check_pas+0x14a>
    44ea:	88 c0       	rjmp	.+272    	; 0x45fc <check_pas+0x25a>
    44ec:	fe 01       	movw	r30, r28
    44ee:	e0 59       	subi	r30, 0x90	; 144
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	80 81       	ld	r24, Z
    44f4:	88 23       	and	r24, r24
    44f6:	09 f0       	breq	.+2      	; 0x44fa <check_pas+0x158>
    44f8:	81 c0       	rjmp	.+258    	; 0x45fc <check_pas+0x25a>
	{
		welcome();
    44fa:	0e 94 86 21 	call	0x430c	; 0x430c <welcome>
		Stepper_vidRight(180);
    44fe:	84 eb       	ldi	r24, 0xB4	; 180
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Stepper_vidRight>
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	aa e7       	ldi	r26, 0x7A	; 122
    450c:	b4 e4       	ldi	r27, 0x44	; 68
    450e:	8f a3       	std	Y+39, r24	; 0x27
    4510:	98 a7       	std	Y+40, r25	; 0x28
    4512:	a9 a7       	std	Y+41, r26	; 0x29
    4514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4516:	6f a1       	ldd	r22, Y+39	; 0x27
    4518:	78 a5       	ldd	r23, Y+40	; 0x28
    451a:	89 a5       	ldd	r24, Y+41	; 0x29
    451c:	9a a5       	ldd	r25, Y+42	; 0x2a
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	4a ef       	ldi	r20, 0xFA	; 250
    4524:	54 e4       	ldi	r21, 0x44	; 68
    4526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
    452e:	8b a3       	std	Y+35, r24	; 0x23
    4530:	9c a3       	std	Y+36, r25	; 0x24
    4532:	ad a3       	std	Y+37, r26	; 0x25
    4534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4536:	6b a1       	ldd	r22, Y+35	; 0x23
    4538:	7c a1       	ldd	r23, Y+36	; 0x24
    453a:	8d a1       	ldd	r24, Y+37	; 0x25
    453c:	9e a1       	ldd	r25, Y+38	; 0x26
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e8       	ldi	r20, 0x80	; 128
    4544:	5f e3       	ldi	r21, 0x3F	; 63
    4546:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    454a:	88 23       	and	r24, r24
    454c:	2c f4       	brge	.+10     	; 0x4558 <check_pas+0x1b6>
		__ticks = 1;
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	9a a3       	std	Y+34, r25	; 0x22
    4554:	89 a3       	std	Y+33, r24	; 0x21
    4556:	3f c0       	rjmp	.+126    	; 0x45d6 <check_pas+0x234>
	else if (__tmp > 65535)
    4558:	6b a1       	ldd	r22, Y+35	; 0x23
    455a:	7c a1       	ldd	r23, Y+36	; 0x24
    455c:	8d a1       	ldd	r24, Y+37	; 0x25
    455e:	9e a1       	ldd	r25, Y+38	; 0x26
    4560:	20 e0       	ldi	r18, 0x00	; 0
    4562:	3f ef       	ldi	r19, 0xFF	; 255
    4564:	4f e7       	ldi	r20, 0x7F	; 127
    4566:	57 e4       	ldi	r21, 0x47	; 71
    4568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    456c:	18 16       	cp	r1, r24
    456e:	4c f5       	brge	.+82     	; 0x45c2 <check_pas+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4570:	6f a1       	ldd	r22, Y+39	; 0x27
    4572:	78 a5       	ldd	r23, Y+40	; 0x28
    4574:	89 a5       	ldd	r24, Y+41	; 0x29
    4576:	9a a5       	ldd	r25, Y+42	; 0x2a
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	40 e2       	ldi	r20, 0x20	; 32
    457e:	51 e4       	ldi	r21, 0x41	; 65
    4580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	bc 01       	movw	r22, r24
    458a:	cd 01       	movw	r24, r26
    458c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	9a a3       	std	Y+34, r25	; 0x22
    4596:	89 a3       	std	Y+33, r24	; 0x21
    4598:	0f c0       	rjmp	.+30     	; 0x45b8 <check_pas+0x216>
    459a:	88 ec       	ldi	r24, 0xC8	; 200
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	98 a3       	std	Y+32, r25	; 0x20
    45a0:	8f 8f       	std	Y+31, r24	; 0x1f
    45a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45a4:	98 a1       	ldd	r25, Y+32	; 0x20
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <check_pas+0x204>
    45aa:	98 a3       	std	Y+32, r25	; 0x20
    45ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ae:	89 a1       	ldd	r24, Y+33	; 0x21
    45b0:	9a a1       	ldd	r25, Y+34	; 0x22
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	9a a3       	std	Y+34, r25	; 0x22
    45b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b8:	89 a1       	ldd	r24, Y+33	; 0x21
    45ba:	9a a1       	ldd	r25, Y+34	; 0x22
    45bc:	00 97       	sbiw	r24, 0x00	; 0
    45be:	69 f7       	brne	.-38     	; 0x459a <check_pas+0x1f8>
    45c0:	14 c0       	rjmp	.+40     	; 0x45ea <check_pas+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c2:	6b a1       	ldd	r22, Y+35	; 0x23
    45c4:	7c a1       	ldd	r23, Y+36	; 0x24
    45c6:	8d a1       	ldd	r24, Y+37	; 0x25
    45c8:	9e a1       	ldd	r25, Y+38	; 0x26
    45ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9a a3       	std	Y+34, r25	; 0x22
    45d4:	89 a3       	std	Y+33, r24	; 0x21
    45d6:	89 a1       	ldd	r24, Y+33	; 0x21
    45d8:	9a a1       	ldd	r25, Y+34	; 0x22
    45da:	9e 8f       	std	Y+30, r25	; 0x1e
    45dc:	8d 8f       	std	Y+29, r24	; 0x1d
    45de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	f1 f7       	brne	.-4      	; 0x45e2 <check_pas+0x240>
    45e6:	9e 8f       	std	Y+30, r25	; 0x1e
    45e8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		Stepper_vidLeft(180);
    45ea:	84 eb       	ldi	r24, 0xB4	; 180
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	0e 94 92 12 	call	0x2524	; 0x2524 <Stepper_vidLeft>
		pwch=0;
    45f2:	1b aa       	std	Y+51, r1	; 0x33
		flag++;
    45f4:	88 a9       	ldd	r24, Y+48	; 0x30
    45f6:	8f 5f       	subi	r24, 0xFF	; 255
    45f8:	88 ab       	std	Y+48, r24	; 0x30
    45fa:	87 c1       	rjmp	.+782    	; 0x490a <check_pas+0x568>
	}
	else if(Pas[0] == 1 && Pas[1] ==1 && Pas[2]==1 &&Pas[3]==1 &&ID==1)
    45fc:	8c a9       	ldd	r24, Y+52	; 0x34
    45fe:	81 30       	cpi	r24, 0x01	; 1
    4600:	09 f0       	breq	.+2      	; 0x4604 <check_pas+0x262>
    4602:	94 c0       	rjmp	.+296    	; 0x472c <check_pas+0x38a>
    4604:	8d a9       	ldd	r24, Y+53	; 0x35
    4606:	81 30       	cpi	r24, 0x01	; 1
    4608:	09 f0       	breq	.+2      	; 0x460c <check_pas+0x26a>
    460a:	90 c0       	rjmp	.+288    	; 0x472c <check_pas+0x38a>
    460c:	8e a9       	ldd	r24, Y+54	; 0x36
    460e:	81 30       	cpi	r24, 0x01	; 1
    4610:	09 f0       	breq	.+2      	; 0x4614 <check_pas+0x272>
    4612:	8c c0       	rjmp	.+280    	; 0x472c <check_pas+0x38a>
    4614:	8f a9       	ldd	r24, Y+55	; 0x37
    4616:	81 30       	cpi	r24, 0x01	; 1
    4618:	09 f0       	breq	.+2      	; 0x461c <check_pas+0x27a>
    461a:	88 c0       	rjmp	.+272    	; 0x472c <check_pas+0x38a>
    461c:	fe 01       	movw	r30, r28
    461e:	e0 59       	subi	r30, 0x90	; 144
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	80 81       	ld	r24, Z
    4624:	81 30       	cpi	r24, 0x01	; 1
    4626:	09 f0       	breq	.+2      	; 0x462a <check_pas+0x288>
    4628:	81 c0       	rjmp	.+258    	; 0x472c <check_pas+0x38a>
	{
		welcome();
    462a:	0e 94 86 21 	call	0x430c	; 0x430c <welcome>
		Stepper_vidRight(180);
    462e:	84 eb       	ldi	r24, 0xB4	; 180
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Stepper_vidRight>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	aa e7       	ldi	r26, 0x7A	; 122
    463c:	b4 e4       	ldi	r27, 0x44	; 68
    463e:	89 8f       	std	Y+25, r24	; 0x19
    4640:	9a 8f       	std	Y+26, r25	; 0x1a
    4642:	ab 8f       	std	Y+27, r26	; 0x1b
    4644:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4646:	69 8d       	ldd	r22, Y+25	; 0x19
    4648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    464a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    464c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	4a ef       	ldi	r20, 0xFA	; 250
    4654:	54 e4       	ldi	r21, 0x44	; 68
    4656:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	8d 8b       	std	Y+21, r24	; 0x15
    4660:	9e 8b       	std	Y+22, r25	; 0x16
    4662:	af 8b       	std	Y+23, r26	; 0x17
    4664:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4666:	6d 89       	ldd	r22, Y+21	; 0x15
    4668:	7e 89       	ldd	r23, Y+22	; 0x16
    466a:	8f 89       	ldd	r24, Y+23	; 0x17
    466c:	98 8d       	ldd	r25, Y+24	; 0x18
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e8       	ldi	r20, 0x80	; 128
    4674:	5f e3       	ldi	r21, 0x3F	; 63
    4676:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    467a:	88 23       	and	r24, r24
    467c:	2c f4       	brge	.+10     	; 0x4688 <check_pas+0x2e6>
		__ticks = 1;
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	9c 8b       	std	Y+20, r25	; 0x14
    4684:	8b 8b       	std	Y+19, r24	; 0x13
    4686:	3f c0       	rjmp	.+126    	; 0x4706 <check_pas+0x364>
	else if (__tmp > 65535)
    4688:	6d 89       	ldd	r22, Y+21	; 0x15
    468a:	7e 89       	ldd	r23, Y+22	; 0x16
    468c:	8f 89       	ldd	r24, Y+23	; 0x17
    468e:	98 8d       	ldd	r25, Y+24	; 0x18
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	3f ef       	ldi	r19, 0xFF	; 255
    4694:	4f e7       	ldi	r20, 0x7F	; 127
    4696:	57 e4       	ldi	r21, 0x47	; 71
    4698:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    469c:	18 16       	cp	r1, r24
    469e:	4c f5       	brge	.+82     	; 0x46f2 <check_pas+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a0:	69 8d       	ldd	r22, Y+25	; 0x19
    46a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e2       	ldi	r20, 0x20	; 32
    46ae:	51 e4       	ldi	r21, 0x41	; 65
    46b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	bc 01       	movw	r22, r24
    46ba:	cd 01       	movw	r24, r26
    46bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	9c 8b       	std	Y+20, r25	; 0x14
    46c6:	8b 8b       	std	Y+19, r24	; 0x13
    46c8:	0f c0       	rjmp	.+30     	; 0x46e8 <check_pas+0x346>
    46ca:	88 ec       	ldi	r24, 0xC8	; 200
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	9a 8b       	std	Y+18, r25	; 0x12
    46d0:	89 8b       	std	Y+17, r24	; 0x11
    46d2:	89 89       	ldd	r24, Y+17	; 0x11
    46d4:	9a 89       	ldd	r25, Y+18	; 0x12
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <check_pas+0x334>
    46da:	9a 8b       	std	Y+18, r25	; 0x12
    46dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46de:	8b 89       	ldd	r24, Y+19	; 0x13
    46e0:	9c 89       	ldd	r25, Y+20	; 0x14
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	9c 8b       	std	Y+20, r25	; 0x14
    46e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e8:	8b 89       	ldd	r24, Y+19	; 0x13
    46ea:	9c 89       	ldd	r25, Y+20	; 0x14
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	69 f7       	brne	.-38     	; 0x46ca <check_pas+0x328>
    46f0:	14 c0       	rjmp	.+40     	; 0x471a <check_pas+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46f2:	6d 89       	ldd	r22, Y+21	; 0x15
    46f4:	7e 89       	ldd	r23, Y+22	; 0x16
    46f6:	8f 89       	ldd	r24, Y+23	; 0x17
    46f8:	98 8d       	ldd	r25, Y+24	; 0x18
    46fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	9c 8b       	std	Y+20, r25	; 0x14
    4704:	8b 8b       	std	Y+19, r24	; 0x13
    4706:	8b 89       	ldd	r24, Y+19	; 0x13
    4708:	9c 89       	ldd	r25, Y+20	; 0x14
    470a:	98 8b       	std	Y+16, r25	; 0x10
    470c:	8f 87       	std	Y+15, r24	; 0x0f
    470e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4710:	98 89       	ldd	r25, Y+16	; 0x10
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	f1 f7       	brne	.-4      	; 0x4712 <check_pas+0x370>
    4716:	98 8b       	std	Y+16, r25	; 0x10
    4718:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Stepper_vidLeft(180);
    471a:	84 eb       	ldi	r24, 0xB4	; 180
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 92 12 	call	0x2524	; 0x2524 <Stepper_vidLeft>
		pwch=0;
    4722:	1b aa       	std	Y+51, r1	; 0x33
		flag++;
    4724:	88 a9       	ldd	r24, Y+48	; 0x30
    4726:	8f 5f       	subi	r24, 0xFF	; 255
    4728:	88 ab       	std	Y+48, r24	; 0x30
    472a:	ef c0       	rjmp	.+478    	; 0x490a <check_pas+0x568>
	}
	else if(Pas[0] == 2 && Pas[1] ==2 && Pas[2]==2 &&Pas[3]==2 &&ID==2)
    472c:	8c a9       	ldd	r24, Y+52	; 0x34
    472e:	82 30       	cpi	r24, 0x02	; 2
    4730:	09 f0       	breq	.+2      	; 0x4734 <check_pas+0x392>
    4732:	94 c0       	rjmp	.+296    	; 0x485c <check_pas+0x4ba>
    4734:	8d a9       	ldd	r24, Y+53	; 0x35
    4736:	82 30       	cpi	r24, 0x02	; 2
    4738:	09 f0       	breq	.+2      	; 0x473c <check_pas+0x39a>
    473a:	90 c0       	rjmp	.+288    	; 0x485c <check_pas+0x4ba>
    473c:	8e a9       	ldd	r24, Y+54	; 0x36
    473e:	82 30       	cpi	r24, 0x02	; 2
    4740:	09 f0       	breq	.+2      	; 0x4744 <check_pas+0x3a2>
    4742:	8c c0       	rjmp	.+280    	; 0x485c <check_pas+0x4ba>
    4744:	8f a9       	ldd	r24, Y+55	; 0x37
    4746:	82 30       	cpi	r24, 0x02	; 2
    4748:	09 f0       	breq	.+2      	; 0x474c <check_pas+0x3aa>
    474a:	88 c0       	rjmp	.+272    	; 0x485c <check_pas+0x4ba>
    474c:	fe 01       	movw	r30, r28
    474e:	e0 59       	subi	r30, 0x90	; 144
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	80 81       	ld	r24, Z
    4754:	82 30       	cpi	r24, 0x02	; 2
    4756:	09 f0       	breq	.+2      	; 0x475a <check_pas+0x3b8>
    4758:	81 c0       	rjmp	.+258    	; 0x485c <check_pas+0x4ba>
	{
		welcome();
    475a:	0e 94 86 21 	call	0x430c	; 0x430c <welcome>
		Stepper_vidRight(180);
    475e:	84 eb       	ldi	r24, 0xB4	; 180
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Stepper_vidRight>
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	aa e7       	ldi	r26, 0x7A	; 122
    476c:	b4 e4       	ldi	r27, 0x44	; 68
    476e:	8b 87       	std	Y+11, r24	; 0x0b
    4770:	9c 87       	std	Y+12, r25	; 0x0c
    4772:	ad 87       	std	Y+13, r26	; 0x0d
    4774:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4776:	6b 85       	ldd	r22, Y+11	; 0x0b
    4778:	7c 85       	ldd	r23, Y+12	; 0x0c
    477a:	8d 85       	ldd	r24, Y+13	; 0x0d
    477c:	9e 85       	ldd	r25, Y+14	; 0x0e
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	4a ef       	ldi	r20, 0xFA	; 250
    4784:	54 e4       	ldi	r21, 0x44	; 68
    4786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    478a:	dc 01       	movw	r26, r24
    478c:	cb 01       	movw	r24, r22
    478e:	8f 83       	std	Y+7, r24	; 0x07
    4790:	98 87       	std	Y+8, r25	; 0x08
    4792:	a9 87       	std	Y+9, r26	; 0x09
    4794:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4796:	6f 81       	ldd	r22, Y+7	; 0x07
    4798:	78 85       	ldd	r23, Y+8	; 0x08
    479a:	89 85       	ldd	r24, Y+9	; 0x09
    479c:	9a 85       	ldd	r25, Y+10	; 0x0a
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	30 e0       	ldi	r19, 0x00	; 0
    47a2:	40 e8       	ldi	r20, 0x80	; 128
    47a4:	5f e3       	ldi	r21, 0x3F	; 63
    47a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    47aa:	88 23       	and	r24, r24
    47ac:	2c f4       	brge	.+10     	; 0x47b8 <check_pas+0x416>
		__ticks = 1;
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	9e 83       	std	Y+6, r25	; 0x06
    47b4:	8d 83       	std	Y+5, r24	; 0x05
    47b6:	3f c0       	rjmp	.+126    	; 0x4836 <check_pas+0x494>
	else if (__tmp > 65535)
    47b8:	6f 81       	ldd	r22, Y+7	; 0x07
    47ba:	78 85       	ldd	r23, Y+8	; 0x08
    47bc:	89 85       	ldd	r24, Y+9	; 0x09
    47be:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	3f ef       	ldi	r19, 0xFF	; 255
    47c4:	4f e7       	ldi	r20, 0x7F	; 127
    47c6:	57 e4       	ldi	r21, 0x47	; 71
    47c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    47cc:	18 16       	cp	r1, r24
    47ce:	4c f5       	brge	.+82     	; 0x4822 <check_pas+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e2       	ldi	r20, 0x20	; 32
    47de:	51 e4       	ldi	r21, 0x41	; 65
    47e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	bc 01       	movw	r22, r24
    47ea:	cd 01       	movw	r24, r26
    47ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	9e 83       	std	Y+6, r25	; 0x06
    47f6:	8d 83       	std	Y+5, r24	; 0x05
    47f8:	0f c0       	rjmp	.+30     	; 0x4818 <check_pas+0x476>
    47fa:	88 ec       	ldi	r24, 0xC8	; 200
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	9c 83       	std	Y+4, r25	; 0x04
    4800:	8b 83       	std	Y+3, r24	; 0x03
    4802:	8b 81       	ldd	r24, Y+3	; 0x03
    4804:	9c 81       	ldd	r25, Y+4	; 0x04
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	f1 f7       	brne	.-4      	; 0x4806 <check_pas+0x464>
    480a:	9c 83       	std	Y+4, r25	; 0x04
    480c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    480e:	8d 81       	ldd	r24, Y+5	; 0x05
    4810:	9e 81       	ldd	r25, Y+6	; 0x06
    4812:	01 97       	sbiw	r24, 0x01	; 1
    4814:	9e 83       	std	Y+6, r25	; 0x06
    4816:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4818:	8d 81       	ldd	r24, Y+5	; 0x05
    481a:	9e 81       	ldd	r25, Y+6	; 0x06
    481c:	00 97       	sbiw	r24, 0x00	; 0
    481e:	69 f7       	brne	.-38     	; 0x47fa <check_pas+0x458>
    4820:	14 c0       	rjmp	.+40     	; 0x484a <check_pas+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4822:	6f 81       	ldd	r22, Y+7	; 0x07
    4824:	78 85       	ldd	r23, Y+8	; 0x08
    4826:	89 85       	ldd	r24, Y+9	; 0x09
    4828:	9a 85       	ldd	r25, Y+10	; 0x0a
    482a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    482e:	dc 01       	movw	r26, r24
    4830:	cb 01       	movw	r24, r22
    4832:	9e 83       	std	Y+6, r25	; 0x06
    4834:	8d 83       	std	Y+5, r24	; 0x05
    4836:	8d 81       	ldd	r24, Y+5	; 0x05
    4838:	9e 81       	ldd	r25, Y+6	; 0x06
    483a:	9a 83       	std	Y+2, r25	; 0x02
    483c:	89 83       	std	Y+1, r24	; 0x01
    483e:	89 81       	ldd	r24, Y+1	; 0x01
    4840:	9a 81       	ldd	r25, Y+2	; 0x02
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	f1 f7       	brne	.-4      	; 0x4842 <check_pas+0x4a0>
    4846:	9a 83       	std	Y+2, r25	; 0x02
    4848:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Stepper_vidLeft(180);
    484a:	84 eb       	ldi	r24, 0xB4	; 180
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 92 12 	call	0x2524	; 0x2524 <Stepper_vidLeft>
	pwch=0;
    4852:	1b aa       	std	Y+51, r1	; 0x33
	flag++;
    4854:	88 a9       	ldd	r24, Y+48	; 0x30
    4856:	8f 5f       	subi	r24, 0xFF	; 255
    4858:	88 ab       	std	Y+48, r24	; 0x30
    485a:	57 c0       	rjmp	.+174    	; 0x490a <check_pas+0x568>
	}
	else
	{Lcd_vidSendCommand(0xc0);
    485c:	80 ec       	ldi	r24, 0xC0	; 192
    485e:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
	u8 arr[17]="Invalid Password";
    4862:	ce 01       	movw	r24, r28
    4864:	8f 5b       	subi	r24, 0xBF	; 191
    4866:	9f 4f       	sbci	r25, 0xFF	; 255
    4868:	e8 96       	adiw	r28, 0x38	; 56
    486a:	9f af       	std	Y+63, r25	; 0x3f
    486c:	8e af       	std	Y+62, r24	; 0x3e
    486e:	e8 97       	sbiw	r28, 0x38	; 56
    4870:	ea ea       	ldi	r30, 0xAA	; 170
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	ea 96       	adiw	r28, 0x3a	; 58
    4876:	ff af       	std	Y+63, r31	; 0x3f
    4878:	ee af       	std	Y+62, r30	; 0x3e
    487a:	ea 97       	sbiw	r28, 0x3a	; 58
    487c:	f1 e1       	ldi	r31, 0x11	; 17
    487e:	eb 96       	adiw	r28, 0x3b	; 59
    4880:	ff af       	std	Y+63, r31	; 0x3f
    4882:	eb 97       	sbiw	r28, 0x3b	; 59
    4884:	ea 96       	adiw	r28, 0x3a	; 58
    4886:	ee ad       	ldd	r30, Y+62	; 0x3e
    4888:	ff ad       	ldd	r31, Y+63	; 0x3f
    488a:	ea 97       	sbiw	r28, 0x3a	; 58
    488c:	00 80       	ld	r0, Z
    488e:	ea 96       	adiw	r28, 0x3a	; 58
    4890:	8e ad       	ldd	r24, Y+62	; 0x3e
    4892:	9f ad       	ldd	r25, Y+63	; 0x3f
    4894:	ea 97       	sbiw	r28, 0x3a	; 58
    4896:	01 96       	adiw	r24, 0x01	; 1
    4898:	ea 96       	adiw	r28, 0x3a	; 58
    489a:	9f af       	std	Y+63, r25	; 0x3f
    489c:	8e af       	std	Y+62, r24	; 0x3e
    489e:	ea 97       	sbiw	r28, 0x3a	; 58
    48a0:	e8 96       	adiw	r28, 0x38	; 56
    48a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    48a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    48a6:	e8 97       	sbiw	r28, 0x38	; 56
    48a8:	00 82       	st	Z, r0
    48aa:	e8 96       	adiw	r28, 0x38	; 56
    48ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    48ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    48b0:	e8 97       	sbiw	r28, 0x38	; 56
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	e8 96       	adiw	r28, 0x38	; 56
    48b6:	9f af       	std	Y+63, r25	; 0x3f
    48b8:	8e af       	std	Y+62, r24	; 0x3e
    48ba:	e8 97       	sbiw	r28, 0x38	; 56
    48bc:	eb 96       	adiw	r28, 0x3b	; 59
    48be:	9f ad       	ldd	r25, Y+63	; 0x3f
    48c0:	eb 97       	sbiw	r28, 0x3b	; 59
    48c2:	91 50       	subi	r25, 0x01	; 1
    48c4:	eb 96       	adiw	r28, 0x3b	; 59
    48c6:	9f af       	std	Y+63, r25	; 0x3f
    48c8:	eb 97       	sbiw	r28, 0x3b	; 59
    48ca:	eb 96       	adiw	r28, 0x3b	; 59
    48cc:	ef ad       	ldd	r30, Y+63	; 0x3f
    48ce:	eb 97       	sbiw	r28, 0x3b	; 59
    48d0:	ee 23       	and	r30, r30
    48d2:	c1 f6       	brne	.-80     	; 0x4884 <check_pas+0x4e2>
	for(u8 in=0;in<16;in++)
    48d4:	1d a6       	std	Y+45, r1	; 0x2d
    48d6:	0f c0       	rjmp	.+30     	; 0x48f6 <check_pas+0x554>
	{
		Lcd_vidWriteChar(arr[in]);
    48d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    48da:	28 2f       	mov	r18, r24
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	ce 01       	movw	r24, r28
    48e0:	8f 5b       	subi	r24, 0xBF	; 191
    48e2:	9f 4f       	sbci	r25, 0xFF	; 255
    48e4:	fc 01       	movw	r30, r24
    48e6:	e2 0f       	add	r30, r18
    48e8:	f3 1f       	adc	r31, r19
    48ea:	80 81       	ld	r24, Z
    48ec:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	flag++;
	}
	else
	{Lcd_vidSendCommand(0xc0);
	u8 arr[17]="Invalid Password";
	for(u8 in=0;in<16;in++)
    48f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    48f2:	8f 5f       	subi	r24, 0xFF	; 255
    48f4:	8d a7       	std	Y+45, r24	; 0x2d
    48f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    48f8:	80 31       	cpi	r24, 0x10	; 16
    48fa:	70 f3       	brcs	.-36     	; 0x48d8 <check_pas+0x536>
	{
		Lcd_vidWriteChar(arr[in]);
	}
	Bazz_vidTurn(3,0 );
    48fc:	83 e0       	ldi	r24, 0x03	; 3
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <Bazz_vidTurn>
	pwch++;
    4904:	8b a9       	ldd	r24, Y+51	; 0x33
    4906:	8f 5f       	subi	r24, 0xFF	; 255
    4908:	8b ab       	std	Y+51, r24	; 0x33
	}

if(pwch==3)
    490a:	8b a9       	ldd	r24, Y+51	; 0x33
    490c:	83 30       	cpi	r24, 0x03	; 3
    490e:	09 f0       	breq	.+2      	; 0x4912 <check_pas+0x570>
    4910:	c4 c0       	rjmp	.+392    	; 0x4a9a <check_pas+0x6f8>
{Lcd_vidInit();
    4912:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <Lcd_vidInit>
u8 arr[17]="Wrong PW 3 times";
    4916:	ce 01       	movw	r24, r28
    4918:	8e 5a       	subi	r24, 0xAE	; 174
    491a:	9f 4f       	sbci	r25, 0xFF	; 255
    491c:	ed 96       	adiw	r28, 0x3d	; 61
    491e:	9f af       	std	Y+63, r25	; 0x3f
    4920:	8e af       	std	Y+62, r24	; 0x3e
    4922:	ed 97       	sbiw	r28, 0x3d	; 61
    4924:	8b eb       	ldi	r24, 0xBB	; 187
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	ef 96       	adiw	r28, 0x3f	; 63
    492a:	9f af       	std	Y+63, r25	; 0x3f
    492c:	8e af       	std	Y+62, r24	; 0x3e
    492e:	ef 97       	sbiw	r28, 0x3f	; 63
    4930:	91 e1       	ldi	r25, 0x11	; 17
    4932:	c1 58       	subi	r28, 0x81	; 129
    4934:	df 4f       	sbci	r29, 0xFF	; 255
    4936:	98 83       	st	Y, r25
    4938:	cf 57       	subi	r28, 0x7F	; 127
    493a:	d0 40       	sbci	r29, 0x00	; 0
    493c:	ef 96       	adiw	r28, 0x3f	; 63
    493e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4940:	ff ad       	ldd	r31, Y+63	; 0x3f
    4942:	ef 97       	sbiw	r28, 0x3f	; 63
    4944:	00 80       	ld	r0, Z
    4946:	ef 96       	adiw	r28, 0x3f	; 63
    4948:	8e ad       	ldd	r24, Y+62	; 0x3e
    494a:	9f ad       	ldd	r25, Y+63	; 0x3f
    494c:	ef 97       	sbiw	r28, 0x3f	; 63
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	ef 96       	adiw	r28, 0x3f	; 63
    4952:	9f af       	std	Y+63, r25	; 0x3f
    4954:	8e af       	std	Y+62, r24	; 0x3e
    4956:	ef 97       	sbiw	r28, 0x3f	; 63
    4958:	ed 96       	adiw	r28, 0x3d	; 61
    495a:	ee ad       	ldd	r30, Y+62	; 0x3e
    495c:	ff ad       	ldd	r31, Y+63	; 0x3f
    495e:	ed 97       	sbiw	r28, 0x3d	; 61
    4960:	00 82       	st	Z, r0
    4962:	ed 96       	adiw	r28, 0x3d	; 61
    4964:	8e ad       	ldd	r24, Y+62	; 0x3e
    4966:	9f ad       	ldd	r25, Y+63	; 0x3f
    4968:	ed 97       	sbiw	r28, 0x3d	; 61
    496a:	01 96       	adiw	r24, 0x01	; 1
    496c:	ed 96       	adiw	r28, 0x3d	; 61
    496e:	9f af       	std	Y+63, r25	; 0x3f
    4970:	8e af       	std	Y+62, r24	; 0x3e
    4972:	ed 97       	sbiw	r28, 0x3d	; 61
    4974:	c1 58       	subi	r28, 0x81	; 129
    4976:	df 4f       	sbci	r29, 0xFF	; 255
    4978:	98 81       	ld	r25, Y
    497a:	cf 57       	subi	r28, 0x7F	; 127
    497c:	d0 40       	sbci	r29, 0x00	; 0
    497e:	91 50       	subi	r25, 0x01	; 1
    4980:	c1 58       	subi	r28, 0x81	; 129
    4982:	df 4f       	sbci	r29, 0xFF	; 255
    4984:	98 83       	st	Y, r25
    4986:	cf 57       	subi	r28, 0x7F	; 127
    4988:	d0 40       	sbci	r29, 0x00	; 0
    498a:	c1 58       	subi	r28, 0x81	; 129
    498c:	df 4f       	sbci	r29, 0xFF	; 255
    498e:	e8 81       	ld	r30, Y
    4990:	cf 57       	subi	r28, 0x7F	; 127
    4992:	d0 40       	sbci	r29, 0x00	; 0
    4994:	ee 23       	and	r30, r30
    4996:	91 f6       	brne	.-92     	; 0x493c <check_pas+0x59a>
for(u8 in=0;in<16;in++)
    4998:	1c a6       	std	Y+44, r1	; 0x2c
    499a:	0f c0       	rjmp	.+30     	; 0x49ba <check_pas+0x618>
{
	Lcd_vidWriteChar(arr[in]);
    499c:	8c a5       	ldd	r24, Y+44	; 0x2c
    499e:	28 2f       	mov	r18, r24
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	ce 01       	movw	r24, r28
    49a4:	8e 5a       	subi	r24, 0xAE	; 174
    49a6:	9f 4f       	sbci	r25, 0xFF	; 255
    49a8:	fc 01       	movw	r30, r24
    49aa:	e2 0f       	add	r30, r18
    49ac:	f3 1f       	adc	r31, r19
    49ae:	80 81       	ld	r24, Z
    49b0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>
	}

if(pwch==3)
{Lcd_vidInit();
u8 arr[17]="Wrong PW 3 times";
for(u8 in=0;in<16;in++)
    49b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    49b6:	8f 5f       	subi	r24, 0xFF	; 255
    49b8:	8c a7       	std	Y+44, r24	; 0x2c
    49ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    49bc:	80 31       	cpi	r24, 0x10	; 16
    49be:	70 f3       	brcs	.-36     	; 0x499c <check_pas+0x5fa>
{
	Lcd_vidWriteChar(arr[in]);

}

Lcd_vidSendCommand(0xc0);
    49c0:	80 ec       	ldi	r24, 0xC0	; 192
    49c2:	0e 94 12 0b 	call	0x1624	; 0x1624 <Lcd_vidSendCommand>
 u8 arr1[13]="System close";
    49c6:	ce 01       	movw	r24, r28
    49c8:	8d 59       	subi	r24, 0x9D	; 157
    49ca:	9f 4f       	sbci	r25, 0xFF	; 255
    49cc:	c0 58       	subi	r28, 0x80	; 128
    49ce:	df 4f       	sbci	r29, 0xFF	; 255
    49d0:	99 83       	std	Y+1, r25	; 0x01
    49d2:	88 83       	st	Y, r24
    49d4:	c0 58       	subi	r28, 0x80	; 128
    49d6:	d0 40       	sbci	r29, 0x00	; 0
    49d8:	8b e8       	ldi	r24, 0x8B	; 139
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	ce 57       	subi	r28, 0x7E	; 126
    49de:	df 4f       	sbci	r29, 0xFF	; 255
    49e0:	99 83       	std	Y+1, r25	; 0x01
    49e2:	88 83       	st	Y, r24
    49e4:	c2 58       	subi	r28, 0x82	; 130
    49e6:	d0 40       	sbci	r29, 0x00	; 0
    49e8:	9d e0       	ldi	r25, 0x0D	; 13
    49ea:	cc 57       	subi	r28, 0x7C	; 124
    49ec:	df 4f       	sbci	r29, 0xFF	; 255
    49ee:	98 83       	st	Y, r25
    49f0:	c4 58       	subi	r28, 0x84	; 132
    49f2:	d0 40       	sbci	r29, 0x00	; 0
    49f4:	ce 57       	subi	r28, 0x7E	; 126
    49f6:	df 4f       	sbci	r29, 0xFF	; 255
    49f8:	e8 81       	ld	r30, Y
    49fa:	f9 81       	ldd	r31, Y+1	; 0x01
    49fc:	c2 58       	subi	r28, 0x82	; 130
    49fe:	d0 40       	sbci	r29, 0x00	; 0
    4a00:	00 80       	ld	r0, Z
    4a02:	ce 57       	subi	r28, 0x7E	; 126
    4a04:	df 4f       	sbci	r29, 0xFF	; 255
    4a06:	88 81       	ld	r24, Y
    4a08:	99 81       	ldd	r25, Y+1	; 0x01
    4a0a:	c2 58       	subi	r28, 0x82	; 130
    4a0c:	d0 40       	sbci	r29, 0x00	; 0
    4a0e:	01 96       	adiw	r24, 0x01	; 1
    4a10:	ce 57       	subi	r28, 0x7E	; 126
    4a12:	df 4f       	sbci	r29, 0xFF	; 255
    4a14:	99 83       	std	Y+1, r25	; 0x01
    4a16:	88 83       	st	Y, r24
    4a18:	c2 58       	subi	r28, 0x82	; 130
    4a1a:	d0 40       	sbci	r29, 0x00	; 0
    4a1c:	c0 58       	subi	r28, 0x80	; 128
    4a1e:	df 4f       	sbci	r29, 0xFF	; 255
    4a20:	e8 81       	ld	r30, Y
    4a22:	f9 81       	ldd	r31, Y+1	; 0x01
    4a24:	c0 58       	subi	r28, 0x80	; 128
    4a26:	d0 40       	sbci	r29, 0x00	; 0
    4a28:	00 82       	st	Z, r0
    4a2a:	c0 58       	subi	r28, 0x80	; 128
    4a2c:	df 4f       	sbci	r29, 0xFF	; 255
    4a2e:	88 81       	ld	r24, Y
    4a30:	99 81       	ldd	r25, Y+1	; 0x01
    4a32:	c0 58       	subi	r28, 0x80	; 128
    4a34:	d0 40       	sbci	r29, 0x00	; 0
    4a36:	01 96       	adiw	r24, 0x01	; 1
    4a38:	c0 58       	subi	r28, 0x80	; 128
    4a3a:	df 4f       	sbci	r29, 0xFF	; 255
    4a3c:	99 83       	std	Y+1, r25	; 0x01
    4a3e:	88 83       	st	Y, r24
    4a40:	c0 58       	subi	r28, 0x80	; 128
    4a42:	d0 40       	sbci	r29, 0x00	; 0
    4a44:	cc 57       	subi	r28, 0x7C	; 124
    4a46:	df 4f       	sbci	r29, 0xFF	; 255
    4a48:	98 81       	ld	r25, Y
    4a4a:	c4 58       	subi	r28, 0x84	; 132
    4a4c:	d0 40       	sbci	r29, 0x00	; 0
    4a4e:	91 50       	subi	r25, 0x01	; 1
    4a50:	cc 57       	subi	r28, 0x7C	; 124
    4a52:	df 4f       	sbci	r29, 0xFF	; 255
    4a54:	98 83       	st	Y, r25
    4a56:	c4 58       	subi	r28, 0x84	; 132
    4a58:	d0 40       	sbci	r29, 0x00	; 0
    4a5a:	cc 57       	subi	r28, 0x7C	; 124
    4a5c:	df 4f       	sbci	r29, 0xFF	; 255
    4a5e:	e8 81       	ld	r30, Y
    4a60:	c4 58       	subi	r28, 0x84	; 132
    4a62:	d0 40       	sbci	r29, 0x00	; 0
    4a64:	ee 23       	and	r30, r30
    4a66:	31 f6       	brne	.-116    	; 0x49f4 <check_pas+0x652>
	for(u8 in=0;in<12;in++)
    4a68:	1b a6       	std	Y+43, r1	; 0x2b
    4a6a:	0f c0       	rjmp	.+30     	; 0x4a8a <check_pas+0x6e8>
	{
		Lcd_vidWriteChar(arr1[in]);
    4a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a6e:	28 2f       	mov	r18, r24
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	ce 01       	movw	r24, r28
    4a74:	8d 59       	subi	r24, 0x9D	; 157
    4a76:	9f 4f       	sbci	r25, 0xFF	; 255
    4a78:	fc 01       	movw	r30, r24
    4a7a:	e2 0f       	add	r30, r18
    4a7c:	f3 1f       	adc	r31, r19
    4a7e:	80 81       	ld	r24, Z
    4a80:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Lcd_vidWriteChar>

}

Lcd_vidSendCommand(0xc0);
 u8 arr1[13]="System close";
	for(u8 in=0;in<12;in++)
    4a84:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a86:	8f 5f       	subi	r24, 0xFF	; 255
    4a88:	8b a7       	std	Y+43, r24	; 0x2b
    4a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a8c:	8c 30       	cpi	r24, 0x0C	; 12
    4a8e:	70 f3       	brcs	.-36     	; 0x4a6c <check_pas+0x6ca>
		Lcd_vidWriteChar(arr1[in]);
	}

while(1)
{
	Bazz_vidTurn(2,1 );
    4a90:	82 e0       	ldi	r24, 0x02	; 2
    4a92:	61 e0       	ldi	r22, 0x01	; 1
    4a94:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <Bazz_vidTurn>
    4a98:	fb cf       	rjmp	.-10     	; 0x4a90 <check_pas+0x6ee>
{  u8 pwch=0;
u8 	Pas[3];
u8 key;
u8 j;
u8 flag =0;
while(flag==0)
    4a9a:	88 a9       	ldd	r24, Y+48	; 0x30
    4a9c:	88 23       	and	r24, r24
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <check_pas+0x700>
    4aa0:	92 cc       	rjmp	.-1756   	; 0x43c6 <check_pas+0x24>
{
	Bazz_vidTurn(2,1 );
}
}
}
}
    4aa2:	cc 57       	subi	r28, 0x7C	; 124
    4aa4:	df 4f       	sbci	r29, 0xFF	; 255
    4aa6:	0f b6       	in	r0, 0x3f	; 63
    4aa8:	f8 94       	cli
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	cf 91       	pop	r28
    4ab2:	df 91       	pop	r29
    4ab4:	08 95       	ret

00004ab6 <__prologue_saves__>:
    4ab6:	2f 92       	push	r2
    4ab8:	3f 92       	push	r3
    4aba:	4f 92       	push	r4
    4abc:	5f 92       	push	r5
    4abe:	6f 92       	push	r6
    4ac0:	7f 92       	push	r7
    4ac2:	8f 92       	push	r8
    4ac4:	9f 92       	push	r9
    4ac6:	af 92       	push	r10
    4ac8:	bf 92       	push	r11
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	cd b7       	in	r28, 0x3d	; 61
    4adc:	de b7       	in	r29, 0x3e	; 62
    4ade:	ca 1b       	sub	r28, r26
    4ae0:	db 0b       	sbc	r29, r27
    4ae2:	0f b6       	in	r0, 0x3f	; 63
    4ae4:	f8 94       	cli
    4ae6:	de bf       	out	0x3e, r29	; 62
    4ae8:	0f be       	out	0x3f, r0	; 63
    4aea:	cd bf       	out	0x3d, r28	; 61
    4aec:	09 94       	ijmp

00004aee <__epilogue_restores__>:
    4aee:	2a 88       	ldd	r2, Y+18	; 0x12
    4af0:	39 88       	ldd	r3, Y+17	; 0x11
    4af2:	48 88       	ldd	r4, Y+16	; 0x10
    4af4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4af6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4af8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4afa:	8c 84       	ldd	r8, Y+12	; 0x0c
    4afc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4afe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b00:	b9 84       	ldd	r11, Y+9	; 0x09
    4b02:	c8 84       	ldd	r12, Y+8	; 0x08
    4b04:	df 80       	ldd	r13, Y+7	; 0x07
    4b06:	ee 80       	ldd	r14, Y+6	; 0x06
    4b08:	fd 80       	ldd	r15, Y+5	; 0x05
    4b0a:	0c 81       	ldd	r16, Y+4	; 0x04
    4b0c:	1b 81       	ldd	r17, Y+3	; 0x03
    4b0e:	aa 81       	ldd	r26, Y+2	; 0x02
    4b10:	b9 81       	ldd	r27, Y+1	; 0x01
    4b12:	ce 0f       	add	r28, r30
    4b14:	d1 1d       	adc	r29, r1
    4b16:	0f b6       	in	r0, 0x3f	; 63
    4b18:	f8 94       	cli
    4b1a:	de bf       	out	0x3e, r29	; 62
    4b1c:	0f be       	out	0x3f, r0	; 63
    4b1e:	cd bf       	out	0x3d, r28	; 61
    4b20:	ed 01       	movw	r28, r26
    4b22:	08 95       	ret

00004b24 <_exit>:
    4b24:	f8 94       	cli

00004b26 <__stop_program>:
    4b26:	ff cf       	rjmp	.-2      	; 0x4b26 <__stop_program>
